	.file	"main.cpp"
	.option nopic
	.attribute arch, "rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_zicsr2p0"
	.attribute unaligned_access, 0
	.attribute stack_align, 16
# GNU C++20 (gc891d8dc23e-dirty) version 13.2.0 (riscv64-unknown-linux-gnu)
#	compiled by GNU C version 11.4.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version none
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -mtune=rocket -mabi=lp64d -misa-spec=20191213 -march=rv64imafdc_zicsr -O0 -std=c++20 -fno-exceptions
	.text
	.section	.text._ZnamPv,"axG",@progbits,_ZnamPv,comdat
	.align	1
	.weak	_ZnamPv
	.type	_ZnamPv, @function
_ZnamPv:
.LFB24:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# D.3057, D.3057
	sd	a1,-32(s0)	# __p, __p
# /opt/riscv/riscv64-unknown-linux-gnu/include/c++/13.2.0/new:177: { return __p; }
	ld	a5,-32(s0)		# _2, __p
# /opt/riscv/riscv64-unknown-linux-gnu/include/c++/13.2.0/new:177: { return __p; }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE24:
	.size	_ZnamPv, .-_ZnamPv
	.section	.text._ZN8rsyscall7my_sbrkEl,"axG",@progbits,_ZN8rsyscall7my_sbrkEl,comdat
	.align	1
	.weak	_ZN8rsyscall7my_sbrkEl
	.type	_ZN8rsyscall7my_sbrkEl, @function
_ZN8rsyscall7my_sbrkEl:
.LFB3226:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	s0,40(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# size, size
# memory/../syscall/syscall.hpp:8:     __asm__ volatile("addi a7, zero, 9\n\t"
	ld	a5,-40(s0)		# tmp137, size
#APP
# 8 "memory/../syscall/syscall.hpp" 1
	addi a7, zero, 9
	add a0, zero, a5	# tmp137
	ecall
	mv a5, a0	# result
# 0 "" 2
#NO_APP
	sd	a5,-24(s0)	# result, result
# memory/../syscall/syscall.hpp:15:     return result;
	ld	a5,-24(s0)		# _3, result
# memory/../syscall/syscall.hpp:16: }
	mv	a0,a5	#, <retval>
	ld	s0,40(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3226:
	.size	_ZN8rsyscall7my_sbrkEl, .-_ZN8rsyscall7my_sbrkEl
	.section	.text._ZN8rsyscall4exitEl,"axG",@progbits,_ZN8rsyscall4exitEl,comdat
	.align	1
	.weak	_ZN8rsyscall4exitEl
	.type	_ZN8rsyscall4exitEl, @function
_ZN8rsyscall4exitEl:
.LFB3227:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# exit_code, exit_code
# memory/../syscall/syscall.hpp:19:     __asm__ volatile("addi a7, zero, 93\n\t"
	ld	a5,-24(s0)		# tmp134, exit_code
#APP
# 19 "memory/../syscall/syscall.hpp" 1
	addi a7, zero, 93
	add a0, zero, a5	# tmp134
	ecall
	
# 0 "" 2
# memory/../syscall/syscall.hpp:23: }
#NO_APP
	nop	
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3227:
	.size	_ZN8rsyscall4exitEl, .-_ZN8rsyscall4exitEl
	.section	.text._ZN8rsyscall12print_stringEPKc,"axG",@progbits,_ZN8rsyscall12print_stringEPKc,comdat
	.align	1
	.weak	_ZN8rsyscall12print_stringEPKc
	.type	_ZN8rsyscall12print_stringEPKc, @function
_ZN8rsyscall12print_stringEPKc:
.LFB3229:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# str, str
# memory/../syscall/syscall.hpp:33:     __asm__ volatile("li a7, 4\n\t"
	ld	a5,-24(s0)		# tmp134, str
#APP
# 33 "memory/../syscall/syscall.hpp" 1
	li a7, 4
	mv a0, a5	# tmp134
	ecall
	
# 0 "" 2
# memory/../syscall/syscall.hpp:37: }
#NO_APP
	nop	
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3229:
	.size	_ZN8rsyscall12print_stringEPKc, .-_ZN8rsyscall12print_stringEPKc
	.section	.text._ZN8rsyscall9open_fileEPKcl,"axG",@progbits,_ZN8rsyscall9open_fileEPKcl,comdat
	.align	1
	.weak	_ZN8rsyscall9open_fileEPKcl
	.type	_ZN8rsyscall9open_fileEPKcl, @function
_ZN8rsyscall9open_fileEPKcl:
.LFB3230:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	s0,40(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# path, path
	sd	a1,-48(s0)	# flag, flag
# memory/../syscall/syscall.hpp:41:     __asm__ volatile("li a7, 1024\n\t"
	ld	a5,-40(s0)		# tmp137, path
	ld	a4,-48(s0)		# tmp138, flag
#APP
# 41 "memory/../syscall/syscall.hpp" 1
	li a7, 1024
	mv a0, a5	# tmp137
	mv a1, a4	# tmp138
	ecall 
	mv a5, a0 	# open_file_descriptor
	
# 0 "" 2
#NO_APP
	sd	a5,-24(s0)	# open_file_descriptor, open_file_descriptor
# memory/../syscall/syscall.hpp:49:     return open_file_descriptor;
	ld	a5,-24(s0)		# _4, open_file_descriptor
# memory/../syscall/syscall.hpp:50: }
	mv	a0,a5	#, <retval>
	ld	s0,40(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3230:
	.size	_ZN8rsyscall9open_fileEPKcl, .-_ZN8rsyscall9open_fileEPKcl
	.section	.text._ZN8rsyscall10close_fileEl,"axG",@progbits,_ZN8rsyscall10close_fileEl,comdat
	.align	1
	.weak	_ZN8rsyscall10close_fileEl
	.type	_ZN8rsyscall10close_fileEl, @function
_ZN8rsyscall10close_fileEl:
.LFB3231:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# descriptor, descriptor
# memory/../syscall/syscall.hpp:53:     __asm__ volatile("li a7, 57\n\t"
	ld	a5,-24(s0)		# tmp134, descriptor
#APP
# 53 "memory/../syscall/syscall.hpp" 1
	li a7, 57
	mv a0, a5	# tmp134
	ecall
	
# 0 "" 2
# memory/../syscall/syscall.hpp:57: }
#NO_APP
	nop	
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3231:
	.size	_ZN8rsyscall10close_fileEl, .-_ZN8rsyscall10close_fileEl
	.section	.text._ZN8rsyscall20read_from_descriptorElPcl,"axG",@progbits,_ZN8rsyscall20read_from_descriptorElPcl,comdat
	.align	1
	.weak	_ZN8rsyscall20read_from_descriptorElPcl
	.type	_ZN8rsyscall20read_from_descriptorElPcl, @function
_ZN8rsyscall20read_from_descriptorElPcl:
.LFB3232:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	s0,56(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# descriptor, descriptor
	sd	a1,-48(s0)	# buffer, buffer
	sd	a2,-56(s0)	# max_length, max_length
# memory/../syscall/syscall.hpp:62:     __asm__ volatile("li a7, 63\n\t"
	ld	a5,-40(s0)		# tmp137, descriptor
	ld	a4,-48(s0)		# tmp138, buffer
	ld	a3,-56(s0)		# tmp139, max_length
#APP
# 62 "memory/../syscall/syscall.hpp" 1
	li a7, 63
	mv a0, a5	# tmp137
	mv a1, a4	# tmp138
	mv a2, a3	# tmp139
	ecall
	mv a5, a0	# bytes_read
	
# 0 "" 2
#NO_APP
	sd	a5,-24(s0)	# bytes_read, bytes_read
# memory/../syscall/syscall.hpp:71:     return bytes_read;
	ld	a5,-24(s0)		# _5, bytes_read
# memory/../syscall/syscall.hpp:72: }
	mv	a0,a5	#, <retval>
	ld	s0,56(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3232:
	.size	_ZN8rsyscall20read_from_descriptorElPcl, .-_ZN8rsyscall20read_from_descriptorElPcl
	.local	_ZN6memoryL9heapStartE
	.comm	_ZN6memoryL9heapStartE,8,8
	.local	_ZN6memoryL3topE
	.comm	_ZN6memoryL3topE,8,8
	.section	.text._ZN6memory5alignEm,"axG",@progbits,_ZN6memory5alignEm,comdat
	.align	1
	.weak	_ZN6memory5alignEm
	.type	_ZN6memory5alignEm, @function
_ZN6memory5alignEm:
.LFB3234:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# n, n
# memory/allocator.hpp:26:     return (n + sizeof(word_t) - 1) & ~(sizeof(word_t) - 1);
	ld	a5,-24(s0)		# tmp137, n
	addi	a5,a5,7	#, _1, tmp137
# memory/allocator.hpp:26:     return (n + sizeof(word_t) - 1) & ~(sizeof(word_t) - 1);
	andi	a5,a5,-8	#, _3, _1
# memory/allocator.hpp:27: }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3234:
	.size	_ZN6memory5alignEm, .-_ZN6memory5alignEm
	.section	.text._ZN6memory9allocSizeEm,"axG",@progbits,_ZN6memory9allocSizeEm,comdat
	.align	1
	.weak	_ZN6memory9allocSizeEm
	.type	_ZN6memory9allocSizeEm, @function
_ZN6memory9allocSizeEm:
.LFB3235:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# size, size
# memory/allocator.hpp:30:     return size + sizeof(Block) - sizeof(std::declval<Block>().data);
	ld	a5,-24(s0)		# tmp136, size
	addi	a5,a5,24	#, _2, tmp136
# memory/allocator.hpp:31: }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3235:
	.size	_ZN6memory9allocSizeEm, .-_ZN6memory9allocSizeEm
	.section	.text._ZN6memory13requestFromOSEm,"axG",@progbits,_ZN6memory13requestFromOSEm,comdat
	.align	1
	.weak	_ZN6memory13requestFromOSEm
	.type	_ZN6memory13requestFromOSEm, @function
_ZN6memory13requestFromOSEm:
.LFB3236:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# size, size
# memory/allocator.hpp:34:     auto block = (Block*)rsyscall::my_sbrk(0);
	li	a0,0		#,
	call	_ZN8rsyscall7my_sbrkEl		#
	sd	a0,-24(s0)	#, block
# memory/allocator.hpp:36:     if (rsyscall::my_sbrk(allocSize(size)) == (void*)-1) {
	ld	a0,-40(s0)		#, size
	call	_ZN6memory9allocSizeEm		#
	mv	a5,a0	# _1,
# memory/allocator.hpp:36:     if (rsyscall::my_sbrk(allocSize(size)) == (void*)-1) {
	mv	a0,a5	#, _2
	call	_ZN8rsyscall7my_sbrkEl		#
	mv	a5,a0	# _3,
# memory/allocator.hpp:36:     if (rsyscall::my_sbrk(allocSize(size)) == (void*)-1) {
	addi	a5,a5,1	#, tmp142, _3
	seqz	a5,a5	# tmp141, tmp142
	andi	a5,a5,0xff	# retval.3_11, tmp140
# memory/allocator.hpp:36:     if (rsyscall::my_sbrk(allocSize(size)) == (void*)-1) {
	beq	a5,zero,.L17	#, retval.3_11,,
# memory/allocator.hpp:37:         return nullptr;
	li	a5,0		# _4,
	j	.L18		#
.L17:
# memory/allocator.hpp:40:     return block;
	ld	a5,-24(s0)		# _4, block
.L18:
# memory/allocator.hpp:41: }
	mv	a0,a5	#, <retval>
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3236:
	.size	_ZN6memory13requestFromOSEm, .-_ZN6memory13requestFromOSEm
	.section	.text._ZN6memory8firstFitEm,"axG",@progbits,_ZN6memory8firstFitEm,comdat
	.align	1
	.weak	_ZN6memory8firstFitEm
	.type	_ZN6memory8firstFitEm, @function
_ZN6memory8firstFitEm:
.LFB3237:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	s0,40(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# size, size
# memory/allocator.hpp:44:     auto block = heapStart;
	lui	a5,%hi(_ZN6memoryL9heapStartE)	# tmp138,
	ld	a5,%lo(_ZN6memoryL9heapStartE)(a5)		# tmp139, heapStart
	sd	a5,-24(s0)	# tmp139, block
# memory/allocator.hpp:46:     while (block != nullptr) {
	j	.L20		#
.L24:
# memory/allocator.hpp:47:         if (block->used || block->size < size) {
	ld	a5,-24(s0)		# tmp140, block
	lbu	a5,8(a5)	# _1, block_3->used
# memory/allocator.hpp:47:         if (block->used || block->size < size) {
	bne	a5,zero,.L21	#, _1,,
# memory/allocator.hpp:47:         if (block->used || block->size < size) {
	ld	a5,-24(s0)		# tmp141, block
	ld	a5,0(a5)		# _2, block_3->size
# memory/allocator.hpp:47:         if (block->used || block->size < size) {
	ld	a4,-40(s0)		# tmp142, size
	bleu	a4,a5,.L22	#, tmp142, _2,
.L21:
# memory/allocator.hpp:48:             block = block->next;
	ld	a5,-24(s0)		# tmp143, block
	ld	a5,16(a5)		# tmp144, block_3->next
	sd	a5,-24(s0)	# tmp144, block
# memory/allocator.hpp:49:             continue;
	j	.L20		#
.L22:
# memory/allocator.hpp:51:         return block;
	ld	a5,-24(s0)		# _4, block
	j	.L23		#
.L20:
# memory/allocator.hpp:46:     while (block != nullptr) {
	ld	a5,-24(s0)		# tmp145, block
	bne	a5,zero,.L24	#, tmp145,,
# memory/allocator.hpp:54:     return nullptr;
	li	a5,0		# _4,
.L23:
# memory/allocator.hpp:55: }
	mv	a0,a5	#, <retval>
	ld	s0,40(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3237:
	.size	_ZN6memory8firstFitEm, .-_ZN6memory8firstFitEm
	.section	.text._ZN6memory9findBlockEm,"axG",@progbits,_ZN6memory9findBlockEm,comdat
	.align	1
	.weak	_ZN6memory9findBlockEm
	.type	_ZN6memory9findBlockEm, @function
_ZN6memory9findBlockEm:
.LFB3238:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# size, size
# memory/allocator.hpp:57: inline Block* findBlock(size_t size) { return firstFit(size); }
	ld	a0,-24(s0)		#, size
	call	_ZN6memory8firstFitEm		#
	mv	a5,a0	# _4,
# memory/allocator.hpp:57: inline Block* findBlock(size_t size) { return firstFit(size); }
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3238:
	.size	_ZN6memory9findBlockEm, .-_ZN6memory9findBlockEm
	.section	.rodata
	.align	3
.LC0:
	.string	"Out of memory\n"
	.section	.text._ZN6memory5allocEm,"axG",@progbits,_ZN6memory5allocEm,comdat
	.align	1
	.weak	_ZN6memory5allocEm
	.type	_ZN6memory5allocEm, @function
_ZN6memory5allocEm:
.LFB3239:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# size, size
# memory/allocator.hpp:60:     size = align(size);
	ld	a0,-40(s0)		#, size
	call	_ZN6memory5alignEm		#
	sd	a0,-40(s0)	#, size
# memory/allocator.hpp:62:     if (auto block = findBlock(size)) {
	ld	a0,-40(s0)		#, size
	call	_ZN6memory9findBlockEm		#
	sd	a0,-24(s0)	#, block
# memory/allocator.hpp:62:     if (auto block = findBlock(size)) {
	ld	a5,-24(s0)		# tmp139, block
	beq	a5,zero,.L28	#, tmp139,,
# memory/allocator.hpp:63:         return block->data;
	ld	a5,-24(s0)		# tmp140, block
	addi	a5,a5,24	#, _4, tmp140
	j	.L29		#
.L28:
# memory/allocator.hpp:66:     auto block = requestFromOS(size);
	ld	a0,-40(s0)		#, size
	call	_ZN6memory13requestFromOSEm		#
	sd	a0,-32(s0)	#, block
# memory/allocator.hpp:67:     if (block == nullptr) {
	ld	a5,-32(s0)		# tmp141, block
	bne	a5,zero,.L30	#, tmp141,,
# memory/allocator.hpp:68:         rsyscall::print_string("Out of memory\n");
	lui	a5,%hi(.LC0)	# tmp142,
	addi	a0,a5,%lo(.LC0)	#, tmp142,
	call	_ZN8rsyscall12print_stringEPKc		#
# memory/allocator.hpp:69:         rsyscall::exit(1);
	li	a0,1		#,
	call	_ZN8rsyscall4exitEl		#
# memory/allocator.hpp:70:         return nullptr;
	li	a5,0		# _4,
	j	.L29		#
.L30:
# memory/allocator.hpp:73:     block->size = size;
	ld	a5,-32(s0)		# tmp143, block
	ld	a4,-40(s0)		# tmp144, size
	sd	a4,0(a5)	# tmp144, block_15->size
# memory/allocator.hpp:74:     block->used = true;
	ld	a5,-32(s0)		# tmp145, block
	li	a4,1		# tmp146,
	sb	a4,8(a5)	# tmp146, block_15->used
# memory/allocator.hpp:76:     if (heapStart == nullptr) {
	lui	a5,%hi(_ZN6memoryL9heapStartE)	# tmp147,
	ld	a5,%lo(_ZN6memoryL9heapStartE)(a5)		# heapStart.0_1, heapStart
# memory/allocator.hpp:76:     if (heapStart == nullptr) {
	bne	a5,zero,.L31	#, heapStart.0_1,,
# memory/allocator.hpp:77:         heapStart = block;
	lui	a5,%hi(_ZN6memoryL9heapStartE)	# tmp148,
	ld	a4,-32(s0)		# tmp149, block
	sd	a4,%lo(_ZN6memoryL9heapStartE)(a5)	# tmp149, heapStart
.L31:
# memory/allocator.hpp:80:     if (top != nullptr) {
	lui	a5,%hi(_ZN6memoryL3topE)	# tmp150,
	ld	a5,%lo(_ZN6memoryL3topE)(a5)		# top.1_2, top
# memory/allocator.hpp:80:     if (top != nullptr) {
	beq	a5,zero,.L32	#, top.1_2,,
# memory/allocator.hpp:81:         top->next = block;
	lui	a5,%hi(_ZN6memoryL3topE)	# tmp151,
	ld	a5,%lo(_ZN6memoryL3topE)(a5)		# top.2_3, top
# memory/allocator.hpp:81:         top->next = block;
	ld	a4,-32(s0)		# tmp152, block
	sd	a4,16(a5)	# tmp152, top.2_3->next
.L32:
# memory/allocator.hpp:83:     top = block;
	lui	a5,%hi(_ZN6memoryL3topE)	# tmp153,
	ld	a4,-32(s0)		# tmp154, block
	sd	a4,%lo(_ZN6memoryL3topE)(a5)	# tmp154, top
# memory/allocator.hpp:84:     return block->data;
	ld	a5,-32(s0)		# tmp155, block
	addi	a5,a5,24	#, _4, tmp155
.L29:
# memory/allocator.hpp:85: }
	mv	a0,a5	#, <retval>
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3239:
	.size	_ZN6memory5allocEm, .-_ZN6memory5allocEm
	.section	.text._ZN6memory9getHeaderEPKl,"axG",@progbits,_ZN6memory9getHeaderEPKl,comdat
	.align	1
	.weak	_ZN6memory9getHeaderEPKl
	.type	_ZN6memory9getHeaderEPKl, @function
_ZN6memory9getHeaderEPKl:
.LFB3240:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# data, data
# memory/allocator.hpp:89:                     sizeof(Block));
	ld	a5,-24(s0)		# tmp136, data
	addi	a5,a5,-24	#, _2, tmp136
# memory/allocator.hpp:90: }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3240:
	.size	_ZN6memory9getHeaderEPKl, .-_ZN6memory9getHeaderEPKl
	.section	.text._ZN6memory4freeEPl,"axG",@progbits,_ZN6memory4freeEPl,comdat
	.align	1
	.weak	_ZN6memory4freeEPl
	.type	_ZN6memory4freeEPl, @function
_ZN6memory4freeEPl:
.LFB3241:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# data, data
# memory/allocator.hpp:93:     auto block = getHeader(data);
	ld	a0,-40(s0)		#, data
	call	_ZN6memory9getHeaderEPKl		#
	sd	a0,-24(s0)	#, block
# memory/allocator.hpp:94:     block->used = false;
	ld	a5,-24(s0)		# tmp134, block
	sb	zero,8(a5)	#, block_4->used
# memory/allocator.hpp:95: }
	nop	
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE3241:
	.size	_ZN6memory4freeEPl, .-_ZN6memory4freeEPl
	.section	.text._ZN4rstd6strlenEPKc,"axG",@progbits,_ZN4rstd6strlenEPKc,comdat
	.align	1
	.weak	_ZN4rstd6strlenEPKc
	.type	_ZN4rstd6strlenEPKc, @function
_ZN4rstd6strlenEPKc:
.LFB4555:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	s0,40(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# str, str
# util/string.hpp:14:     auto length = 0;
	sw	zero,-20(s0)	#, length
# util/string.hpp:16:     while (*str != '\0') {
	j	.L37		#
.L38:
# util/string.hpp:17:         ++length;
	lw	a5,-20(s0)		# tmp139, length
	addiw	a5,a5,1	#, tmp137, tmp138
	sw	a5,-20(s0)	# tmp137, length
# util/string.hpp:18:         ++str;
	ld	a5,-40(s0)		# tmp141, str
	addi	a5,a5,1	#, tmp140, tmp141
	sd	a5,-40(s0)	# tmp140, str
.L37:
# util/string.hpp:16:     while (*str != '\0') {
	ld	a5,-40(s0)		# tmp142, str
	lbu	a5,0(a5)	# _1, *str_2
# util/string.hpp:16:     while (*str != '\0') {
	bne	a5,zero,.L38	#, _1,,
# util/string.hpp:21:     return length;
	lw	a5,-20(s0)		# _7, length
# util/string.hpp:22: }
	mv	a0,a5	#, <retval>
	ld	s0,40(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4555:
	.size	_ZN4rstd6strlenEPKc, .-_ZN4rstd6strlenEPKc
	.section	.text._ZN4rstd6stringC2Ev,"axG",@progbits,_ZN4rstd6stringC5Ev,comdat
	.align	1
	.weak	_ZN4rstd6stringC2Ev
	.type	_ZN4rstd6stringC2Ev, @function
_ZN4rstd6stringC2Ev:
.LFB4569:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:216:     inline string() : size_(0), capacity_(0), data_(nullptr) {}
	ld	a5,-24(s0)		# tmp134, this
	sd	zero,0(a5)	#, this_2(D)->size_
# util/string.hpp:216:     inline string() : size_(0), capacity_(0), data_(nullptr) {}
	ld	a5,-24(s0)		# tmp135, this
	sd	zero,8(a5)	#, this_2(D)->capacity_
# util/string.hpp:216:     inline string() : size_(0), capacity_(0), data_(nullptr) {}
	ld	a5,-24(s0)		# tmp136, this
	sd	zero,16(a5)	#, this_2(D)->data_
# util/string.hpp:216:     inline string() : size_(0), capacity_(0), data_(nullptr) {}
	nop	
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4569:
	.size	_ZN4rstd6stringC2Ev, .-_ZN4rstd6stringC2Ev
	.weak	_ZN4rstd6stringC1Ev
	.set	_ZN4rstd6stringC1Ev,_ZN4rstd6stringC2Ev
	.section	.text._ZN4rstd6stringC2Emc,"axG",@progbits,_ZN4rstd6stringC5Emc,comdat
	.align	1
	.weak	_ZN4rstd6stringC2Emc
	.type	_ZN4rstd6stringC2Emc, @function
_ZN4rstd6stringC2Emc:
.LFB4572:
	.cfi_startproc
	addi	sp,sp,-80	#,,
	.cfi_def_cfa_offset 80
	sd	ra,72(sp)	#,
	sd	s0,64(sp)	#,
	sd	s1,56(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,80	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# this, this
	sd	a1,-64(s0)	# size, size
	mv	a5,a2	# tmp144, symbol
	sb	a5,-65(s0)	# tmp145, symbol
# util/string.hpp:218:     inline string(size_t size, char symbol) : size_(size), capacity_(size) {
	ld	a5,-56(s0)		# tmp146, this
	ld	a4,-64(s0)		# tmp147, size
	sd	a4,0(a5)	# tmp147, this_13(D)->size_
# util/string.hpp:218:     inline string(size_t size, char symbol) : size_(size), capacity_(size) {
	ld	a5,-56(s0)		# tmp148, this
	ld	a4,-64(s0)		# tmp149, size
	sd	a4,8(a5)	# tmp149, this_13(D)->capacity_
# util/string.hpp:219:         if (size_ == 0) {
	ld	a5,-56(s0)		# tmp150, this
	ld	a5,0(a5)		# _1, this_13(D)->size_
# util/string.hpp:219:         if (size_ == 0) {
	bne	a5,zero,.L42	#, _1,,
# util/string.hpp:220:             data_ = nullptr;
	ld	a5,-56(s0)		# tmp151, this
	sd	zero,16(a5)	#, this_13(D)->data_
# util/string.hpp:221:             return;
	j	.L41		#
.L42:
# util/string.hpp:224:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp152, this
	ld	s1,0(a5)		# _18, this_13(D)->size_
# util/string.hpp:224:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp153, this
	ld	a5,0(a5)		# _2, this_13(D)->size_
# util/string.hpp:224:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	mv	a0,a5	#, _2
	call	_Znam		#
	mv	a5,a0	# tmp154,
# util/string.hpp:224:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	mv	a1,a5	#, _20
	mv	a0,s1	#, _18
	call	_ZnamPv		#
	mv	a4,a0	# _3,
# util/string.hpp:224:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp155, this
	sd	a4,16(a5)	# _3, this_13(D)->data_
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	sw	zero,-36(s0)	#, i
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	j	.L44		#
.L45:
# util/string.hpp:226:             data_[i] = symbol;
	ld	a5,-56(s0)		# tmp156, this
	ld	a4,16(a5)		# _4, this_13(D)->data_
# util/string.hpp:226:             data_[i] = symbol;
	lw	a5,-36(s0)		# _5, i
# util/string.hpp:226:             data_[i] = symbol;
	add	a5,a4,a5	# _5, _6, _4
# util/string.hpp:226:             data_[i] = symbol;
	lbu	a4,-65(s0)	# tmp157, symbol
	sb	a4,0(a5)	# tmp157, *_6
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	lw	a5,-36(s0)		# tmp160, i
	addiw	a5,a5,1	#, tmp158, tmp159
	sw	a5,-36(s0)	# tmp158, i
.L44:
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	lw	a4,-36(s0)		# _7, i
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	ld	a5,-56(s0)		# tmp161, this
	ld	a5,0(a5)		# _8, this_13(D)->size_
# util/string.hpp:225:         for (auto i = 0; i < size_; ++i) {
	bltu	a4,a5,.L45	#, _7, _8,
.L41:
# util/string.hpp:228:     }
	ld	ra,72(sp)		#,
	.cfi_restore 1
	ld	s0,64(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 80
	ld	s1,56(sp)		#,
	.cfi_restore 9
	addi	sp,sp,80	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4572:
	.size	_ZN4rstd6stringC2Emc, .-_ZN4rstd6stringC2Emc
	.weak	_ZN4rstd6stringC1Emc
	.set	_ZN4rstd6stringC1Emc,_ZN4rstd6stringC2Emc
	.section	.text._ZN4rstd6stringC2EPKc,"axG",@progbits,_ZN4rstd6stringC5EPKc,comdat
	.align	1
	.weak	_ZN4rstd6stringC2EPKc
	.type	_ZN4rstd6stringC2EPKc, @function
_ZN4rstd6stringC2EPKc:
.LFB4575:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	sd	s1,40(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# this, this
	sd	a1,-64(s0)	# src, src
# util/string.hpp:231:         : size_(strlen(src)), capacity_(strlen(src)), data_(nullptr) {
	ld	a0,-64(s0)		#, src
	call	_ZN4rstd6strlenEPKc		#
	mv	a4,a0	# _1,
# util/string.hpp:231:         : size_(strlen(src)), capacity_(strlen(src)), data_(nullptr) {
	ld	a5,-56(s0)		# tmp149, this
	sd	a4,0(a5)	# _1, this_18(D)->size_
# util/string.hpp:231:         : size_(strlen(src)), capacity_(strlen(src)), data_(nullptr) {
	ld	a0,-64(s0)		#, src
	call	_ZN4rstd6strlenEPKc		#
	mv	a4,a0	# _2,
# util/string.hpp:231:         : size_(strlen(src)), capacity_(strlen(src)), data_(nullptr) {
	ld	a5,-56(s0)		# tmp150, this
	sd	a4,8(a5)	# _2, this_18(D)->capacity_
# util/string.hpp:231:         : size_(strlen(src)), capacity_(strlen(src)), data_(nullptr) {
	ld	a5,-56(s0)		# tmp151, this
	sd	zero,16(a5)	#, this_18(D)->data_
# util/string.hpp:232:         if (size_ == 0) {
	ld	a5,-56(s0)		# tmp152, this
	ld	a5,0(a5)		# _3, this_18(D)->size_
# util/string.hpp:232:         if (size_ == 0) {
	beq	a5,zero,.L51	#, _3,,
# util/string.hpp:236:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp153, this
	ld	s1,0(a5)		# _26, this_18(D)->size_
# util/string.hpp:236:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp154, this
	ld	a5,0(a5)		# _4, this_18(D)->size_
# util/string.hpp:236:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	mv	a0,a5	#, _4
	call	_Znam		#
	mv	a5,a0	# tmp155,
# util/string.hpp:236:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	mv	a1,a5	#, _28
	mv	a0,s1	#, _26
	call	_ZnamPv		#
	mv	a4,a0	# _5,
# util/string.hpp:236:         data_ = ::new (::operator new[](sizeof(char) * size_)) char[size_];
	ld	a5,-56(s0)		# tmp156, this
	sd	a4,16(a5)	# _5, this_18(D)->data_
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	sw	zero,-36(s0)	#, i
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	j	.L49		#
.L50:
# util/string.hpp:238:             data_[i] = src[i];
	lw	a5,-36(s0)		# _6, i
# util/string.hpp:238:             data_[i] = src[i];
	ld	a4,-64(s0)		# tmp157, src
	add	a4,a4,a5	# _6, _7, tmp157
# util/string.hpp:238:             data_[i] = src[i];
	ld	a5,-56(s0)		# tmp158, this
	ld	a3,16(a5)		# _8, this_18(D)->data_
# util/string.hpp:238:             data_[i] = src[i];
	lw	a5,-36(s0)		# _9, i
# util/string.hpp:238:             data_[i] = src[i];
	add	a5,a3,a5	# _9, _10, _8
# util/string.hpp:238:             data_[i] = src[i];
	lbu	a4,0(a4)	# _11, *_7
# util/string.hpp:238:             data_[i] = src[i];
	sb	a4,0(a5)	# _11, *_10
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	lw	a5,-36(s0)		# tmp161, i
	addiw	a5,a5,1	#, tmp159, tmp160
	sw	a5,-36(s0)	# tmp159, i
.L49:
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	lw	a4,-36(s0)		# _12, i
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	ld	a5,-56(s0)		# tmp162, this
	ld	a5,0(a5)		# _13, this_18(D)->size_
# util/string.hpp:237:         for (auto i = 0; i < size_; ++i) {
	bltu	a4,a5,.L50	#, _12, _13,
	j	.L46		#
.L51:
# util/string.hpp:233:             return;
	nop	
.L46:
# util/string.hpp:240:     }
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	ld	s1,40(sp)		#,
	.cfi_restore 9
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4575:
	.size	_ZN4rstd6stringC2EPKc, .-_ZN4rstd6stringC2EPKc
	.weak	_ZN4rstd6stringC1EPKc
	.set	_ZN4rstd6stringC1EPKc,_ZN4rstd6stringC2EPKc
	.section	.text._ZN4rstd6stringD2Ev,"axG",@progbits,_ZN4rstd6stringD5Ev,comdat
	.align	1
	.weak	_ZN4rstd6stringD2Ev
	.type	_ZN4rstd6stringD2Ev, @function
_ZN4rstd6stringD2Ev:
.LFB4581:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:254:     inline ~string() { clear(); }
	ld	a0,-24(s0)		#, this
	call	_ZN4rstd6string5clearEv		#
# util/string.hpp:254:     inline ~string() { clear(); }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4581:
	.size	_ZN4rstd6stringD2Ev, .-_ZN4rstd6stringD2Ev
	.weak	_ZN4rstd6stringD1Ev
	.set	_ZN4rstd6stringD1Ev,_ZN4rstd6stringD2Ev
	.section	.text._ZN4rstd6stringC2ERKS0_,"axG",@progbits,_ZN4rstd6stringC5ERKS0_,comdat
	.align	1
	.weak	_ZN4rstd6stringC2ERKS0_
	.type	_ZN4rstd6stringC2ERKS0_, @function
_ZN4rstd6stringC2ERKS0_:
.LFB4584:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	sd	s1,40(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# this, this
	sd	a1,-64(s0)	# other, other
# util/string.hpp:257:         : size_(other.size()), capacity_(other.capacity()) {
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6string4sizeEv		#
	mv	a4,a0	# _1,
# util/string.hpp:257:         : size_(other.size()), capacity_(other.capacity()) {
	ld	a5,-56(s0)		# tmp149, this
	sd	a4,0(a5)	# _1, this_18(D)->size_
# util/string.hpp:257:         : size_(other.size()), capacity_(other.capacity()) {
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6string8capacityEv		#
	mv	a4,a0	# _2,
# util/string.hpp:257:         : size_(other.size()), capacity_(other.capacity()) {
	ld	a5,-56(s0)		# tmp150, this
	sd	a4,8(a5)	# _2, this_18(D)->capacity_
# util/string.hpp:258:         if (this == &other) {
	ld	a4,-56(s0)		# tmp151, this
	ld	a5,-64(s0)		# tmp152, other
	beq	a4,a5,.L59	#, tmp151, tmp152,
# util/string.hpp:262:         if (capacity_ == 0) {
	ld	a5,-56(s0)		# tmp153, this
	ld	a5,8(a5)		# _3, this_18(D)->capacity_
# util/string.hpp:262:         if (capacity_ == 0) {
	bne	a5,zero,.L56	#, _3,,
# util/string.hpp:263:             data_ = nullptr;
	ld	a5,-56(s0)		# tmp154, this
	sd	zero,16(a5)	#, this_18(D)->data_
# util/string.hpp:264:             return;
	j	.L53		#
.L56:
# util/string.hpp:268:             ::new (::operator new[](sizeof(char) * capacity_)) char[capacity_];
	ld	a5,-56(s0)		# tmp155, this
	ld	s1,8(a5)		# _25, this_18(D)->capacity_
# util/string.hpp:268:             ::new (::operator new[](sizeof(char) * capacity_)) char[capacity_];
	ld	a5,-56(s0)		# tmp156, this
	ld	a5,8(a5)		# _4, this_18(D)->capacity_
# util/string.hpp:268:             ::new (::operator new[](sizeof(char) * capacity_)) char[capacity_];
	mv	a0,a5	#, _4
	call	_Znam		#
	mv	a5,a0	# tmp157,
# util/string.hpp:268:             ::new (::operator new[](sizeof(char) * capacity_)) char[capacity_];
	mv	a1,a5	#, _27
	mv	a0,s1	#, _25
	call	_ZnamPv		#
	mv	a4,a0	# _5,
# util/string.hpp:267:         data_ =
	ld	a5,-56(s0)		# tmp158, this
	sd	a4,16(a5)	# _5, this_18(D)->data_
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	sw	zero,-36(s0)	#, i
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	j	.L57		#
.L58:
# util/string.hpp:270:             data_[i] = other[i];
	lw	a5,-36(s0)		# _6, i
	mv	a1,a5	#, _6
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6stringixEm		#
	mv	a3,a0	# _7,
# util/string.hpp:270:             data_[i] = other[i];
	ld	a5,-56(s0)		# tmp159, this
	ld	a4,16(a5)		# _8, this_18(D)->data_
# util/string.hpp:270:             data_[i] = other[i];
	lw	a5,-36(s0)		# _9, i
# util/string.hpp:270:             data_[i] = other[i];
	add	a5,a4,a5	# _9, _10, _8
# util/string.hpp:270:             data_[i] = other[i];
	lbu	a4,0(a3)	# _11, *_7
	sb	a4,0(a5)	# _11, *_10
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	lw	a5,-36(s0)		# tmp162, i
	addiw	a5,a5,1	#, tmp160, tmp161
	sw	a5,-36(s0)	# tmp160, i
.L57:
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	lw	a4,-36(s0)		# _12, i
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	ld	a5,-56(s0)		# tmp163, this
	ld	a5,0(a5)		# _13, this_18(D)->size_
# util/string.hpp:269:         for (auto i = 0; i < size_; ++i) {
	bltu	a4,a5,.L58	#, _12, _13,
	j	.L53		#
.L59:
# util/string.hpp:259:             return;
	nop	
.L53:
# util/string.hpp:272:     }
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	ld	s1,40(sp)		#,
	.cfi_restore 9
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4584:
	.size	_ZN4rstd6stringC2ERKS0_, .-_ZN4rstd6stringC2ERKS0_
	.weak	_ZN4rstd6stringC1ERKS0_
	.set	_ZN4rstd6stringC1ERKS0_,_ZN4rstd6stringC2ERKS0_
	.section	.text._ZN4rstd6stringaSERKS0_,"axG",@progbits,_ZN4rstd6stringaSERKS0_,comdat
	.align	1
	.weak	_ZN4rstd6stringaSERKS0_
	.type	_ZN4rstd6stringaSERKS0_, @function
_ZN4rstd6stringaSERKS0_:
.LFB4586:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	sd	s1,40(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# this, this
	sd	a1,-64(s0)	# other, other
# util/string.hpp:275:         if (this == &other) {
	ld	a4,-56(s0)		# tmp153, this
	ld	a5,-64(s0)		# tmp154, other
	bne	a4,a5,.L61	#, tmp153, tmp154,
# util/string.hpp:276:             return *this;
	ld	a5,-56(s0)		# _16, this
	j	.L62		#
.L61:
# util/string.hpp:279:         size_ = other.size();
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6string4sizeEv		#
	mv	a4,a0	# _1,
# util/string.hpp:279:         size_ = other.size();
	ld	a5,-56(s0)		# tmp155, this
	sd	a4,0(a5)	# _1, this_22(D)->size_
# util/string.hpp:280:         capacity_ = other.capacity();
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6string8capacityEv		#
	mv	a4,a0	# _2,
# util/string.hpp:280:         capacity_ = other.capacity();
	ld	a5,-56(s0)		# tmp156, this
	sd	a4,8(a5)	# _2, this_22(D)->capacity_
# util/string.hpp:281:         ::delete[] data_;
	ld	a5,-56(s0)		# tmp157, this
	ld	a5,16(a5)		# _3, this_22(D)->data_
# util/string.hpp:281:         ::delete[] data_;
	beq	a5,zero,.L63	#, _3,,
# util/string.hpp:281:         ::delete[] data_;
	ld	a5,-56(s0)		# tmp158, this
	ld	a5,16(a5)		# _4, this_22(D)->data_
	mv	a0,a5	#, _4
	call	_ZdaPv		#
.L63:
# util/string.hpp:282:         data_ = size_ > 0 ? ::new (::operator new[](sizeof(char) *
	ld	a5,-56(s0)		# tmp159, this
	ld	a5,0(a5)		# _5, this_22(D)->size_
# util/string.hpp:282:         data_ = size_ > 0 ? ::new (::operator new[](sizeof(char) *
	beq	a5,zero,.L64	#, _5,,
# util/string.hpp:283:                                                     capacity_)) char[capacity_]
	ld	a5,-56(s0)		# tmp160, this
	ld	s1,8(a5)		# _31, this_22(D)->capacity_
# util/string.hpp:283:                                                     capacity_)) char[capacity_]
	ld	a5,-56(s0)		# tmp161, this
	ld	a5,8(a5)		# _6, this_22(D)->capacity_
# util/string.hpp:282:         data_ = size_ > 0 ? ::new (::operator new[](sizeof(char) *
	mv	a0,a5	#, _6
	call	_Znam		#
	mv	a5,a0	# tmp162,
# util/string.hpp:283:                                                     capacity_)) char[capacity_]
	mv	a1,a5	#, _33
	mv	a0,s1	#, _31
	call	_ZnamPv		#
	mv	a4,a0	# iftmp.10_17,
	j	.L65		#
.L64:
# util/string.hpp:282:         data_ = size_ > 0 ? ::new (::operator new[](sizeof(char) *
	li	a4,0		# iftmp.10_17,
.L65:
# util/string.hpp:282:         data_ = size_ > 0 ? ::new (::operator new[](sizeof(char) *
	ld	a5,-56(s0)		# tmp163, this
	sd	a4,16(a5)	# iftmp.10_17, this_22(D)->data_
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	sw	zero,-36(s0)	#, i
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	j	.L66		#
.L67:
# util/string.hpp:286:             data_[i] = other[i];
	lw	a5,-36(s0)		# _7, i
	mv	a1,a5	#, _7
	ld	a0,-64(s0)		#, other
	call	_ZNK4rstd6stringixEm		#
	mv	a3,a0	# _8,
# util/string.hpp:286:             data_[i] = other[i];
	ld	a5,-56(s0)		# tmp164, this
	ld	a4,16(a5)		# _9, this_22(D)->data_
# util/string.hpp:286:             data_[i] = other[i];
	lw	a5,-36(s0)		# _10, i
# util/string.hpp:286:             data_[i] = other[i];
	add	a5,a4,a5	# _10, _11, _9
# util/string.hpp:286:             data_[i] = other[i];
	lbu	a4,0(a3)	# _12, *_8
	sb	a4,0(a5)	# _12, *_11
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	lw	a5,-36(s0)		# tmp167, i
	addiw	a5,a5,1	#, tmp165, tmp166
	sw	a5,-36(s0)	# tmp165, i
.L66:
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	lw	a4,-36(s0)		# _13, i
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	ld	a5,-56(s0)		# tmp168, this
	ld	a5,0(a5)		# _14, this_22(D)->size_
# util/string.hpp:285:         for (auto i = 0; i < size_; ++i) {
	bltu	a4,a5,.L67	#, _13, _14,
# util/string.hpp:288:         return *this;
	ld	a5,-56(s0)		# _16, this
.L62:
# util/string.hpp:289:     }
	mv	a0,a5	#, <retval>
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	ld	s1,40(sp)		#,
	.cfi_restore 9
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4586:
	.size	_ZN4rstd6stringaSERKS0_, .-_ZN4rstd6stringaSERKS0_
	.section	.text._ZNK4rstd6stringixEm,"axG",@progbits,_ZNK4rstd6stringixEm,comdat
	.align	1
	.weak	_ZNK4rstd6stringixEm
	.type	_ZNK4rstd6stringixEm, @function
_ZNK4rstd6stringixEm:
.LFB4588:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# idx, idx
# util/string.hpp:293:     inline const char& operator[](size_t idx) const { return *(data_ + idx); }
	ld	a5,-24(s0)		# tmp137, this
	ld	a4,16(a5)		# _1, this_3(D)->data_
# util/string.hpp:293:     inline const char& operator[](size_t idx) const { return *(data_ + idx); }
	ld	a5,-32(s0)		# tmp138, idx
	add	a5,a4,a5	# tmp138, _5, _1
# util/string.hpp:293:     inline const char& operator[](size_t idx) const { return *(data_ + idx); }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4588:
	.size	_ZNK4rstd6stringixEm, .-_ZNK4rstd6stringixEm
	.section	.text._ZN4rstd6string5c_strEv,"axG",@progbits,_ZN4rstd6string5c_strEv,comdat
	.align	1
	.weak	_ZN4rstd6string5c_strEv
	.type	_ZN4rstd6string5c_strEv, @function
_ZN4rstd6string5c_strEv:
.LFB4598:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:308:     inline char* c_str() { return data_; }
	ld	a5,-24(s0)		# tmp136, this
	ld	a5,16(a5)		# _3, this_2(D)->data_
# util/string.hpp:308:     inline char* c_str() { return data_; }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4598:
	.size	_ZN4rstd6string5c_strEv, .-_ZN4rstd6string5c_strEv
	.section	.text._ZNK4rstd6string4sizeEv,"axG",@progbits,_ZNK4rstd6string4sizeEv,comdat
	.align	1
	.weak	_ZNK4rstd6string4sizeEv
	.type	_ZNK4rstd6string4sizeEv, @function
_ZNK4rstd6string4sizeEv:
.LFB4600:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:312:     inline size_t size() const { return size_; }
	ld	a5,-24(s0)		# tmp136, this
	ld	a5,0(a5)		# _3, this_2(D)->size_
# util/string.hpp:312:     inline size_t size() const { return size_; }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4600:
	.size	_ZNK4rstd6string4sizeEv, .-_ZNK4rstd6string4sizeEv
	.section	.text._ZNK4rstd6string8capacityEv,"axG",@progbits,_ZNK4rstd6string8capacityEv,comdat
	.align	1
	.weak	_ZNK4rstd6string8capacityEv
	.type	_ZNK4rstd6string8capacityEv, @function
_ZNK4rstd6string8capacityEv:
.LFB4602:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:316:     inline size_t capacity() const { return capacity_; }
	ld	a5,-24(s0)		# tmp136, this
	ld	a5,8(a5)		# _3, this_2(D)->capacity_
# util/string.hpp:316:     inline size_t capacity() const { return capacity_; }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4602:
	.size	_ZNK4rstd6string8capacityEv, .-_ZNK4rstd6string8capacityEv
	.section	.text._ZN4rstd6string5clearEv,"axG",@progbits,_ZN4rstd6string5clearEv,comdat
	.align	1
	.weak	_ZN4rstd6string5clearEv
	.type	_ZN4rstd6string5clearEv, @function
_ZN4rstd6string5clearEv:
.LFB4603:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# util/string.hpp:319:         if (data_) {
	ld	a5,-24(s0)		# tmp137, this
	ld	a5,16(a5)		# _1, this_6(D)->data_
# util/string.hpp:319:         if (data_) {
	beq	a5,zero,.L77	#, _1,,
# util/string.hpp:320:             ::delete[] data_;
	ld	a5,-24(s0)		# tmp138, this
	ld	a5,16(a5)		# _2, this_6(D)->data_
# util/string.hpp:320:             ::delete[] data_;
	beq	a5,zero,.L77	#, _2,,
# util/string.hpp:320:             ::delete[] data_;
	ld	a5,-24(s0)		# tmp139, this
	ld	a5,16(a5)		# _3, this_6(D)->data_
	mv	a0,a5	#, _3
	call	_ZdaPv		#
.L77:
# util/string.hpp:322:         data_ = nullptr;
	ld	a5,-24(s0)		# tmp140, this
	sd	zero,16(a5)	#, this_6(D)->data_
# util/string.hpp:323:         size_ = 0;
	ld	a5,-24(s0)		# tmp141, this
	sd	zero,0(a5)	#, this_6(D)->size_
# util/string.hpp:324:         capacity_ = 0;
	ld	a5,-24(s0)		# tmp142, this
	sd	zero,8(a5)	#, this_6(D)->capacity_
# util/string.hpp:325:     }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4603:
	.size	_ZN4rstd6string5clearEv, .-_ZN4rstd6string5clearEv
	.section	.text._ZN4rstd6string9push_backEc,"axG",@progbits,_ZN4rstd6string9push_backEc,comdat
	.align	1
	.weak	_ZN4rstd6string9push_backEc
	.type	_ZN4rstd6string9push_backEc, @function
_ZN4rstd6string9push_backEc:
.LFB4607:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	mv	a5,a1	# tmp150, c
	sb	a5,-25(s0)	# tmp151, c
# util/string.hpp:342:         if (capacity_ == 0) {
	ld	a5,-24(s0)		# tmp152, this
	ld	a5,8(a5)		# _1, this_20(D)->capacity_
# util/string.hpp:342:         if (capacity_ == 0) {
	bne	a5,zero,.L79	#, _1,,
# util/string.hpp:343:             ::delete[] data_;
	ld	a5,-24(s0)		# tmp153, this
	ld	a5,16(a5)		# _2, this_20(D)->data_
# util/string.hpp:343:             ::delete[] data_;
	beq	a5,zero,.L80	#, _2,,
# util/string.hpp:343:             ::delete[] data_;
	ld	a5,-24(s0)		# tmp154, this
	ld	a5,16(a5)		# _3, this_20(D)->data_
	mv	a0,a5	#, _3
	call	_ZdaPv		#
.L80:
# util/string.hpp:344:             data_ = ::new (::operator new[](sizeof(char))) char[1];
	li	a0,1		#,
	call	_Znam		#
	mv	a5,a0	# tmp155,
# util/string.hpp:344:             data_ = ::new (::operator new[](sizeof(char))) char[1];
	mv	a1,a5	#, _27
	li	a0,1		#,
	call	_ZnamPv		#
	mv	a4,a0	# _4,
# util/string.hpp:344:             data_ = ::new (::operator new[](sizeof(char))) char[1];
	ld	a5,-24(s0)		# tmp156, this
	sd	a4,16(a5)	# _4, this_20(D)->data_
# util/string.hpp:345:             data_[0] = c;
	ld	a5,-24(s0)		# tmp157, this
	ld	a5,16(a5)		# _5, this_20(D)->data_
# util/string.hpp:345:             data_[0] = c;
	lbu	a4,-25(s0)	# tmp158, c
	sb	a4,0(a5)	# tmp158, *_5
# util/string.hpp:346:             capacity_ = 1;
	ld	a5,-24(s0)		# tmp159, this
	li	a4,1		# tmp160,
	sd	a4,8(a5)	# tmp160, this_20(D)->capacity_
# util/string.hpp:347:             size_ = 1;
	ld	a5,-24(s0)		# tmp161, this
	li	a4,1		# tmp162,
	sd	a4,0(a5)	# tmp162, this_20(D)->size_
# util/string.hpp:348:             return;
	j	.L78		#
.L79:
# util/string.hpp:351:         if (size_ == capacity_) {
	ld	a5,-24(s0)		# tmp163, this
	ld	a4,0(a5)		# _6, this_20(D)->size_
# util/string.hpp:351:         if (size_ == capacity_) {
	ld	a5,-24(s0)		# tmp164, this
	ld	a5,8(a5)		# _7, this_20(D)->capacity_
# util/string.hpp:351:         if (size_ == capacity_) {
	bne	a4,a5,.L82	#, _6, _7,
# util/string.hpp:352:             reserve(capacity_ * 2);
	ld	a5,-24(s0)		# tmp165, this
	ld	a5,8(a5)		# _8, this_20(D)->capacity_
# util/string.hpp:352:             reserve(capacity_ * 2);
	slli	a5,a5,1	#, _9, _8
	mv	a1,a5	#, _9
	ld	a0,-24(s0)		#, this
	call	_ZN4rstd6string7reserveEm		#
.L82:
# util/string.hpp:355:         ++size_;
	ld	a5,-24(s0)		# tmp166, this
	ld	a5,0(a5)		# _10, this_20(D)->size_
# util/string.hpp:355:         ++size_;
	addi	a4,a5,1	#, _11, _10
	ld	a5,-24(s0)		# tmp167, this
	sd	a4,0(a5)	# _11, this_20(D)->size_
# util/string.hpp:356:         *(data_ + size_ - 1) = c;
	ld	a5,-24(s0)		# tmp168, this
	ld	a4,16(a5)		# _12, this_20(D)->data_
# util/string.hpp:356:         *(data_ + size_ - 1) = c;
	ld	a5,-24(s0)		# tmp169, this
	ld	a5,0(a5)		# _13, this_20(D)->size_
# util/string.hpp:356:         *(data_ + size_ - 1) = c;
	addi	a5,a5,-1	#, _14, _13
	add	a5,a4,a5	# _14, _15, _12
# util/string.hpp:356:         *(data_ + size_ - 1) = c;
	lbu	a4,-25(s0)	# tmp170, c
	sb	a4,0(a5)	# tmp170, *_15
.L78:
# util/string.hpp:357:     }
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4607:
	.size	_ZN4rstd6string9push_backEc, .-_ZN4rstd6string9push_backEc
	.section	.text._ZN4rstd6string7reserveEm,"axG",@progbits,_ZN4rstd6string7reserveEm,comdat
	.align	1
	.weak	_ZN4rstd6string7reserveEm
	.type	_ZN4rstd6string7reserveEm, @function
_ZN4rstd6string7reserveEm:
.LFB4609:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	sd	s1,40(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# this, this
	sd	a1,-64(s0)	# new_capacity, new_capacity
# util/string.hpp:381:         if (new_capacity <= capacity_) {
	ld	a5,-56(s0)		# tmp143, this
	ld	a5,8(a5)		# _1, this_12(D)->capacity_
# util/string.hpp:381:         if (new_capacity <= capacity_) {
	ld	a4,-64(s0)		# tmp144, new_capacity
	bleu	a4,a5,.L88	#, tmp144, _1,
# util/string.hpp:386:             ::operator new[](sizeof(char) * new_capacity)) char[new_capacity];
	ld	s1,-64(s0)		# new_capacity.16_14, new_capacity
# util/string.hpp:386:             ::operator new[](sizeof(char) * new_capacity)) char[new_capacity];
	ld	a0,-64(s0)		#, new_capacity
	call	_Znam		#
	mv	a5,a0	# tmp145,
# util/string.hpp:386:             ::operator new[](sizeof(char) * new_capacity)) char[new_capacity];
	mv	a1,a5	#, _16
	mv	a0,s1	#, new_capacity.16_14
	call	_ZnamPv		#
	sd	a0,-40(s0)	#, new_data
# util/string.hpp:387:         memory::memmove(new_data, data_, size_);
	ld	a5,-56(s0)		# tmp146, this
	ld	a4,16(a5)		# _2, this_12(D)->data_
	ld	a5,-56(s0)		# tmp147, this
	ld	a5,0(a5)		# _3, this_12(D)->size_
	mv	a2,a5	#, _3
	mv	a1,a4	#, _2
	ld	a0,-40(s0)		#, new_data
	call	_ZN6memory7memmoveIcEEvPT_S2_m		#
# util/string.hpp:389:         if (data_ != nullptr) {
	ld	a5,-56(s0)		# tmp148, this
	ld	a5,16(a5)		# _4, this_12(D)->data_
# util/string.hpp:389:         if (data_ != nullptr) {
	beq	a5,zero,.L86	#, _4,,
# util/string.hpp:390:             ::delete[] data_;
	ld	a5,-56(s0)		# tmp149, this
	ld	a5,16(a5)		# _5, this_12(D)->data_
# util/string.hpp:390:             ::delete[] data_;
	beq	a5,zero,.L87	#, _5,,
# util/string.hpp:390:             ::delete[] data_;
	ld	a5,-56(s0)		# tmp150, this
	ld	a5,16(a5)		# _6, this_12(D)->data_
	mv	a0,a5	#, _6
	call	_ZdaPv		#
.L87:
# util/string.hpp:391:             data_ = nullptr;
	ld	a5,-56(s0)		# tmp151, this
	sd	zero,16(a5)	#, this_12(D)->data_
.L86:
# util/string.hpp:394:         data_ = new_data;
	ld	a5,-56(s0)		# tmp152, this
	ld	a4,-40(s0)		# tmp153, new_data
	sd	a4,16(a5)	# tmp153, this_12(D)->data_
# util/string.hpp:395:         capacity_ = new_capacity;
	ld	a5,-56(s0)		# tmp154, this
	ld	a4,-64(s0)		# tmp155, new_capacity
	sd	a4,8(a5)	# tmp155, this_12(D)->capacity_
# util/string.hpp:397:         if (new_capacity < capacity_) {
	ld	a5,-56(s0)		# tmp156, this
	ld	a5,8(a5)		# _7, this_12(D)->capacity_
# util/string.hpp:397:         if (new_capacity < capacity_) {
	ld	a4,-64(s0)		# tmp157, new_capacity
	bgeu	a4,a5,.L83	#, tmp157, _7,
# util/string.hpp:398:             size_ = new_capacity;
	ld	a5,-56(s0)		# tmp158, this
	ld	a4,-64(s0)		# tmp159, new_capacity
	sd	a4,0(a5)	# tmp159, this_12(D)->size_
	j	.L83		#
.L88:
# util/string.hpp:382:             return;
	nop	
.L83:
# util/string.hpp:400:     }
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	ld	s1,40(sp)		#,
	.cfi_restore 9
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4609:
	.size	_ZN4rstd6string7reserveEm, .-_ZN4rstd6string7reserveEm
	.section	.text._ZeqRKN4rstd6stringES2_,"axG",@progbits,_ZeqRKN4rstd6stringES2_,comdat
	.align	1
	.weak	_ZeqRKN4rstd6stringES2_
	.type	_ZeqRKN4rstd6stringES2_, @function
_ZeqRKN4rstd6stringES2_:
.LFB4614:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	sd	s1,40(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# first, first
	sd	a1,-64(s0)	# second, second
# util/string.hpp:467:     if (first.size() != second.size()) {
	ld	a0,-56(s0)		#, first
	call	_ZNK4rstd6string4sizeEv		#
	mv	s1,a0	# _1,
# util/string.hpp:467:     if (first.size() != second.size()) {
	ld	a0,-64(s0)		#, second
	call	_ZNK4rstd6string4sizeEv		#
	mv	a5,a0	# _2,
# util/string.hpp:467:     if (first.size() != second.size()) {
	sub	a5,s1,a5	# tmp151, _1, _2
	snez	a5,a5	# tmp150, tmp151
	andi	a5,a5,0xff	# retval.25_20, tmp149
# util/string.hpp:467:     if (first.size() != second.size()) {
	beq	a5,zero,.L90	#, retval.25_20,,
# util/string.hpp:468:         return false;
	li	a5,0		# _12,
	j	.L91		#
.L90:
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	sw	zero,-36(s0)	#, i
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	j	.L92		#
.L94:
# util/string.hpp:472:         if (first[i] != second[i]) {
	lw	a5,-36(s0)		# _3, i
	mv	a1,a5	#, _3
	ld	a0,-56(s0)		#, first
	call	_ZNK4rstd6stringixEm		#
	mv	a5,a0	# _4,
# util/string.hpp:472:         if (first[i] != second[i]) {
	lbu	s1,0(a5)	# _5, *_4
# util/string.hpp:472:         if (first[i] != second[i]) {
	lw	a5,-36(s0)		# _6, i
	mv	a1,a5	#, _6
	ld	a0,-64(s0)		#, second
	call	_ZNK4rstd6stringixEm		#
	mv	a5,a0	# _7,
# util/string.hpp:472:         if (first[i] != second[i]) {
	lbu	a5,0(a5)	# _8, *_7
	sext.w	a4,s1	# tmp154, _5
	sext.w	a5,a5	# tmp156, _8
	sub	a5,a4,a5	# tmp155, tmp154, tmp156
	snez	a5,a5	# tmp153, tmp155
	andi	a5,a5,0xff	# retval.26_27, tmp152
# util/string.hpp:472:         if (first[i] != second[i]) {
	beq	a5,zero,.L93	#, retval.26_27,,
# util/string.hpp:473:             return false;
	li	a5,0		# _12,
	j	.L91		#
.L93:
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	lw	a5,-36(s0)		# tmp159, i
	addiw	a5,a5,1	#, tmp157, tmp158
	sw	a5,-36(s0)	# tmp157, i
.L92:
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	lw	s1,-36(s0)		# _9, i
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	ld	a0,-56(s0)		#, first
	call	_ZNK4rstd6string4sizeEv		#
	mv	a5,a0	# _10,
# util/string.hpp:471:     for (auto i = 0; i < first.size(); ++i) {
	sltu	a5,s1,a5	# _10, tmp161, _9
	andi	a5,a5,0xff	# retval.27_23, tmp160
	bne	a5,zero,.L94	#, retval.27_23,,
# util/string.hpp:477:     return true;
	li	a5,1		# _12,
.L91:
# util/string.hpp:478: }
	mv	a0,a5	#, <retval>
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	ld	s1,40(sp)		#,
	.cfi_restore 9
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4614:
	.size	_ZeqRKN4rstd6stringES2_, .-_ZeqRKN4rstd6stringES2_
	.local	_ZL4iota
	.comm	_ZL4iota,4,4
	.globl	TOKEN_NAMES
	.section	.rodata
	.align	3
.LC1:
	.string	"undefined"
	.string	""
	.align	3
.LC2:
	.string	"eof"
	.string	""
	.align	3
.LC3:
	.string	"newline"
	.string	""
	.align	3
.LC4:
	.string	"space"
	.string	""
	.align	3
.LC5:
	.string	"int_10"
	.string	""
	.align	3
.LC6:
	.string	"float_10"
	.string	""
	.align	3
.LC7:
	.string	"name"
	.string	""
	.align	3
.LC8:
	.string	"and"
	.string	""
	.align	3
.LC9:
	.string	"as"
	.string	""
	.align	3
.LC10:
	.string	""
	.string	""
	.align	3
.LC11:
	.string	"break"
	.string	""
	.align	3
.LC12:
	.string	"continue"
	.string	""
	.align	3
.LC13:
	.string	"dict"
	.string	""
	.align	3
.LC14:
	.string	"def"
	.string	""
	.align	3
.LC15:
	.string	"del"
	.string	""
	.align	3
.LC16:
	.string	"exception"
	.string	""
	.align	3
.LC17:
	.string	"except"
	.string	""
	.align	3
.LC18:
	.string	"from"
	.string	""
	.align	3
.LC19:
	.string	"for"
	.string	""
	.align	3
.LC20:
	.string	"getattr"
	.string	""
	.align	3
.LC21:
	.string	"import"
	.string	""
	.align	3
.LC22:
	.string	"is"
	.string	""
	.align	3
.LC23:
	.string	"in"
	.string	""
	.align	3
.LC24:
	.string	"if"
	.string	""
	.align	3
.LC25:
	.string	"list"
	.string	""
	.align	3
.LC26:
	.string	"len"
	.string	""
	.align	3
.LC27:
	.string	"or"
	.string	""
	.align	3
.LC28:
	.string	"pass"
	.string	""
	.align	3
.LC29:
	.string	"return"
	.string	""
	.align	3
.LC30:
	.string	"setattr"
	.string	""
	.align	3
.LC31:
	.string	"set"
	.string	""
	.align	3
.LC32:
	.string	"yield"
	.string	""
	.align	3
.LC33:
	.string	"plus"
	.string	""
	.align	3
.LC34:
	.string	"minus"
	.string	""
	.align	3
.LC35:
	.string	"mul"
	.string	""
	.align	3
.LC36:
	.string	"div"
	.string	""
	.align	3
.LC37:
	.string	"mod"
	.string	""
	.align	3
.LC38:
	.string	"pow"
	.string	""
	.align	3
.LC39:
	.string	"floordiv"
	.string	""
	.align	3
.LC40:
	.string	"binvert"
	.string	""
	.align	3
.LC41:
	.string	"band"
	.string	""
	.align	3
.LC42:
	.string	"bor"
	.string	""
	.align	3
.LC43:
	.string	"bxor"
	.string	""
	.align	3
.LC44:
	.string	"blshift"
	.string	""
	.align	3
.LC45:
	.string	"brshift"
	.string	""
	.align	3
.LC46:
	.string	"eq"
	.string	""
	.align	3
.LC47:
	.string	"ne"
	.string	""
	.align	3
.LC48:
	.string	"lt"
	.string	""
	.align	3
.LC49:
	.string	"gt"
	.string	""
	.align	3
.LC50:
	.string	"le"
	.string	""
	.align	3
.LC51:
	.string	"ge"
	.string	""
	.align	3
.LC52:
	.string	"lor"
	.string	""
	.align	3
.LC53:
	.string	"land"
	.string	""
	.align	3
.LC54:
	.string	"lnot"
	.string	""
	.align	3
.LC55:
	.string	"assign"
	.string	""
	.align	3
.LC56:
	.string	"aug_plus"
	.string	""
	.align	3
.LC57:
	.string	"aug_minus"
	.string	""
	.align	3
.LC58:
	.string	"aug_mul"
	.string	""
	.align	3
.LC59:
	.string	"aug_div"
	.string	""
	.align	3
.LC60:
	.string	"aug_mod"
	.string	""
	.align	3
.LC61:
	.string	"aug_pow"
	.string	""
	.align	3
.LC62:
	.string	"aug_floordiv"
	.string	""
	.align	3
.LC63:
	.string	"aug_band"
	.string	""
	.align	3
.LC64:
	.string	"aug_bor"
	.string	""
	.align	3
.LC65:
	.string	"aug_bxor"
	.string	""
	.align	3
.LC66:
	.string	"aug_blshift"
	.string	""
	.align	3
.LC67:
	.string	"aug_brshift"
	.string	""
	.align	3
.LC68:
	.string	"aug_binvert"
	.string	""
	.align	3
.LC69:
	.string	"comma"
	.string	""
	.align	3
.LC70:
	.string	"dot"
	.string	""
	.align	3
.LC71:
	.string	"colon"
	.string	""
	.align	3
.LC72:
	.string	"semicolon"
	.string	""
	.align	3
.LC73:
	.string	"lparen"
	.string	""
	.align	3
.LC74:
	.string	"rparen"
	.string	""
	.align	3
.LC75:
	.string	"lbracket"
	.string	""
	.align	3
.LC76:
	.string	"rbracket"
	.string	""
	.align	3
.LC77:
	.string	"lbrace"
	.string	""
	.align	3
.LC78:
	.string	"rbrace"
	.string	""
	.align	3
.LC79:
	.string	"double_quote"
	.string	""
	.align	3
.LC80:
	.string	"single_quote"
	.string	""
	.align	3
.LC81:
	.string	"string_content"
	.string	""
	.align	3
.LC82:
	.string	"hashtag_comment"
	.string	""
	.data
	.align	3
	.type	TOKEN_NAMES, @object
	.size	TOKEN_NAMES, 656
TOKEN_NAMES:
	.dword	.LC1
	.dword	.LC2
	.dword	.LC3
	.dword	.LC4
	.dword	.LC5
	.dword	.LC6
	.dword	.LC7
	.dword	.LC8
	.dword	.LC9
	.dword	.LC10
	.dword	.LC11
	.dword	.LC12
	.dword	.LC13
	.dword	.LC14
	.dword	.LC15
	.dword	.LC16
	.dword	.LC17
	.dword	.LC18
	.dword	.LC19
	.dword	.LC20
	.dword	.LC21
	.dword	.LC22
	.dword	.LC23
	.dword	.LC24
	.dword	.LC25
	.dword	.LC26
	.dword	.LC27
	.dword	.LC28
	.dword	.LC29
	.dword	.LC30
	.dword	.LC31
	.dword	.LC32
	.dword	.LC33
	.dword	.LC34
	.dword	.LC35
	.dword	.LC36
	.dword	.LC37
	.dword	.LC38
	.dword	.LC39
	.dword	.LC40
	.dword	.LC41
	.dword	.LC42
	.dword	.LC43
	.dword	.LC44
	.dword	.LC45
	.dword	.LC46
	.dword	.LC47
	.dword	.LC48
	.dword	.LC49
	.dword	.LC50
	.dword	.LC51
	.dword	.LC52
	.dword	.LC53
	.dword	.LC54
	.dword	.LC55
	.dword	.LC56
	.dword	.LC57
	.dword	.LC58
	.dword	.LC59
	.dword	.LC60
	.dword	.LC61
	.dword	.LC62
	.dword	.LC63
	.dword	.LC64
	.dword	.LC65
	.dword	.LC66
	.dword	.LC67
	.dword	.LC68
	.dword	.LC69
	.dword	.LC70
	.dword	.LC71
	.dword	.LC72
	.dword	.LC73
	.dword	.LC74
	.dword	.LC75
	.dword	.LC76
	.dword	.LC77
	.dword	.LC78
	.dword	.LC79
	.dword	.LC80
	.dword	.LC81
	.dword	.LC82
	.section	.text._ZNK14parsed_token_t9to_stringEv,"axG",@progbits,_ZNK14parsed_token_t9to_stringEv,comdat
	.align	1
	.weak	_ZNK14parsed_token_t9to_stringEv
	.type	_ZNK14parsed_token_t9to_stringEv, @function
_ZNK14parsed_token_t9to_stringEv:
.LFB4622:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# .result_ptr, .result_ptr
	sd	a1,-32(s0)	# this, this
# parser.hpp:243:         rstd::string result = rstd::string(TOKEN_NAMES[token]);
	ld	a5,-32(s0)		# tmp136, this
	ld	a5,0(a5)		# _1, this_4(D)->token
# parser.hpp:243:         rstd::string result = rstd::string(TOKEN_NAMES[token]);
	lui	a4,%hi(TOKEN_NAMES)	# tmp137,
	addi	a4,a4,%lo(TOKEN_NAMES)	# tmp138, tmp137,
	slli	a5,a5,3	#, tmp139, _1
	add	a5,a4,a5	# tmp139, tmp140, tmp138
	ld	a5,0(a5)		# _2, TOKEN_NAMES[_1]
	mv	a1,a5	#, _2
	ld	a0,-24(s0)		#, <retval>
	call	_ZN4rstd6stringC1EPKc		#
# parser.hpp:244:         result.push_back('\0');
	li	a1,0		#,
	ld	a0,-24(s0)		#, <retval>
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:245:         return result;
	nop	
# parser.hpp:246:     }
	ld	a0,-24(s0)		#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4622:
	.size	_ZNK14parsed_token_t9to_stringEv, .-_ZNK14parsed_token_t9to_stringEv
	.section	.text._ZN7lexer_t7advanceEv,"axG",@progbits,_ZN7lexer_t7advanceEv,comdat
	.align	1
	.weak	_ZN7lexer_t7advanceEv
	.type	_ZN7lexer_t7advanceEv, @function
_ZN7lexer_t7advanceEv:
.LFB4623:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# parser.hpp:272:         if (get_char() == '\n') {
	ld	a0,-24(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp142,
# parser.hpp:272:         if (get_char() == '\n') {
	sext.w	a4,a5	# tmp145, _1
	li	a5,10		# tmp147,
	sub	a5,a4,a5	# tmp146, tmp145, tmp147
	seqz	a5,a5	# tmp144, tmp146
	andi	a5,a5,0xff	# retval.17_12, tmp143
# parser.hpp:272:         if (get_char() == '\n') {
	beq	a5,zero,.L98	#, retval.17_12,,
# parser.hpp:273:             cur_col = 0;
	ld	a5,-24(s0)		# tmp148, this
	sd	zero,56(a5)	#, this_10(D)->cur_col
# parser.hpp:274:             ++cur_row;
	ld	a5,-24(s0)		# tmp149, this
	ld	a5,48(a5)		# _2, this_10(D)->cur_row
# parser.hpp:274:             ++cur_row;
	addi	a4,a5,1	#, _3, _2
	ld	a5,-24(s0)		# tmp150, this
	sd	a4,48(a5)	# _3, this_10(D)->cur_row
	j	.L99		#
.L98:
# parser.hpp:276:             ++cur_col;
	ld	a5,-24(s0)		# tmp151, this
	ld	a5,56(a5)		# _4, this_10(D)->cur_col
# parser.hpp:276:             ++cur_col;
	addi	a4,a5,1	#, _5, _4
	ld	a5,-24(s0)		# tmp152, this
	sd	a4,56(a5)	# _5, this_10(D)->cur_col
.L99:
# parser.hpp:278:         advance_char();
	ld	a0,-24(s0)		#, this
	call	_ZN7lexer_t12advance_charEv		#
# parser.hpp:279:         ++cur_position;
	ld	a5,-24(s0)		# tmp153, this
	ld	a5,40(a5)		# _6, this_10(D)->cur_position
# parser.hpp:279:         ++cur_position;
	addi	a4,a5,1	#, _7, _6
	ld	a5,-24(s0)		# tmp154, this
	sd	a4,40(a5)	# _7, this_10(D)->cur_position
# parser.hpp:280:     }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4623:
	.size	_ZN7lexer_t7advanceEv, .-_ZN7lexer_t7advanceEv
	.section	.text._ZN7lexer_tD2Ev,"axG",@progbits,_ZN7lexer_tD5Ev,comdat
	.align	1
	.weak	_ZN7lexer_tD2Ev
	.type	_ZN7lexer_tD2Ev, @function
_ZN7lexer_tD2Ev:
.LFB4625:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# parser.hpp:282:     ~lexer_t() { ::operator delete[](buffer); }
	ld	a5,-24(s0)		# tmp136, this
	ld	a5,8(a5)		# _1, this_4(D)->buffer
# parser.hpp:282:     ~lexer_t() { ::operator delete[](buffer); }
	mv	a0,a5	#, _1
	call	_ZdaPv		#
# parser.hpp:282:     ~lexer_t() { ::operator delete[](buffer); }
	ld	a5,-24(s0)		# tmp137, this
	addi	a5,a5,64	#, _2, tmp137
	mv	a0,a5	#, _2
	call	_ZN4rstd6stringD1Ev		#
# parser.hpp:282:     ~lexer_t() { ::operator delete[](buffer); }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4625:
	.size	_ZN7lexer_tD2Ev, .-_ZN7lexer_tD2Ev
	.weak	_ZN7lexer_tD1Ev
	.set	_ZN7lexer_tD1Ev,_ZN7lexer_tD2Ev
	.section	.rodata
	.align	3
.LC83:
	.string	"Error reading from descriptor\n"
	.section	.text._ZN7lexer_tC2El,"axG",@progbits,_ZN7lexer_tC5El,comdat
	.align	1
	.weak	_ZN7lexer_tC2El
	.type	_ZN7lexer_tC2El, @function
_ZN7lexer_tC2El:
.LFB4628:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# this, this
	sd	a1,-48(s0)	# descriptor, descriptor
# parser.hpp:284:     lexer_t(int64_t descriptor) : descriptor(descriptor) {
	ld	a5,-40(s0)		# tmp140, this
	ld	a4,-48(s0)		# tmp141, descriptor
	sd	a4,0(a5)	# tmp141, this_9(D)->descriptor
# parser.hpp:284:     lexer_t(int64_t descriptor) : descriptor(descriptor) {
	ld	a5,-40(s0)		# tmp142, this
	sd	zero,16(a5)	#, this_9(D)->current_read_position
	ld	a5,-40(s0)		# tmp143, this
	sb	zero,24(a5)	#, this_9(D)->ended_reading
	ld	a5,-40(s0)		# tmp144, this
	li	a4,128		# tmp145,
	sd	a4,32(a5)	# tmp145, this_9(D)->max_length
	ld	a5,-40(s0)		# tmp146, this
	sd	zero,40(a5)	#, this_9(D)->cur_position
	ld	a5,-40(s0)		# tmp147, this
	sd	zero,48(a5)	#, this_9(D)->cur_row
	ld	a5,-40(s0)		# tmp148, this
	sd	zero,56(a5)	#, this_9(D)->cur_col
	ld	a5,-40(s0)		# tmp149, this
	addi	a5,a5,64	#, _1, tmp149
	mv	a0,a5	#, _1
	call	_ZN4rstd6stringC1Ev		#
# parser.hpp:285:         buffer = ::new (::operator new[](sizeof(char) * 128)) char[128];
	li	a0,128		#,
	call	_Znam		#
	mv	a5,a0	# tmp150,
# parser.hpp:285:         buffer = ::new (::operator new[](sizeof(char) * 128)) char[128];
	mv	a1,a5	#, _21
	li	a0,128		#,
	call	_ZnamPv		#
	mv	a4,a0	# _2,
# parser.hpp:285:         buffer = ::new (::operator new[](sizeof(char) * 128)) char[128];
	ld	a5,-40(s0)		# tmp151, this
	sd	a4,8(a5)	# _2, this_9(D)->buffer
# parser.hpp:287:             rsyscall::read_from_descriptor(descriptor, buffer, 128);
	ld	a5,-40(s0)		# tmp152, this
	ld	a5,8(a5)		# _3, this_9(D)->buffer
	li	a2,128		#,
	mv	a1,a5	#, _3
	ld	a0,-48(s0)		#, descriptor
	call	_ZN8rsyscall20read_from_descriptorElPcl		#
	sd	a0,-24(s0)	#, bytes_read
# parser.hpp:288:         if (bytes_read < 0) {
	ld	a5,-24(s0)		# tmp153, bytes_read
	bge	a5,zero,.L102	#, tmp153,,
# parser.hpp:289:             rsyscall::print_string("Error reading from descriptor\n");
	lui	a5,%hi(.LC83)	# tmp154,
	addi	a0,a5,%lo(.LC83)	#, tmp154,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:290:             rsyscall::exit(0);
	li	a0,0		#,
	call	_ZN8rsyscall4exitEl		#
.L102:
# parser.hpp:292:         if (bytes_read < 128) {
	ld	a4,-24(s0)		# tmp155, bytes_read
	li	a5,127		# tmp156,
	bgt	a4,a5,.L103	#, tmp155, tmp156,
# parser.hpp:293:             ended_reading = true;
	ld	a5,-40(s0)		# tmp157, this
	li	a4,1		# tmp158,
	sb	a4,24(a5)	# tmp158, this_9(D)->ended_reading
.L103:
# parser.hpp:295:         max_length = static_cast<size_t>(bytes_read);
	ld	a4,-24(s0)		# bytes_read.5_4, bytes_read
# parser.hpp:295:         max_length = static_cast<size_t>(bytes_read);
	ld	a5,-40(s0)		# tmp159, this
	sd	a4,32(a5)	# bytes_read.5_4, this_9(D)->max_length
# parser.hpp:296:     }
	nop	
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4628:
	.size	_ZN7lexer_tC2El, .-_ZN7lexer_tC2El
	.weak	_ZN7lexer_tC1El
	.set	_ZN7lexer_tC1El,_ZN7lexer_tC2El
	.section	.text._ZN7lexer_t8get_charEv,"axG",@progbits,_ZN7lexer_t8get_charEv,comdat
	.align	1
	.weak	_ZN7lexer_t8get_charEv
	.type	_ZN7lexer_t8get_charEv, @function
_ZN7lexer_t8get_charEv:
.LFB4630:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# this, this
# parser.hpp:299:         if (current_read_position == max_length) {
	ld	a5,-40(s0)		# tmp145, this
	ld	a4,16(a5)		# _1, this_16(D)->current_read_position
# parser.hpp:299:         if (current_read_position == max_length) {
	ld	a5,-40(s0)		# tmp146, this
	ld	a5,32(a5)		# _2, this_16(D)->max_length
# parser.hpp:299:         if (current_read_position == max_length) {
	bne	a4,a5,.L105	#, _1, _2,
# parser.hpp:300:             if (ended_reading) {
	ld	a5,-40(s0)		# tmp147, this
	lbu	a5,24(a5)	# _3, this_16(D)->ended_reading
# parser.hpp:300:             if (ended_reading) {
	beq	a5,zero,.L106	#, _3,,
# parser.hpp:301:                 return '\0';
	li	a5,0		# _10,
	j	.L107		#
.L106:
# parser.hpp:304:                 rsyscall::read_from_descriptor(descriptor, buffer, 128);
	ld	a5,-40(s0)		# tmp148, this
	ld	a4,0(a5)		# _4, this_16(D)->descriptor
	ld	a5,-40(s0)		# tmp149, this
	ld	a5,8(a5)		# _5, this_16(D)->buffer
	li	a2,128		#,
	mv	a1,a5	#, _5
	mv	a0,a4	#, _4
	call	_ZN8rsyscall20read_from_descriptorElPcl		#
	sd	a0,-24(s0)	#, bytes_read
# parser.hpp:305:             if (bytes_read < 0) {
	ld	a5,-24(s0)		# tmp150, bytes_read
	bge	a5,zero,.L108	#, tmp150,,
# parser.hpp:306:                 rsyscall::print_string("Error reading from descriptor\n");
	lui	a5,%hi(.LC83)	# tmp151,
	addi	a0,a5,%lo(.LC83)	#, tmp151,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:307:                 rsyscall::exit(0);
	li	a0,0		#,
	call	_ZN8rsyscall4exitEl		#
.L108:
# parser.hpp:309:             if (bytes_read < 128) {
	ld	a4,-24(s0)		# tmp152, bytes_read
	li	a5,127		# tmp153,
	bgt	a4,a5,.L109	#, tmp152, tmp153,
# parser.hpp:310:                 ended_reading = true;
	ld	a5,-40(s0)		# tmp154, this
	li	a4,1		# tmp155,
	sb	a4,24(a5)	# tmp155, this_16(D)->ended_reading
.L109:
# parser.hpp:312:             max_length = static_cast<size_t>(bytes_read);
	ld	a4,-24(s0)		# bytes_read.13_6, bytes_read
# parser.hpp:312:             max_length = static_cast<size_t>(bytes_read);
	ld	a5,-40(s0)		# tmp156, this
	sd	a4,32(a5)	# bytes_read.13_6, this_16(D)->max_length
# parser.hpp:313:             current_read_position = 0;
	ld	a5,-40(s0)		# tmp157, this
	sd	zero,16(a5)	#, this_16(D)->current_read_position
.L105:
# parser.hpp:315:         return buffer[current_read_position];
	ld	a5,-40(s0)		# tmp158, this
	ld	a4,8(a5)		# _7, this_16(D)->buffer
# parser.hpp:315:         return buffer[current_read_position];
	ld	a5,-40(s0)		# tmp159, this
	ld	a5,16(a5)		# _8, this_16(D)->current_read_position
# parser.hpp:315:         return buffer[current_read_position];
	add	a5,a4,a5	# _8, _9, _7
	lbu	a5,0(a5)	# _10, *_9
.L107:
# parser.hpp:316:     }
	mv	a0,a5	#, <retval>
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4630:
	.size	_ZN7lexer_t8get_charEv, .-_ZN7lexer_t8get_charEv
	.section	.text._ZN7lexer_t12advance_charEv,"axG",@progbits,_ZN7lexer_t12advance_charEv,comdat
	.align	1
	.weak	_ZN7lexer_t12advance_charEv
	.type	_ZN7lexer_t12advance_charEv, @function
_ZN7lexer_t12advance_charEv:
.LFB4631:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# this, this
# parser.hpp:319:         if (current_read_position == max_length) {
	ld	a5,-40(s0)		# tmp150, this
	ld	a4,16(a5)		# _1, this_23(D)->current_read_position
# parser.hpp:319:         if (current_read_position == max_length) {
	ld	a5,-40(s0)		# tmp151, this
	ld	a5,32(a5)		# _2, this_23(D)->max_length
# parser.hpp:319:         if (current_read_position == max_length) {
	bne	a4,a5,.L111	#, _1, _2,
# parser.hpp:320:             if (ended_reading) {
	ld	a5,-40(s0)		# tmp152, this
	lbu	a5,24(a5)	# _3, this_23(D)->ended_reading
# parser.hpp:320:             if (ended_reading) {
	bne	a5,zero,.L118	#, _3,,
# parser.hpp:324:                 rsyscall::read_from_descriptor(descriptor, buffer, 128);
	ld	a5,-40(s0)		# tmp153, this
	ld	a4,0(a5)		# _4, this_23(D)->descriptor
	ld	a5,-40(s0)		# tmp154, this
	ld	a5,8(a5)		# _5, this_23(D)->buffer
	li	a2,128		#,
	mv	a1,a5	#, _5
	mv	a0,a4	#, _4
	call	_ZN8rsyscall20read_from_descriptorElPcl		#
	sd	a0,-24(s0)	#, bytes_read
# parser.hpp:325:             if (bytes_read < 0) {
	ld	a5,-24(s0)		# tmp155, bytes_read
	bge	a5,zero,.L114	#, tmp155,,
# parser.hpp:326:                 rsyscall::print_string("Error reading from descriptor\n");
	lui	a5,%hi(.LC83)	# tmp156,
	addi	a0,a5,%lo(.LC83)	#, tmp156,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:327:                 rsyscall::exit(0);
	li	a0,0		#,
	call	_ZN8rsyscall4exitEl		#
.L114:
# parser.hpp:329:             if (bytes_read < 128) {
	ld	a4,-24(s0)		# tmp157, bytes_read
	li	a5,127		# tmp158,
	bgt	a4,a5,.L115	#, tmp157, tmp158,
# parser.hpp:330:                 ended_reading = true;
	ld	a5,-40(s0)		# tmp159, this
	li	a4,1		# tmp160,
	sb	a4,24(a5)	# tmp160, this_23(D)->ended_reading
.L115:
# parser.hpp:332:             max_length = static_cast<size_t>(bytes_read);
	ld	a4,-24(s0)		# bytes_read.18_6, bytes_read
# parser.hpp:332:             max_length = static_cast<size_t>(bytes_read);
	ld	a5,-40(s0)		# tmp161, this
	sd	a4,32(a5)	# bytes_read.18_6, this_23(D)->max_length
# parser.hpp:333:             current_read_position = 0;
	ld	a5,-40(s0)		# tmp162, this
	sd	zero,16(a5)	#, this_23(D)->current_read_position
.L111:
# parser.hpp:335:         if (buffer[current_read_position] == '\n') {
	ld	a5,-40(s0)		# tmp163, this
	ld	a4,8(a5)		# _7, this_23(D)->buffer
# parser.hpp:335:         if (buffer[current_read_position] == '\n') {
	ld	a5,-40(s0)		# tmp164, this
	ld	a5,16(a5)		# _8, this_23(D)->current_read_position
# parser.hpp:335:         if (buffer[current_read_position] == '\n') {
	add	a5,a4,a5	# _8, _9, _7
	lbu	a5,0(a5)	# _10, *_9
# parser.hpp:335:         if (buffer[current_read_position] == '\n') {
	mv	a4,a5	# tmp165, _10
	li	a5,10		# tmp166,
	bne	a4,a5,.L116	#, tmp165, tmp166,
# parser.hpp:336:             cur_col = 0;
	ld	a5,-40(s0)		# tmp167, this
	sd	zero,56(a5)	#, this_23(D)->cur_col
# parser.hpp:337:             ++cur_row;
	ld	a5,-40(s0)		# tmp168, this
	ld	a5,48(a5)		# _11, this_23(D)->cur_row
# parser.hpp:337:             ++cur_row;
	addi	a4,a5,1	#, _12, _11
	ld	a5,-40(s0)		# tmp169, this
	sd	a4,48(a5)	# _12, this_23(D)->cur_row
	j	.L117		#
.L116:
# parser.hpp:339:             ++cur_col;
	ld	a5,-40(s0)		# tmp170, this
	ld	a5,56(a5)		# _13, this_23(D)->cur_col
# parser.hpp:339:             ++cur_col;
	addi	a4,a5,1	#, _14, _13
	ld	a5,-40(s0)		# tmp171, this
	sd	a4,56(a5)	# _14, this_23(D)->cur_col
.L117:
# parser.hpp:341:         ++current_read_position;
	ld	a5,-40(s0)		# tmp172, this
	ld	a5,16(a5)		# _15, this_23(D)->current_read_position
# parser.hpp:341:         ++current_read_position;
	addi	a4,a5,1	#, _16, _15
	ld	a5,-40(s0)		# tmp173, this
	sd	a4,16(a5)	# _16, this_23(D)->current_read_position
	j	.L110		#
.L118:
# parser.hpp:321:                 return;
	nop	
.L110:
# parser.hpp:343:     }
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4631:
	.size	_ZN7lexer_t12advance_charEv, .-_ZN7lexer_t12advance_charEv
	.section	.text._ZN7lexer_t17can_continue_nameEc,"axG",@progbits,_ZN7lexer_t17can_continue_nameEc,comdat
	.align	1
	.weak	_ZN7lexer_t17can_continue_nameEc
	.type	_ZN7lexer_t17can_continue_nameEc, @function
_ZN7lexer_t17can_continue_nameEc:
.LFB4633:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	mv	a5,a1	# tmp136, c
	sb	a5,-25(s0)	# tmp137, c
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	lbu	a5,-25(s0)	# tmp139, c
	andi	a4,a5,0xff	# tmp140, tmp138
	li	a5,96		# tmp141,
	bleu	a4,a5,.L120	#, tmp140, tmp141,
# parser.hpp:357:         return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') ||
	lbu	a5,-25(s0)	# tmp143, c
	andi	a4,a5,0xff	# tmp144, tmp142
	li	a5,122		# tmp145,
	bleu	a4,a5,.L121	#, tmp144, tmp145,
.L120:
# parser.hpp:357:         return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') ||
	lbu	a5,-25(s0)	# tmp147, c
	andi	a4,a5,0xff	# tmp148, tmp146
	li	a5,64		# tmp149,
	bleu	a4,a5,.L122	#, tmp148, tmp149,
# parser.hpp:357:         return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') ||
	lbu	a5,-25(s0)	# tmp151, c
	andi	a4,a5,0xff	# tmp152, tmp150
	li	a5,90		# tmp153,
	bleu	a4,a5,.L121	#, tmp152, tmp153,
.L122:
# parser.hpp:357:         return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') ||
	lbu	a5,-25(s0)	# tmp155, c
	andi	a4,a5,0xff	# tmp156, tmp154
	li	a5,47		# tmp157,
	bleu	a4,a5,.L123	#, tmp156, tmp157,
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	lbu	a5,-25(s0)	# tmp159, c
	andi	a4,a5,0xff	# tmp160, tmp158
	li	a5,57		# tmp161,
	bleu	a4,a5,.L121	#, tmp160, tmp161,
.L123:
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	lbu	a5,-25(s0)	# tmp163, c
	andi	a4,a5,0xff	# tmp164, tmp162
	li	a5,95		# tmp165,
	bne	a4,a5,.L124	#, tmp164, tmp165,
.L121:
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	li	a5,1		# iftmp.22_1,
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	j	.L125		#
.L124:
# parser.hpp:358:                ('0' <= c && c <= '9') || c == '_';
	li	a5,0		# iftmp.22_1,
.L125:
# parser.hpp:359:     }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4633:
	.size	_ZN7lexer_t17can_continue_nameEc, .-_ZN7lexer_t17can_continue_nameEc
	.section	.text._ZN7lexer_t11parse_exactEPKcm,"axG",@progbits,_ZN7lexer_t11parse_exactEPKcm,comdat
	.align	1
	.weak	_ZN7lexer_t11parse_exactEPKcm
	.type	_ZN7lexer_t11parse_exactEPKcm, @function
_ZN7lexer_t11parse_exactEPKcm:
.LFB4634:
	.cfi_startproc
	addi	sp,sp,-96	#,,
	.cfi_def_cfa_offset 96
	sd	ra,88(sp)	#,
	sd	s0,80(sp)	#,
	sd	s1,72(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,96	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-72(s0)	# this, this
	sd	a1,-80(s0)	# representation, representation
	sd	a2,-88(s0)	# shift, shift
# parser.hpp:362:         const size_t n = rstd::strlen(representation);
	ld	a0,-80(s0)		#, representation
	call	_ZN4rstd6strlenEPKc		#
	sd	a0,-48(s0)	#, n
# parser.hpp:363:         if (shift >= n) {
	ld	a4,-88(s0)		# tmp146, shift
	ld	a5,-48(s0)		# tmp147, n
	bltu	a4,a5,.L128	#, tmp146, tmp147,
# parser.hpp:364:             return shift;
	ld	a5,-88(s0)		# _11, shift
	j	.L129		#
.L128:
# parser.hpp:366:         auto start_position = cur_position;
	ld	a5,-72(s0)		# tmp148, this
	ld	a5,40(a5)		# tmp149, this_19(D)->cur_position
	sd	a5,-56(s0)	# tmp149, start_position
# parser.hpp:367:         for (auto cur = representation + shift; *cur != '\0'; ++cur) {
	ld	a4,-80(s0)		# tmp151, representation
	ld	a5,-88(s0)		# tmp152, shift
	add	a5,a4,a5	# tmp152, tmp150, tmp151
	sd	a5,-40(s0)	# tmp150, cur
# parser.hpp:367:         for (auto cur = representation + shift; *cur != '\0'; ++cur) {
	j	.L130		#
.L132:
# parser.hpp:368:             if (*cur != get_char()) {
	ld	a5,-40(s0)		# tmp153, cur
	lbu	s1,0(a5)	# _1, *cur_10
# parser.hpp:368:             if (*cur != get_char()) {
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp154,
# parser.hpp:368:             if (*cur != get_char()) {
	sext.w	a4,s1	# tmp157, _1
	sext.w	a5,a5	# tmp159, _2
	sub	a5,a4,a5	# tmp158, tmp157, tmp159
	snez	a5,a5	# tmp156, tmp158
	andi	a5,a5,0xff	# retval.24_24, tmp155
# parser.hpp:368:             if (*cur != get_char()) {
	beq	a5,zero,.L131	#, retval.24_24,,
# parser.hpp:369:                 return cur_position - start_position + shift;
	ld	a5,-72(s0)		# tmp160, this
	ld	a4,40(a5)		# _3, this_19(D)->cur_position
# parser.hpp:369:                 return cur_position - start_position + shift;
	ld	a5,-56(s0)		# tmp161, start_position
	sub	a4,a4,a5	# _4, _3, tmp161
# parser.hpp:369:                 return cur_position - start_position + shift;
	ld	a5,-88(s0)		# tmp162, shift
	add	a5,a4,a5	# tmp162, _11, _4
	j	.L129		#
.L131:
# parser.hpp:371:             current_string.push_back(*cur);
	ld	a5,-72(s0)		# tmp163, this
	addi	a4,a5,64	#, _5, tmp163
	ld	a5,-40(s0)		# tmp164, cur
	lbu	a5,0(a5)	# _6, *cur_10
	mv	a1,a5	#, _6
	mv	a0,a4	#, _5
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:372:             advance();
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:367:         for (auto cur = representation + shift; *cur != '\0'; ++cur) {
	ld	a5,-40(s0)		# tmp166, cur
	addi	a5,a5,1	#, tmp165, tmp166
	sd	a5,-40(s0)	# tmp165, cur
.L130:
# parser.hpp:367:         for (auto cur = representation + shift; *cur != '\0'; ++cur) {
	ld	a5,-40(s0)		# tmp167, cur
	lbu	a5,0(a5)	# _7, *cur_10
# parser.hpp:367:         for (auto cur = representation + shift; *cur != '\0'; ++cur) {
	bne	a5,zero,.L132	#, _7,,
# parser.hpp:374:         return cur_position - start_position + shift;
	ld	a5,-72(s0)		# tmp168, this
	ld	a4,40(a5)		# _8, this_19(D)->cur_position
# parser.hpp:374:         return cur_position - start_position + shift;
	ld	a5,-56(s0)		# tmp169, start_position
	sub	a4,a4,a5	# _9, _8, tmp169
# parser.hpp:374:         return cur_position - start_position + shift;
	ld	a5,-88(s0)		# tmp170, shift
	add	a5,a4,a5	# tmp170, _11, _9
.L129:
# parser.hpp:375:     }
	mv	a0,a5	#, <retval>
	ld	ra,88(sp)		#,
	.cfi_restore 1
	ld	s0,80(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 96
	ld	s1,72(sp)		#,
	.cfi_restore 9
	addi	sp,sp,96	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4634:
	.size	_ZN7lexer_t11parse_exactEPKcm, .-_ZN7lexer_t11parse_exactEPKcm
	.section	.text._ZN7lexer_t10parse_wordEPKcm,"axG",@progbits,_ZN7lexer_t10parse_wordEPKcm,comdat
	.align	1
	.weak	_ZN7lexer_t10parse_wordEPKcm
	.type	_ZN7lexer_t10parse_wordEPKcm, @function
_ZN7lexer_t10parse_wordEPKcm:
.LFB4635:
	.cfi_startproc
	addi	sp,sp,-96	#,,
	.cfi_def_cfa_offset 96
	sd	ra,88(sp)	#,
	sd	s0,80(sp)	#,
	sd	s1,72(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,96	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-72(s0)	# this, this
	sd	a1,-80(s0)	# represenation, represenation
	sd	a2,-88(s0)	# shift, shift
# parser.hpp:378:         const size_t n = rstd::strlen(represenation);
	ld	a0,-80(s0)		#, represenation
	call	_ZN4rstd6strlenEPKc		#
	sd	a0,-48(s0)	#, n
# parser.hpp:379:         if (shift >= n) {
	ld	a4,-88(s0)		# tmp148, shift
	ld	a5,-48(s0)		# tmp149, n
	bltu	a4,a5,.L134	#, tmp148, tmp149,
# parser.hpp:380:             return shift;
	ld	a5,-88(s0)		# _12, shift
	j	.L135		#
.L134:
# parser.hpp:382:         auto start_position = cur_position;
	ld	a5,-72(s0)		# tmp150, this
	ld	a5,40(a5)		# tmp151, this_21(D)->cur_position
	sd	a5,-56(s0)	# tmp151, start_position
# parser.hpp:383:         for (auto cur = represenation + shift; *cur != '\0'; ++cur) {
	ld	a4,-80(s0)		# tmp153, represenation
	ld	a5,-88(s0)		# tmp154, shift
	add	a5,a4,a5	# tmp154, tmp152, tmp153
	sd	a5,-40(s0)	# tmp152, cur
# parser.hpp:383:         for (auto cur = represenation + shift; *cur != '\0'; ++cur) {
	j	.L136		#
.L138:
# parser.hpp:384:             if (*cur != get_char()) {
	ld	a5,-40(s0)		# tmp155, cur
	lbu	s1,0(a5)	# _1, *cur_11
# parser.hpp:384:             if (*cur != get_char()) {
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp156,
# parser.hpp:384:             if (*cur != get_char()) {
	sext.w	a4,s1	# tmp159, _1
	sext.w	a5,a5	# tmp161, _2
	sub	a5,a4,a5	# tmp160, tmp159, tmp161
	snez	a5,a5	# tmp158, tmp160
	andi	a5,a5,0xff	# retval.14_32, tmp157
# parser.hpp:384:             if (*cur != get_char()) {
	beq	a5,zero,.L137	#, retval.14_32,,
# parser.hpp:385:                 return cur_position - start_position + shift;
	ld	a5,-72(s0)		# tmp162, this
	ld	a4,40(a5)		# _3, this_21(D)->cur_position
# parser.hpp:385:                 return cur_position - start_position + shift;
	ld	a5,-56(s0)		# tmp163, start_position
	sub	a4,a4,a5	# _4, _3, tmp163
# parser.hpp:385:                 return cur_position - start_position + shift;
	ld	a5,-88(s0)		# tmp164, shift
	add	a5,a4,a5	# tmp164, _12, _4
	j	.L135		#
.L137:
# parser.hpp:387:             current_string.push_back(*cur);
	ld	a5,-72(s0)		# tmp165, this
	addi	a4,a5,64	#, _5, tmp165
	ld	a5,-40(s0)		# tmp166, cur
	lbu	a5,0(a5)	# _6, *cur_11
	mv	a1,a5	#, _6
	mv	a0,a4	#, _5
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:388:             advance();
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:383:         for (auto cur = represenation + shift; *cur != '\0'; ++cur) {
	ld	a5,-40(s0)		# tmp168, cur
	addi	a5,a5,1	#, tmp167, tmp168
	sd	a5,-40(s0)	# tmp167, cur
.L136:
# parser.hpp:383:         for (auto cur = represenation + shift; *cur != '\0'; ++cur) {
	ld	a5,-40(s0)		# tmp169, cur
	lbu	a5,0(a5)	# _7, *cur_11
# parser.hpp:383:         for (auto cur = represenation + shift; *cur != '\0'; ++cur) {
	bne	a5,zero,.L138	#, _7,,
# parser.hpp:390:         const auto c = get_char();
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp170,
	sb	a5,-57(s0)	# tmp170, c
# parser.hpp:391:         if (can_continue_name(c)) {
	lbu	a5,-57(s0)	# tmp171, c
	mv	a1,a5	#, tmp171
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t17can_continue_nameEc		#
	mv	a5,a0	# tmp172,
# parser.hpp:391:         if (can_continue_name(c)) {
	beq	a5,zero,.L139	#, retval.15_27,,
# parser.hpp:392:             current_string.push_back(c);
	ld	a5,-72(s0)		# tmp173, this
	addi	a5,a5,64	#, _8, tmp173
	lbu	a4,-57(s0)	# tmp174, c
	mv	a1,a4	#, tmp174
	mv	a0,a5	#, _8
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:393:             advance();
	ld	a0,-72(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
.L139:
# parser.hpp:395:         return cur_position - start_position + shift;
	ld	a5,-72(s0)		# tmp175, this
	ld	a4,40(a5)		# _9, this_21(D)->cur_position
# parser.hpp:395:         return cur_position - start_position + shift;
	ld	a5,-56(s0)		# tmp176, start_position
	sub	a4,a4,a5	# _10, _9, tmp176
# parser.hpp:395:         return cur_position - start_position + shift;
	ld	a5,-88(s0)		# tmp177, shift
	add	a5,a4,a5	# tmp177, _12, _10
.L135:
# parser.hpp:396:     }
	mv	a0,a5	#, <retval>
	ld	ra,88(sp)		#,
	.cfi_restore 1
	ld	s0,80(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 96
	ld	s1,72(sp)		#,
	.cfi_restore 9
	addi	sp,sp,96	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4635:
	.size	_ZN7lexer_t10parse_wordEPKcm, .-_ZN7lexer_t10parse_wordEPKcm
	.section	.text._ZN7lexer_t7isdigitEc,"axG",@progbits,_ZN7lexer_t7isdigitEc,comdat
	.align	1
	.weak	_ZN7lexer_t7isdigitEc
	.type	_ZN7lexer_t7isdigitEc, @function
_ZN7lexer_t7isdigitEc:
.LFB4636:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s0,24(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	mv	a5,a1	# tmp136, c
	sb	a5,-25(s0)	# tmp137, c
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	lbu	a5,-25(s0)	# tmp139, c
	andi	a4,a5,0xff	# tmp140, tmp138
	li	a5,47		# tmp141,
	bleu	a4,a5,.L141	#, tmp140, tmp141,
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	lbu	a5,-25(s0)	# tmp143, c
	andi	a4,a5,0xff	# tmp144, tmp142
	li	a5,57		# tmp145,
	bgtu	a4,a5,.L141	#, tmp144, tmp145,
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	li	a5,1		# iftmp.19_1,
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	j	.L142		#
.L141:
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	li	a5,0		# iftmp.19_1,
.L142:
# parser.hpp:398:     inline bool isdigit(const char c) { return '0' <= c && c <= '9'; }
	mv	a0,a5	#, <retval>
	ld	s0,24(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4636:
	.size	_ZN7lexer_t7isdigitEc, .-_ZN7lexer_t7isdigitEc
	.section	.text._ZN14parsed_token_tD2Ev,"axG",@progbits,_ZN14parsed_token_tD5Ev,comdat
	.align	1
	.weak	_ZN14parsed_token_tD2Ev
	.type	_ZN14parsed_token_tD2Ev, @function
_ZN14parsed_token_tD2Ev:
.LFB4639:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-24(s0)		# tmp135, this
	addi	a5,a5,40	#, _1, tmp135
	mv	a0,a5	#, _1
	call	_ZN4rstd6stringD1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4639:
	.size	_ZN14parsed_token_tD2Ev, .-_ZN14parsed_token_tD2Ev
	.weak	_ZN14parsed_token_tD1Ev
	.set	_ZN14parsed_token_tD1Ev,_ZN14parsed_token_tD2Ev
	.section	.text._ZN7lexer_t11parse_spaceEv,"axG",@progbits,_ZN7lexer_t11parse_spaceEv,comdat
	.align	1
	.weak	_ZN7lexer_t11parse_spaceEv
	.type	_ZN7lexer_t11parse_spaceEv, @function
_ZN7lexer_t11parse_spaceEv:
.LFB4637:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# .result_ptr, .result_ptr
	sd	a1,-48(s0)	# this, this
# parser.hpp:401:         const auto c = get_char();
	ld	a0,-48(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp144,
	sb	a5,-17(s0)	# tmp144, c
# parser.hpp:402:         if (c == '\0') {
	lbu	a5,-17(s0)	# tmp146, c
	andi	a5,a5,0xff	# tmp147, tmp145
	bne	a5,zero,.L146	#, tmp147,,
# parser.hpp:403:             return parsed_token_t{.token = eof};
	ld	a5,-40(s0)		# tmp148, <retval>
	sd	zero,0(a5)	#, *_17(D)
	sd	zero,8(a5)	#, *_17(D)
	sd	zero,16(a5)	#, *_17(D)
	sd	zero,24(a5)	#, *_17(D)
	sd	zero,32(a5)	#, *_17(D)
	sd	zero,40(a5)	#, *_17(D)
	sd	zero,48(a5)	#, *_17(D)
	sd	zero,56(a5)	#, *_17(D)
	ld	a5,-40(s0)		# tmp149, <retval>
	li	a4,1		# tmp150,
	sd	a4,0(a5)	# tmp150, _17(D)->token
	ld	a5,-40(s0)		# tmp151, <retval>
	addi	a5,a5,40	#, _1, tmp151
	mv	a0,a5	#, _1
	call	_ZN4rstd6stringC1Ev		#
	j	.L147		#
.L146:
# parser.hpp:405:         advance();
	ld	a0,-48(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:406:         if (c == ' ') {
	lbu	a5,-17(s0)	# tmp153, c
	andi	a4,a5,0xff	# tmp154, tmp152
	li	a5,32		# tmp155,
	bne	a4,a5,.L148	#, tmp154, tmp155,
# parser.hpp:407:             return parsed_token_t{.token = SPACE};
	ld	a5,-40(s0)		# tmp156, <retval>
	sd	zero,0(a5)	#, *_17(D)
	sd	zero,8(a5)	#, *_17(D)
	sd	zero,16(a5)	#, *_17(D)
	sd	zero,24(a5)	#, *_17(D)
	sd	zero,32(a5)	#, *_17(D)
	sd	zero,40(a5)	#, *_17(D)
	sd	zero,48(a5)	#, *_17(D)
	sd	zero,56(a5)	#, *_17(D)
	ld	a5,-40(s0)		# tmp157, <retval>
	li	a4,3		# tmp158,
	sd	a4,0(a5)	# tmp158, _17(D)->token
	ld	a5,-40(s0)		# tmp159, <retval>
	addi	a5,a5,40	#, _2, tmp159
	mv	a0,a5	#, _2
	call	_ZN4rstd6stringC1Ev		#
	j	.L147		#
.L148:
# parser.hpp:409:         if (c == '\t') {
	lbu	a5,-17(s0)	# tmp161, c
	andi	a4,a5,0xff	# tmp162, tmp160
	li	a5,9		# tmp163,
	bne	a4,a5,.L149	#, tmp162, tmp163,
# parser.hpp:410:             return parsed_token_t{.token = SPACE};
	ld	a5,-40(s0)		# tmp164, <retval>
	sd	zero,0(a5)	#, *_17(D)
	sd	zero,8(a5)	#, *_17(D)
	sd	zero,16(a5)	#, *_17(D)
	sd	zero,24(a5)	#, *_17(D)
	sd	zero,32(a5)	#, *_17(D)
	sd	zero,40(a5)	#, *_17(D)
	sd	zero,48(a5)	#, *_17(D)
	sd	zero,56(a5)	#, *_17(D)
	ld	a5,-40(s0)		# tmp165, <retval>
	li	a4,3		# tmp166,
	sd	a4,0(a5)	# tmp166, _17(D)->token
	ld	a5,-40(s0)		# tmp167, <retval>
	addi	a5,a5,40	#, _3, tmp167
	mv	a0,a5	#, _3
	call	_ZN4rstd6stringC1Ev		#
	j	.L147		#
.L149:
# parser.hpp:412:         if (c == '\n') {
	lbu	a5,-17(s0)	# tmp169, c
	andi	a4,a5,0xff	# tmp170, tmp168
	li	a5,10		# tmp171,
	bne	a4,a5,.L150	#, tmp170, tmp171,
# parser.hpp:413:             return parsed_token_t{.token = NEWLINE};
	ld	a5,-40(s0)		# tmp172, <retval>
	sd	zero,0(a5)	#, *_17(D)
	sd	zero,8(a5)	#, *_17(D)
	sd	zero,16(a5)	#, *_17(D)
	sd	zero,24(a5)	#, *_17(D)
	sd	zero,32(a5)	#, *_17(D)
	sd	zero,40(a5)	#, *_17(D)
	sd	zero,48(a5)	#, *_17(D)
	sd	zero,56(a5)	#, *_17(D)
	ld	a5,-40(s0)		# tmp173, <retval>
	li	a4,2		# tmp174,
	sd	a4,0(a5)	# tmp174, _17(D)->token
	ld	a5,-40(s0)		# tmp175, <retval>
	addi	a5,a5,40	#, _4, tmp175
	mv	a0,a5	#, _4
	call	_ZN4rstd6stringC1Ev		#
	j	.L147		#
.L150:
# parser.hpp:422:         };
	ld	a5,-40(s0)		# tmp176, <retval>
	sd	zero,0(a5)	#, _17(D)->token
# parser.hpp:417:             .start = cur_position - 1,
	ld	a5,-48(s0)		# tmp177, this
	ld	a5,40(a5)		# _5, this_13(D)->cur_position
# parser.hpp:417:             .start = cur_position - 1,
	addi	a4,a5,-1	#, _6, _5
# parser.hpp:422:         };
	ld	a5,-40(s0)		# tmp178, <retval>
	sd	a4,8(a5)	# _6, _17(D)->start
# parser.hpp:418:             .end = cur_position,
	ld	a5,-48(s0)		# tmp179, this
	ld	a4,40(a5)		# _7, this_13(D)->cur_position
# parser.hpp:422:         };
	ld	a5,-40(s0)		# tmp180, <retval>
	sd	a4,16(a5)	# _7, _17(D)->end
# parser.hpp:419:             .row = cur_row,
	ld	a5,-48(s0)		# tmp181, this
	ld	a4,48(a5)		# _8, this_13(D)->cur_row
# parser.hpp:422:         };
	ld	a5,-40(s0)		# tmp182, <retval>
	sd	a4,24(a5)	# _8, _17(D)->row
# parser.hpp:420:             .col = cur_col,
	ld	a5,-48(s0)		# tmp183, this
	ld	a4,56(a5)		# _9, this_13(D)->cur_col
# parser.hpp:422:         };
	ld	a5,-40(s0)		# tmp184, <retval>
	sd	a4,32(a5)	# _9, _17(D)->col
	ld	a5,-40(s0)		# tmp185, <retval>
	addi	a5,a5,40	#, _10, tmp185
	lbu	a4,-17(s0)	# tmp186, c
	mv	a2,a4	#, tmp186
	li	a1,1		#,
	mv	a0,a5	#, _10
	call	_ZN4rstd6stringC1Emc		#
.L147:
# parser.hpp:423:     }
	ld	a0,-40(s0)		#, <retval>
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4637:
	.size	_ZN7lexer_t11parse_spaceEv, .-_ZN7lexer_t11parse_spaceEv
	.section	.text._ZN14parsed_token_tC2EOS_,"axG",@progbits,_ZN14parsed_token_tC5EOS_,comdat
	.align	1
	.weak	_ZN14parsed_token_tC2EOS_
	.type	_ZN14parsed_token_tC2EOS_, @function
_ZN14parsed_token_tC2EOS_:
.LFB4643:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.101314, D.101314
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-32(s0)		# tmp142, D.101314
	ld	a4,0(a5)		# _1, _12(D)->token
	ld	a5,-24(s0)		# tmp143, this
	sd	a4,0(a5)	# _1, this_10(D)->token
	ld	a5,-32(s0)		# tmp144, D.101314
	ld	a4,8(a5)		# _2, _12(D)->start
	ld	a5,-24(s0)		# tmp145, this
	sd	a4,8(a5)	# _2, this_10(D)->start
	ld	a5,-32(s0)		# tmp146, D.101314
	ld	a4,16(a5)		# _3, _12(D)->end
	ld	a5,-24(s0)		# tmp147, this
	sd	a4,16(a5)	# _3, this_10(D)->end
	ld	a5,-32(s0)		# tmp148, D.101314
	ld	a4,24(a5)		# _4, _12(D)->row
	ld	a5,-24(s0)		# tmp149, this
	sd	a4,24(a5)	# _4, this_10(D)->row
	ld	a5,-32(s0)		# tmp150, D.101314
	ld	a4,32(a5)		# _5, _12(D)->col
	ld	a5,-24(s0)		# tmp151, this
	sd	a4,32(a5)	# _5, this_10(D)->col
	ld	a5,-24(s0)		# tmp152, this
	addi	a4,a5,40	#, _6, tmp152
	ld	a5,-32(s0)		# tmp153, D.101314
	addi	a5,a5,40	#, _7, tmp153
	mv	a1,a5	#, _7
	mv	a0,a4	#, _6
	call	_ZN4rstd6stringC1ERKS0_		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4643:
	.size	_ZN14parsed_token_tC2EOS_, .-_ZN14parsed_token_tC2EOS_
	.weak	_ZN14parsed_token_tC1EOS_
	.set	_ZN14parsed_token_tC1EOS_,_ZN14parsed_token_tC2EOS_
	.section	.text._ZN7lexer_t10parse_nameEmmmm,"axG",@progbits,_ZN7lexer_t10parse_nameEmmmm,comdat
	.align	1
	.weak	_ZN7lexer_t10parse_nameEmmmm
	.type	_ZN7lexer_t10parse_nameEmmmm, @function
_ZN7lexer_t10parse_nameEmmmm:
.LFB4641:
	.cfi_startproc
	addi	sp,sp,-144	#,,
	.cfi_def_cfa_offset 144
	sd	ra,136(sp)	#,
	sd	s0,128(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,144	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-104(s0)	# .result_ptr, .result_ptr
	sd	a1,-112(s0)	# this, this
	sd	a2,-120(s0)	# start, start
	sd	a3,-128(s0)	# row, row
	sd	a4,-136(s0)	# col, col
	sd	a5,-144(s0)	# shift, shift
# parser.hpp:427:         if (shift == 0) current_string.clear();
	ld	a5,-144(s0)		# tmp142, shift
	bne	a5,zero,.L153	#, tmp142,,
# parser.hpp:427:         if (shift == 0) current_string.clear();
	ld	a5,-112(s0)		# tmp143, this
	addi	a5,a5,64	#, _1, tmp143
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
.L153:
# parser.hpp:429:         for (auto c = get_char(); can_continue_name(c);
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp144,
	sb	a5,-17(s0)	# tmp144, c
# parser.hpp:429:         for (auto c = get_char(); can_continue_name(c);
	j	.L154		#
.L155:
# parser.hpp:431:             current_string.push_back(c);
	ld	a5,-112(s0)		# tmp145, this
	addi	a5,a5,64	#, _2, tmp145
	lbu	a4,-17(s0)	# tmp146, c
	mv	a1,a4	#, tmp146
	mv	a0,a5	#, _2
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:430:              advance(), c = get_char()) {
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:430:              advance(), c = get_char()) {
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp147,
	sb	a5,-17(s0)	# tmp147, c
.L154:
# parser.hpp:429:         for (auto c = get_char(); can_continue_name(c);
	lbu	a5,-17(s0)	# tmp148, c
	mv	a1,a5	#, tmp148
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t17can_continue_nameEc		#
	mv	a5,a0	# tmp149,
	bne	a5,zero,.L155	#, retval.23_19,,
# parser.hpp:433:         shift += cur_position - start;
	ld	a5,-112(s0)		# tmp150, this
	ld	a4,40(a5)		# _3, this_14(D)->cur_position
# parser.hpp:433:         shift += cur_position - start;
	ld	a5,-120(s0)		# tmp151, start
	sub	a5,a4,a5	# _4, _3, tmp151
# parser.hpp:433:         shift += cur_position - start;
	ld	a4,-144(s0)		# tmp153, shift
	add	a5,a4,a5	# _4, tmp152, tmp153
	sd	a5,-144(s0)	# tmp152, shift
# parser.hpp:434:         if (shift == 0) {
	ld	a5,-144(s0)		# tmp154, shift
	bne	a5,zero,.L156	#, tmp154,,
# parser.hpp:435:             return parse_space();
	ld	a5,-104(s0)		# tmp155, <retval>
	ld	a1,-112(s0)		#, this
	mv	a0,a5	#, tmp155
	call	_ZN7lexer_t11parse_spaceEv		#
	j	.L158		#
.L156:
# parser.hpp:438:         auto parsed_token = parsed_token_t{
	sd	zero,-88(s0)	#, parsed_token
	sd	zero,-80(s0)	#, parsed_token
	sd	zero,-72(s0)	#, parsed_token
	sd	zero,-64(s0)	#, parsed_token
	sd	zero,-56(s0)	#, parsed_token
	sd	zero,-48(s0)	#, parsed_token
	sd	zero,-40(s0)	#, parsed_token
	sd	zero,-32(s0)	#, parsed_token
	li	a5,6		# tmp156,
	sd	a5,-88(s0)	# tmp156, parsed_token.token
# parser.hpp:445:         };
	ld	a5,-120(s0)		# tmp157, start
	sd	a5,-80(s0)	# tmp157, parsed_token.start
# parser.hpp:441:             .end = cur_position,
	ld	a5,-112(s0)		# tmp158, this
	ld	a5,40(a5)		# _5, this_14(D)->cur_position
# parser.hpp:445:         };
	sd	a5,-72(s0)	# _5, parsed_token.end
	ld	a5,-128(s0)		# tmp159, row
	sd	a5,-64(s0)	# tmp159, parsed_token.row
	ld	a5,-136(s0)		# tmp160, col
	sd	a5,-56(s0)	# tmp160, parsed_token.col
# parser.hpp:444:             .data = rstd::string(current_string),
	ld	a5,-112(s0)		# tmp161, this
	addi	a4,a5,64	#, _6, tmp161
# parser.hpp:445:         };
	addi	a5,s0,-88	#, tmp162,
	addi	a5,a5,40	#, tmp163, tmp162
	mv	a1,a4	#, _6
	mv	a0,a5	#, tmp163
	call	_ZN4rstd6stringC1ERKS0_		#
# parser.hpp:446:         current_string.clear();
	ld	a5,-112(s0)		# tmp164, this
	addi	a5,a5,64	#, _7, tmp164
	mv	a0,a5	#, _7
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:447:         return parsed_token;
	addi	a5,s0,-88	#, tmp165,
	mv	a1,a5	#, tmp165
	ld	a0,-104(s0)		#, <retval>
	call	_ZN14parsed_token_tC1EOS_		#
# parser.hpp:448:     }
	addi	a5,s0,-88	#, tmp166,
	mv	a0,a5	#, tmp166
	call	_ZN14parsed_token_tD1Ev		#
.L158:
	ld	a0,-104(s0)		#, <retval>
	ld	ra,136(sp)		#,
	.cfi_restore 1
	ld	s0,128(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 144
	addi	sp,sp,144	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4641:
	.size	_ZN7lexer_t10parse_nameEmmmm, .-_ZN7lexer_t10parse_nameEmmmm
	.section	.rodata
	.align	3
.LC84:
	.string	"parsed int: "
	.align	3
.LC85:
	.string	"\n"
	.align	3
.LC86:
	.string	"parsed float: "
	.section	.text._ZN7lexer_t12parse_numberEv,"axG",@progbits,_ZN7lexer_t12parse_numberEv,comdat
	.align	1
	.weak	_ZN7lexer_t12parse_numberEv
	.type	_ZN7lexer_t12parse_numberEv, @function
_ZN7lexer_t12parse_numberEv:
.LFB4645:
	.cfi_startproc
	addi	sp,sp,-208	#,,
	.cfi_def_cfa_offset 208
	sd	ra,200(sp)	#,
	sd	s0,192(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,208	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-200(s0)	# .result_ptr, .result_ptr
	sd	a1,-208(s0)	# this, this
# parser.hpp:451:         size_t shift = 0;
	sd	zero,-24(s0)	#, shift
# parser.hpp:452:         const auto start = cur_position;
	ld	a5,-208(s0)		# tmp150, this
	ld	a5,40(a5)		# tmp151, this_24(D)->cur_position
	sd	a5,-40(s0)	# tmp151, start
# parser.hpp:453:         const auto col = cur_col;
	ld	a5,-208(s0)		# tmp152, this
	ld	a5,56(a5)		# tmp153, this_24(D)->cur_col
	sd	a5,-48(s0)	# tmp153, col
# parser.hpp:454:         const auto row = cur_row;
	ld	a5,-208(s0)		# tmp154, this
	ld	a5,48(a5)		# tmp155, this_24(D)->cur_row
	sd	a5,-56(s0)	# tmp155, row
# parser.hpp:455:         current_string.clear();
	ld	a5,-208(s0)		# tmp156, this
	addi	a5,a5,64	#, _1, tmp156
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:456:         auto c = get_char();
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp157,
	sb	a5,-25(s0)	# tmp157, c
# parser.hpp:457:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	j	.L160		#
.L161:
# parser.hpp:458:             current_string.push_back(c);
	ld	a5,-208(s0)		# tmp158, this
	addi	a5,a5,64	#, _2, tmp158
	lbu	a4,-25(s0)	# tmp159, c
	mv	a1,a4	#, tmp159
	mv	a0,a5	#, _2
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:457:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:457:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a5,-24(s0)		# tmp161, shift
	addi	a5,a5,1	#, tmp160, tmp161
	sd	a5,-24(s0)	# tmp160, shift
# parser.hpp:457:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp162,
	sb	a5,-25(s0)	# tmp162, c
.L160:
# parser.hpp:457:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	lbu	a5,-25(s0)	# tmp163, c
	mv	a1,a5	#, tmp163
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t7isdigitEc		#
	mv	a5,a0	# tmp164,
	bne	a5,zero,.L161	#, retval.20_32,,
# parser.hpp:460:         if (shift == 0) {
	ld	a5,-24(s0)		# tmp165, shift
	bne	a5,zero,.L162	#, tmp165,,
# parser.hpp:461:             return parse_name(start, row, col, shift);
	ld	a0,-200(s0)		# tmp166, <retval>
	ld	a5,-24(s0)		#, shift
	ld	a4,-48(s0)		#, col
	ld	a3,-56(s0)		#, row
	ld	a2,-40(s0)		#, start
	ld	a1,-208(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L159		#
.L162:
# parser.hpp:463:         if (c == '\0' || c != '.') {
	lbu	a5,-25(s0)	# tmp168, c
	andi	a5,a5,0xff	# tmp169, tmp167
	beq	a5,zero,.L164	#, tmp169,,
# parser.hpp:463:         if (c == '\0' || c != '.') {
	lbu	a5,-25(s0)	# tmp171, c
	andi	a4,a5,0xff	# tmp172, tmp170
	li	a5,46		# tmp173,
	beq	a4,a5,.L165	#, tmp172, tmp173,
.L164:
# parser.hpp:464:             rsyscall::print_string("parsed int: ");
	lui	a5,%hi(.LC84)	# tmp174,
	addi	a0,a5,%lo(.LC84)	#, tmp174,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:465:             rsyscall::print_string(current_string.c_str());
	ld	a5,-208(s0)		# tmp175, this
	addi	a5,a5,64	#, _3, tmp175
	mv	a0,a5	#, _3
	call	_ZN4rstd6string5c_strEv		#
	mv	a5,a0	# _4,
# parser.hpp:465:             rsyscall::print_string(current_string.c_str());
	mv	a0,a5	#, _4
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:466:             rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp176,
	addi	a0,a5,%lo(.LC85)	#, tmp176,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:467:             auto parsed_token = parsed_token_t{
	sd	zero,-184(s0)	#, parsed_token
	sd	zero,-176(s0)	#, parsed_token
	sd	zero,-168(s0)	#, parsed_token
	sd	zero,-160(s0)	#, parsed_token
	sd	zero,-152(s0)	#, parsed_token
	sd	zero,-144(s0)	#, parsed_token
	sd	zero,-136(s0)	#, parsed_token
	sd	zero,-128(s0)	#, parsed_token
	li	a5,4		# tmp177,
	sd	a5,-184(s0)	# tmp177, parsed_token.token
# parser.hpp:474:             };
	ld	a5,-40(s0)		# tmp178, start
	sd	a5,-176(s0)	# tmp178, parsed_token.start
# parser.hpp:470:                 .end = cur_position,
	ld	a5,-208(s0)		# tmp179, this
	ld	a5,40(a5)		# _5, this_24(D)->cur_position
# parser.hpp:474:             };
	sd	a5,-168(s0)	# _5, parsed_token.end
	ld	a5,-56(s0)		# tmp180, row
	sd	a5,-160(s0)	# tmp180, parsed_token.row
	ld	a5,-48(s0)		# tmp181, col
	sd	a5,-152(s0)	# tmp181, parsed_token.col
# parser.hpp:473:                 .data = rstd::string(current_string),
	ld	a5,-208(s0)		# tmp182, this
	addi	a4,a5,64	#, _6, tmp182
# parser.hpp:474:             };
	addi	a5,s0,-184	#, tmp183,
	addi	a5,a5,40	#, tmp184, tmp183
	mv	a1,a4	#, _6
	mv	a0,a5	#, tmp184
	call	_ZN4rstd6stringC1ERKS0_		#
# parser.hpp:475:             current_string.clear();
	ld	a5,-208(s0)		# tmp185, this
	addi	a5,a5,64	#, _7, tmp185
	mv	a0,a5	#, _7
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:476:             return parsed_token;
	addi	a5,s0,-184	#, tmp186,
	mv	a1,a5	#, tmp186
	ld	a0,-200(s0)		#, <retval>
	call	_ZN14parsed_token_tC1EOS_		#
# parser.hpp:477:         }
	addi	a5,s0,-184	#, tmp187,
	mv	a0,a5	#, tmp187
	call	_ZN14parsed_token_tD1Ev		#
# parser.hpp:499:     }
	j	.L159		#
.L165:
# parser.hpp:478:         current_string.push_back(c);
	ld	a5,-208(s0)		# tmp188, this
	addi	a5,a5,64	#, _8, tmp188
	lbu	a4,-25(s0)	# tmp189, c
	mv	a1,a4	#, tmp189
	mv	a0,a5	#, _8
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:479:         advance();
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:480:         c = get_char();
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp190,
	sb	a5,-25(s0)	# tmp190, c
# parser.hpp:481:         ++shift;
	ld	a5,-24(s0)		# tmp192, shift
	addi	a5,a5,1	#, tmp191, tmp192
	sd	a5,-24(s0)	# tmp191, shift
# parser.hpp:482:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	j	.L166		#
.L167:
# parser.hpp:483:             current_string.push_back(c);
	ld	a5,-208(s0)		# tmp193, this
	addi	a5,a5,64	#, _9, tmp193
	lbu	a4,-25(s0)	# tmp194, c
	mv	a1,a4	#, tmp194
	mv	a0,a5	#, _9
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:482:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:482:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a5,-24(s0)		# tmp196, shift
	addi	a5,a5,1	#, tmp195, tmp196
	sd	a5,-24(s0)	# tmp195, shift
# parser.hpp:482:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp197,
	sb	a5,-25(s0)	# tmp197, c
.L166:
# parser.hpp:482:         for (; isdigit(c); advance(), ++shift, c = get_char()) {
	lbu	a5,-25(s0)	# tmp198, c
	mv	a1,a5	#, tmp198
	ld	a0,-208(s0)		#, this
	call	_ZN7lexer_t7isdigitEc		#
	mv	a5,a0	# tmp199,
	bne	a5,zero,.L167	#, retval.21_39,,
# parser.hpp:486:         rsyscall::print_string("parsed float: ");
	lui	a5,%hi(.LC86)	# tmp200,
	addi	a0,a5,%lo(.LC86)	#, tmp200,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:487:         rsyscall::print_string(current_string.c_str());
	ld	a5,-208(s0)		# tmp201, this
	addi	a5,a5,64	#, _10, tmp201
	mv	a0,a5	#, _10
	call	_ZN4rstd6string5c_strEv		#
	mv	a5,a0	# _11,
# parser.hpp:487:         rsyscall::print_string(current_string.c_str());
	mv	a0,a5	#, _11
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:488:         rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp202,
	addi	a0,a5,%lo(.LC85)	#, tmp202,
	call	_ZN8rsyscall12print_stringEPKc		#
# parser.hpp:489:         auto parsed_token = parsed_token_t{
	sd	zero,-120(s0)	#, parsed_token
	sd	zero,-112(s0)	#, parsed_token
	sd	zero,-104(s0)	#, parsed_token
	sd	zero,-96(s0)	#, parsed_token
	sd	zero,-88(s0)	#, parsed_token
	sd	zero,-80(s0)	#, parsed_token
	sd	zero,-72(s0)	#, parsed_token
	sd	zero,-64(s0)	#, parsed_token
	li	a5,4		# tmp203,
	sd	a5,-120(s0)	# tmp203, parsed_token.token
# parser.hpp:496:         };
	ld	a5,-40(s0)		# tmp204, start
	sd	a5,-112(s0)	# tmp204, parsed_token.start
# parser.hpp:492:             .end = cur_position,
	ld	a5,-208(s0)		# tmp205, this
	ld	a5,40(a5)		# _12, this_24(D)->cur_position
# parser.hpp:496:         };
	sd	a5,-104(s0)	# _12, parsed_token.end
	ld	a5,-56(s0)		# tmp206, row
	sd	a5,-96(s0)	# tmp206, parsed_token.row
	ld	a5,-48(s0)		# tmp207, col
	sd	a5,-88(s0)	# tmp207, parsed_token.col
# parser.hpp:495:             .data = rstd::string(current_string),
	ld	a5,-208(s0)		# tmp208, this
	addi	a4,a5,64	#, _13, tmp208
# parser.hpp:496:         };
	addi	a5,s0,-120	#, tmp209,
	addi	a5,a5,40	#, tmp210, tmp209
	mv	a1,a4	#, _13
	mv	a0,a5	#, tmp210
	call	_ZN4rstd6stringC1ERKS0_		#
# parser.hpp:497:         current_string.clear();
	ld	a5,-208(s0)		# tmp211, this
	addi	a5,a5,64	#, _14, tmp211
	mv	a0,a5	#, _14
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:498:         return parsed_token;
	addi	a5,s0,-120	#, tmp212,
	mv	a1,a5	#, tmp212
	ld	a0,-200(s0)		#, <retval>
	call	_ZN14parsed_token_tC1EOS_		#
# parser.hpp:499:     }
	addi	a5,s0,-120	#, tmp213,
	mv	a0,a5	#, tmp213
	call	_ZN14parsed_token_tD1Ev		#
.L159:
	ld	a0,-200(s0)		#, <retval>
	ld	ra,200(sp)		#,
	.cfi_restore 1
	ld	s0,192(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 208
	addi	sp,sp,208	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4645:
	.size	_ZN7lexer_t12parse_numberEv, .-_ZN7lexer_t12parse_numberEv
	.section	.text._ZN7lexer_t13parse_commentEv,"axG",@progbits,_ZN7lexer_t13parse_commentEv,comdat
	.align	1
	.weak	_ZN7lexer_t13parse_commentEv
	.type	_ZN7lexer_t13parse_commentEv, @function
_ZN7lexer_t13parse_commentEv:
.LFB4646:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	ra,56(sp)	#,
	sd	s0,48(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-56(s0)	# .result_ptr, .result_ptr
	sd	a1,-64(s0)	# this, this
# parser.hpp:502:         const auto start = cur_position;
	ld	a5,-64(s0)		# tmp142, this
	ld	a5,40(a5)		# tmp143, this_12(D)->cur_position
	sd	a5,-24(s0)	# tmp143, start
# parser.hpp:503:         const auto col = cur_col;
	ld	a5,-64(s0)		# tmp144, this
	ld	a5,56(a5)		# tmp145, this_12(D)->cur_col
	sd	a5,-32(s0)	# tmp145, col
# parser.hpp:504:         const auto row = cur_row;
	ld	a5,-64(s0)		# tmp146, this
	ld	a5,48(a5)		# tmp147, this_12(D)->cur_row
	sd	a5,-40(s0)	# tmp147, row
# parser.hpp:505:         current_string.clear();
	ld	a5,-64(s0)		# tmp148, this
	addi	a5,a5,64	#, _1, tmp148
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:506:         const auto c = get_char();
	ld	a0,-64(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp149,
	sb	a5,-41(s0)	# tmp149, c
# parser.hpp:507:         if (c == '\0') {
	lbu	a5,-41(s0)	# tmp151, c
	andi	a5,a5,0xff	# tmp152, tmp150
	bne	a5,zero,.L170	#, tmp152,,
# parser.hpp:508:             return parsed_token_t{.token = eof};
	ld	a5,-56(s0)		# tmp153, <retval>
	sd	zero,0(a5)	#, *_19(D)
	sd	zero,8(a5)	#, *_19(D)
	sd	zero,16(a5)	#, *_19(D)
	sd	zero,24(a5)	#, *_19(D)
	sd	zero,32(a5)	#, *_19(D)
	sd	zero,40(a5)	#, *_19(D)
	sd	zero,48(a5)	#, *_19(D)
	sd	zero,56(a5)	#, *_19(D)
	ld	a5,-56(s0)		# tmp154, <retval>
	li	a4,1		# tmp155,
	sd	a4,0(a5)	# tmp155, _19(D)->token
	ld	a5,-56(s0)		# tmp156, <retval>
	addi	a5,a5,40	#, _2, tmp156
	mv	a0,a5	#, _2
	call	_ZN4rstd6stringC1Ev		#
	j	.L171		#
.L170:
# parser.hpp:510:         if (c == '#') {
	lbu	a5,-41(s0)	# tmp158, c
	andi	a4,a5,0xff	# tmp159, tmp157
	li	a5,35		# tmp160,
	bne	a4,a5,.L172	#, tmp159, tmp160,
# parser.hpp:511:             for (; c != '\n' && c != '\0'; advance()) {
	j	.L173		#
.L175:
# parser.hpp:512:                 current_string.push_back(c);
	ld	a5,-64(s0)		# tmp161, this
	addi	a5,a5,64	#, _3, tmp161
	lbu	a4,-41(s0)	# tmp162, c
	mv	a1,a4	#, tmp162
	mv	a0,a5	#, _3
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:511:             for (; c != '\n' && c != '\0'; advance()) {
	ld	a0,-64(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
.L173:
# parser.hpp:511:             for (; c != '\n' && c != '\0'; advance()) {
	lbu	a5,-41(s0)	# tmp164, c
	andi	a4,a5,0xff	# tmp165, tmp163
	li	a5,10		# tmp166,
	beq	a4,a5,.L174	#, tmp165, tmp166,
# parser.hpp:511:             for (; c != '\n' && c != '\0'; advance()) {
	lbu	a5,-41(s0)	# tmp168, c
	andi	a5,a5,0xff	# tmp169, tmp167
	bne	a5,zero,.L175	#, tmp169,,
.L174:
# parser.hpp:521:             };
	ld	a5,-56(s0)		# tmp170, <retval>
	li	a4,81		# tmp171,
	sd	a4,0(a5)	# tmp171, _19(D)->token
	ld	a5,-56(s0)		# tmp172, <retval>
	ld	a4,-24(s0)		# tmp173, start
	sd	a4,8(a5)	# tmp173, _19(D)->start
# parser.hpp:517:                 .end = cur_position,
	ld	a5,-64(s0)		# tmp174, this
	ld	a4,40(a5)		# _4, this_12(D)->cur_position
# parser.hpp:521:             };
	ld	a5,-56(s0)		# tmp175, <retval>
	sd	a4,16(a5)	# _4, _19(D)->end
	ld	a5,-56(s0)		# tmp176, <retval>
	ld	a4,-40(s0)		# tmp177, row
	sd	a4,24(a5)	# tmp177, _19(D)->row
	ld	a5,-56(s0)		# tmp178, <retval>
	ld	a4,-32(s0)		# tmp179, col
	sd	a4,32(a5)	# tmp179, _19(D)->col
	ld	a5,-56(s0)		# tmp180, <retval>
	addi	a4,a5,40	#, _5, tmp180
# parser.hpp:520:                 .data = current_string,
	ld	a5,-64(s0)		# tmp181, this
	addi	a5,a5,64	#, _6, tmp181
# parser.hpp:521:             };
	mv	a1,a5	#, _6
	mv	a0,a4	#, _5
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L171		#
.L172:
# parser.hpp:527:                               .col = col};
	ld	a5,-56(s0)		# tmp182, <retval>
	sd	zero,0(a5)	#, _19(D)->token
	ld	a5,-56(s0)		# tmp183, <retval>
	ld	a4,-24(s0)		# tmp184, start
	sd	a4,8(a5)	# tmp184, _19(D)->start
# parser.hpp:525:                               .end = cur_position,
	ld	a5,-64(s0)		# tmp185, this
	ld	a4,40(a5)		# _7, this_12(D)->cur_position
# parser.hpp:527:                               .col = col};
	ld	a5,-56(s0)		# tmp186, <retval>
	sd	a4,16(a5)	# _7, _19(D)->end
	ld	a5,-56(s0)		# tmp187, <retval>
	ld	a4,-40(s0)		# tmp188, row
	sd	a4,24(a5)	# tmp188, _19(D)->row
	ld	a5,-56(s0)		# tmp189, <retval>
	ld	a4,-32(s0)		# tmp190, col
	sd	a4,32(a5)	# tmp190, _19(D)->col
	ld	a5,-56(s0)		# tmp191, <retval>
	addi	a5,a5,40	#, _8, tmp191
	mv	a0,a5	#, _8
	call	_ZN4rstd6stringC1Ev		#
.L171:
# parser.hpp:528:     }
	ld	a0,-56(s0)		#, <retval>
	ld	ra,56(sp)		#,
	.cfi_restore 1
	ld	s0,48(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4646:
	.size	_ZN7lexer_t13parse_commentEv, .-_ZN7lexer_t13parse_commentEv
	.section	.text._ZN7lexer_t21parse_string_unescapeEv,"axG",@progbits,_ZN7lexer_t21parse_string_unescapeEv,comdat
	.align	1
	.weak	_ZN7lexer_t21parse_string_unescapeEv
	.type	_ZN7lexer_t21parse_string_unescapeEv, @function
_ZN7lexer_t21parse_string_unescapeEv:
.LFB4647:
	.cfi_startproc
	addi	sp,sp,-112	#,,
	.cfi_def_cfa_offset 112
	sd	ra,104(sp)	#,
	sd	s0,96(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,112	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-104(s0)	# .result_ptr, .result_ptr
	sd	a1,-112(s0)	# this, this
# parser.hpp:531:         const auto start = cur_position;
	ld	a5,-112(s0)		# tmp155, this
	ld	a5,40(a5)		# tmp156, this_28(D)->cur_position
	sd	a5,-32(s0)	# tmp156, start
# parser.hpp:532:         const auto col = cur_col;
	ld	a5,-112(s0)		# tmp157, this
	ld	a5,56(a5)		# tmp158, this_28(D)->cur_col
	sd	a5,-40(s0)	# tmp158, col
# parser.hpp:533:         const auto row = cur_row;
	ld	a5,-112(s0)		# tmp159, this
	ld	a5,48(a5)		# tmp160, this_28(D)->cur_row
	sd	a5,-48(s0)	# tmp160, row
# parser.hpp:534:         current_string.clear();
	ld	a5,-112(s0)		# tmp161, this
	addi	a5,a5,64	#, _1, tmp161
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:535:         const char closing_quote = get_char();
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp162,
	sb	a5,-49(s0)	# tmp162, closing_quote
# parser.hpp:537:         advance();
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:538:         for (auto c = get_char(); c != closing_quote;
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp163,
	sb	a5,-17(s0)	# tmp163, c
# parser.hpp:538:         for (auto c = get_char(); c != closing_quote;
	j	.L177		#
.L188:
# parser.hpp:540:             if (c == '\0') {
	lbu	a5,-17(s0)	# tmp165, c
	andi	a5,a5,0xff	# tmp166, tmp164
	bne	a5,zero,.L178	#, tmp166,,
# parser.hpp:546:                                       .data = current_string};
	ld	a5,-104(s0)		# tmp167, <retval>
	sd	zero,0(a5)	#, _39(D)->token
	ld	a5,-104(s0)		# tmp168, <retval>
	ld	a4,-32(s0)		# tmp169, start
	sd	a4,8(a5)	# tmp169, _39(D)->start
# parser.hpp:543:                                       .end = cur_position,
	ld	a5,-112(s0)		# tmp170, this
	ld	a4,40(a5)		# _2, this_28(D)->cur_position
# parser.hpp:546:                                       .data = current_string};
	ld	a5,-104(s0)		# tmp171, <retval>
	sd	a4,16(a5)	# _2, _39(D)->end
	ld	a5,-104(s0)		# tmp172, <retval>
	ld	a4,-48(s0)		# tmp173, row
	sd	a4,24(a5)	# tmp173, _39(D)->row
	ld	a5,-104(s0)		# tmp174, <retval>
	ld	a4,-40(s0)		# tmp175, col
	sd	a4,32(a5)	# tmp175, _39(D)->col
	ld	a5,-104(s0)		# tmp176, <retval>
	addi	a4,a5,40	#, _3, tmp176
# parser.hpp:546:                                       .data = current_string};
	ld	a5,-112(s0)		# tmp177, this
	addi	a5,a5,64	#, _4, tmp177
# parser.hpp:546:                                       .data = current_string};
	mv	a1,a5	#, _4
	mv	a0,a4	#, _3
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L179		#
.L178:
# parser.hpp:548:             if (c == '\\') {
	lbu	a5,-17(s0)	# tmp179, c
	andi	a4,a5,0xff	# tmp180, tmp178
	li	a5,92		# tmp181,
	bne	a4,a5,.L180	#, tmp180, tmp181,
# parser.hpp:550:                 auto before_escape_position = cur_position;
	ld	a5,-112(s0)		# tmp182, this
	ld	a5,40(a5)		# tmp183, this_28(D)->cur_position
	sd	a5,-64(s0)	# tmp183, before_escape_position
# parser.hpp:551:                 auto before_escape_col = cur_col;
	ld	a5,-112(s0)		# tmp184, this
	ld	a5,56(a5)		# tmp185, this_28(D)->cur_col
	sd	a5,-72(s0)	# tmp185, before_escape_col
# parser.hpp:552:                 auto before_escape_row = cur_row;
	ld	a5,-112(s0)		# tmp186, this
	ld	a5,48(a5)		# tmp187, this_28(D)->cur_row
	sd	a5,-80(s0)	# tmp187, before_escape_row
# parser.hpp:553:                 advance();
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:554:                 const auto escaped = get_char();
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp188,
	sb	a5,-81(s0)	# tmp188, escaped
# parser.hpp:555:                 switch (escaped) {
	lbu	a5,-81(s0)	# tmp189, escaped
	sext.w	a5,a5	# _5, tmp189
# parser.hpp:555:                 switch (escaped) {
	mv	a3,a5	# tmp190, _5
	li	a4,116		# tmp191,
	beq	a3,a4,.L181	#, tmp190, tmp191,
	mv	a3,a5	# tmp192, _5
	li	a4,116		# tmp193,
	bgt	a3,a4,.L182	#, tmp192, tmp193,
	mv	a3,a5	# tmp194, _5
	li	a4,114		# tmp195,
	beq	a3,a4,.L183	#, tmp194, tmp195,
	mv	a3,a5	# tmp196, _5
	li	a4,114		# tmp197,
	bgt	a3,a4,.L182	#, tmp196, tmp197,
	mv	a3,a5	# tmp198, _5
	li	a4,48		# tmp199,
	beq	a3,a4,.L184	#, tmp198, tmp199,
	mv	a4,a5	# tmp200, _5
	li	a5,110		# tmp201,
	bne	a4,a5,.L182	#, tmp200, tmp201,
# parser.hpp:557:                         current_string.push_back('\n');
	ld	a5,-112(s0)		# tmp202, this
	addi	a5,a5,64	#, _6, tmp202
	li	a1,10		#,
	mv	a0,a5	#, _6
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:558:                         break;
	j	.L186		#
.L181:
# parser.hpp:560:                         current_string.push_back('\t');
	ld	a5,-112(s0)		# tmp203, this
	addi	a5,a5,64	#, _7, tmp203
	li	a1,9		#,
	mv	a0,a5	#, _7
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:561:                         break;
	j	.L186		#
.L183:
# parser.hpp:563:                         current_string.push_back('\r');
	ld	a5,-112(s0)		# tmp204, this
	addi	a5,a5,64	#, _8, tmp204
	li	a1,13		#,
	mv	a0,a5	#, _8
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:564:                         break;
	j	.L186		#
.L184:
# parser.hpp:566:                         current_string.push_back('\0');
	ld	a5,-112(s0)		# tmp205, this
	addi	a5,a5,64	#, _9, tmp205
	li	a1,0		#,
	mv	a0,a5	#, _9
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:567:                         break;
	j	.L186		#
.L182:
# parser.hpp:569:                         current_string.push_back(c);
	ld	a5,-112(s0)		# tmp206, this
	addi	a5,a5,64	#, _10, tmp206
	lbu	a4,-17(s0)	# tmp207, c
	mv	a1,a4	#, tmp207
	mv	a0,a5	#, _10
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:570:                         current_string.push_back(escaped);
	ld	a5,-112(s0)		# tmp208, this
	addi	a5,a5,64	#, _11, tmp208
	lbu	a4,-81(s0)	# tmp209, escaped
	mv	a1,a4	#, tmp209
	mv	a0,a5	#, _11
	call	_ZN4rstd6string9push_backEc		#
# parser.hpp:576:                                               .data = current_string};
	ld	a5,-104(s0)		# tmp210, <retval>
	sd	zero,0(a5)	#, _39(D)->token
	ld	a5,-104(s0)		# tmp211, <retval>
	ld	a4,-32(s0)		# tmp212, start
	sd	a4,8(a5)	# tmp212, _39(D)->start
# parser.hpp:573:                                               .end = cur_position,
	ld	a5,-112(s0)		# tmp213, this
	ld	a4,40(a5)		# _12, this_28(D)->cur_position
# parser.hpp:576:                                               .data = current_string};
	ld	a5,-104(s0)		# tmp214, <retval>
	sd	a4,16(a5)	# _12, _39(D)->end
	ld	a5,-104(s0)		# tmp215, <retval>
	ld	a4,-48(s0)		# tmp216, row
	sd	a4,24(a5)	# tmp216, _39(D)->row
	ld	a5,-104(s0)		# tmp217, <retval>
	ld	a4,-40(s0)		# tmp218, col
	sd	a4,32(a5)	# tmp218, _39(D)->col
	ld	a5,-104(s0)		# tmp219, <retval>
	addi	a4,a5,40	#, _13, tmp219
# parser.hpp:576:                                               .data = current_string};
	ld	a5,-112(s0)		# tmp220, this
	addi	a5,a5,64	#, _14, tmp220
# parser.hpp:576:                                               .data = current_string};
	mv	a1,a5	#, _14
	mv	a0,a4	#, _13
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L179		#
.L180:
# parser.hpp:579:                 if (c == '\n') {
	lbu	a5,-17(s0)	# tmp222, c
	andi	a4,a5,0xff	# tmp223, tmp221
	li	a5,10		# tmp224,
	bne	a4,a5,.L187	#, tmp223, tmp224,
# parser.hpp:585:                                           .data = current_string};
	ld	a5,-104(s0)		# tmp225, <retval>
	sd	zero,0(a5)	#, _39(D)->token
	ld	a5,-104(s0)		# tmp226, <retval>
	ld	a4,-32(s0)		# tmp227, start
	sd	a4,8(a5)	# tmp227, _39(D)->start
# parser.hpp:582:                                           .end = cur_position,
	ld	a5,-112(s0)		# tmp228, this
	ld	a4,40(a5)		# _15, this_28(D)->cur_position
# parser.hpp:585:                                           .data = current_string};
	ld	a5,-104(s0)		# tmp229, <retval>
	sd	a4,16(a5)	# _15, _39(D)->end
	ld	a5,-104(s0)		# tmp230, <retval>
	ld	a4,-48(s0)		# tmp231, row
	sd	a4,24(a5)	# tmp231, _39(D)->row
	ld	a5,-104(s0)		# tmp232, <retval>
	ld	a4,-40(s0)		# tmp233, col
	sd	a4,32(a5)	# tmp233, _39(D)->col
	ld	a5,-104(s0)		# tmp234, <retval>
	addi	a4,a5,40	#, _16, tmp234
# parser.hpp:585:                                           .data = current_string};
	ld	a5,-112(s0)		# tmp235, this
	addi	a5,a5,64	#, _17, tmp235
# parser.hpp:585:                                           .data = current_string};
	mv	a1,a5	#, _17
	mv	a0,a4	#, _16
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L179		#
.L187:
# parser.hpp:587:                 current_string.push_back(c);
	ld	a5,-112(s0)		# tmp236, this
	addi	a5,a5,64	#, _18, tmp236
	lbu	a4,-17(s0)	# tmp237, c
	mv	a1,a4	#, tmp237
	mv	a0,a5	#, _18
	call	_ZN4rstd6string9push_backEc		#
.L186:
# parser.hpp:539:              advance(), c = get_char()) {
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:539:              advance(), c = get_char()) {
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp238,
	sb	a5,-17(s0)	# tmp238, c
.L177:
# parser.hpp:538:         for (auto c = get_char(); c != closing_quote;
	lbu	a5,-17(s0)	# tmp240, c
	mv	a4,a5	# tmp239, tmp240
	lbu	a5,-49(s0)	# tmp242, closing_quote
	andi	a4,a4,0xff	# tmp243, tmp239
	andi	a5,a5,0xff	# tmp244, tmp241
	bne	a4,a5,.L188	#, tmp243, tmp244,
# parser.hpp:590:         advance();
	ld	a0,-112(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:596:                               .data = current_string};
	ld	a5,-104(s0)		# tmp245, <retval>
	li	a4,80		# tmp246,
	sd	a4,0(a5)	# tmp246, _39(D)->token
	ld	a5,-104(s0)		# tmp247, <retval>
	ld	a4,-32(s0)		# tmp248, start
	sd	a4,8(a5)	# tmp248, _39(D)->start
# parser.hpp:593:                               .end = cur_position,
	ld	a5,-112(s0)		# tmp249, this
	ld	a4,40(a5)		# _19, this_28(D)->cur_position
# parser.hpp:596:                               .data = current_string};
	ld	a5,-104(s0)		# tmp250, <retval>
	sd	a4,16(a5)	# _19, _39(D)->end
	ld	a5,-104(s0)		# tmp251, <retval>
	ld	a4,-48(s0)		# tmp252, row
	sd	a4,24(a5)	# tmp252, _39(D)->row
	ld	a5,-104(s0)		# tmp253, <retval>
	ld	a4,-40(s0)		# tmp254, col
	sd	a4,32(a5)	# tmp254, _39(D)->col
	ld	a5,-104(s0)		# tmp255, <retval>
	addi	a4,a5,40	#, _20, tmp255
# parser.hpp:596:                               .data = current_string};
	ld	a5,-112(s0)		# tmp256, this
	addi	a5,a5,64	#, _21, tmp256
# parser.hpp:596:                               .data = current_string};
	mv	a1,a5	#, _21
	mv	a0,a4	#, _20
	call	_ZN4rstd6stringC1ERKS0_		#
.L179:
# parser.hpp:597:     }
	ld	a0,-104(s0)		#, <retval>
	ld	ra,104(sp)		#,
	.cfi_restore 1
	ld	s0,96(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 112
	addi	sp,sp,112	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4647:
	.size	_ZN7lexer_t21parse_string_unescapeEv, .-_ZN7lexer_t21parse_string_unescapeEv
	.section	.rodata
	.align	3
.LC87:
	.string	">>="
	.align	3
.LC88:
	.string	">="
	.align	3
.LC89:
	.string	"<<="
	.align	3
.LC90:
	.string	"<="
	.align	3
.LC91:
	.string	"=="
	.align	3
.LC92:
	.string	"="
	.align	3
.LC93:
	.string	"!="
	.align	3
.LC94:
	.string	"+="
	.align	3
.LC95:
	.string	"-="
	.align	3
.LC96:
	.string	"**="
	.align	3
.LC97:
	.string	"*="
	.align	3
.LC98:
	.string	"//="
	.align	3
.LC99:
	.string	"/="
	.align	3
.LC100:
	.string	"%="
	.align	3
.LC101:
	.string	"|="
	.align	3
.LC102:
	.string	"&="
	.align	3
.LC103:
	.string	"^="
	.align	3
.LC104:
	.string	"~="
	.section	.text._ZN7lexer_t14parse_non_nameEv,"axG",@progbits,_ZN7lexer_t14parse_non_nameEv,comdat
	.align	1
	.weak	_ZN7lexer_t14parse_non_nameEv
	.type	_ZN7lexer_t14parse_non_nameEv, @function
_ZN7lexer_t14parse_non_nameEv:
.LFB4648:
	.cfi_startproc
	addi	sp,sp,-80	#,,
	.cfi_def_cfa_offset 80
	sd	ra,72(sp)	#,
	sd	s0,64(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,80	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-72(s0)	# .result_ptr, .result_ptr
	sd	a1,-80(s0)	# this, this
# parser.hpp:600:         const auto saved_start_position = cur_position;
	ld	a5,-80(s0)		# tmp210, this
	ld	a5,40(a5)		# tmp211, this_84(D)->cur_position
	sd	a5,-32(s0)	# tmp211, saved_start_position
# parser.hpp:601:         const auto saved_col = cur_col;
	ld	a5,-80(s0)		# tmp212, this
	ld	a5,56(a5)		# tmp213, this_84(D)->cur_col
	sd	a5,-40(s0)	# tmp213, saved_col
# parser.hpp:602:         const auto saved_row = cur_row;
	ld	a5,-80(s0)		# tmp214, this
	ld	a5,48(a5)		# tmp215, this_84(D)->cur_row
	sd	a5,-48(s0)	# tmp215, saved_row
# parser.hpp:603:         current_string.clear();
	ld	a5,-80(s0)		# tmp216, this
	addi	a5,a5,64	#, _1, tmp216
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:604:         const auto c = get_char();
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp217,
	sb	a5,-49(s0)	# tmp217, c
# parser.hpp:605:         if (c == '\0') {
	lbu	a5,-49(s0)	# tmp219, c
	andi	a5,a5,0xff	# tmp220, tmp218
	bne	a5,zero,.L190	#, tmp220,,
# parser.hpp:606:             return parsed_token_t{.token = eof};
	ld	a5,-72(s0)		# tmp221, <retval>
	sd	zero,0(a5)	#, *_95(D)
	sd	zero,8(a5)	#, *_95(D)
	sd	zero,16(a5)	#, *_95(D)
	sd	zero,24(a5)	#, *_95(D)
	sd	zero,32(a5)	#, *_95(D)
	sd	zero,40(a5)	#, *_95(D)
	sd	zero,48(a5)	#, *_95(D)
	sd	zero,56(a5)	#, *_95(D)
	ld	a5,-72(s0)		# tmp222, <retval>
	li	a4,1		# tmp223,
	sd	a4,0(a5)	# tmp223, _95(D)->token
	ld	a5,-72(s0)		# tmp224, <retval>
	addi	a5,a5,40	#, _2, tmp224
	mv	a0,a5	#, _2
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L190:
# parser.hpp:609:         auto parsed = parse_exact(">>=");
	li	a2,0		#,
	lui	a5,%hi(.LC87)	# tmp225,
	addi	a1,a5,%lo(.LC87)	#, tmp225,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:611:         if (parsed == 3) {
	ld	a4,-64(s0)		# tmp226, parsed
	li	a5,3		# tmp227,
	bne	a4,a5,.L192	#, tmp226, tmp227,
# parser.hpp:616:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp228, <retval>
	li	a4,66		# tmp229,
	sd	a4,0(a5)	# tmp229, _95(D)->token
	ld	a5,-72(s0)		# tmp230, <retval>
	ld	a4,-32(s0)		# tmp231, saved_start_position
	sd	a4,8(a5)	# tmp231, _95(D)->start
# parser.hpp:614:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp232, this
	ld	a4,40(a5)		# _3, this_84(D)->cur_position
# parser.hpp:616:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp233, <retval>
	sd	a4,16(a5)	# _3, _95(D)->end
	ld	a5,-72(s0)		# tmp234, <retval>
	ld	a4,-48(s0)		# tmp235, saved_row
	sd	a4,24(a5)	# tmp235, _95(D)->row
	ld	a5,-72(s0)		# tmp236, <retval>
	ld	a4,-40(s0)		# tmp237, saved_col
	sd	a4,32(a5)	# tmp237, _95(D)->col
	ld	a5,-72(s0)		# tmp238, <retval>
	addi	a5,a5,40	#, _4, tmp238
	mv	a0,a5	#, _4
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L192:
# parser.hpp:617:         } else if (parsed == 2) {
	ld	a4,-64(s0)		# tmp239, parsed
	li	a5,2		# tmp240,
	bne	a4,a5,.L193	#, tmp239, tmp240,
# parser.hpp:622:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp241, <retval>
	li	a4,44		# tmp242,
	sd	a4,0(a5)	# tmp242, _95(D)->token
	ld	a5,-72(s0)		# tmp243, <retval>
	ld	a4,-32(s0)		# tmp244, saved_start_position
	sd	a4,8(a5)	# tmp244, _95(D)->start
# parser.hpp:620:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp245, this
	ld	a4,40(a5)		# _5, this_84(D)->cur_position
# parser.hpp:622:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp246, <retval>
	sd	a4,16(a5)	# _5, _95(D)->end
	ld	a5,-72(s0)		# tmp247, <retval>
	ld	a4,-48(s0)		# tmp248, saved_row
	sd	a4,24(a5)	# tmp248, _95(D)->row
	ld	a5,-72(s0)		# tmp249, <retval>
	ld	a4,-40(s0)		# tmp250, saved_col
	sd	a4,32(a5)	# tmp250, _95(D)->col
	ld	a5,-72(s0)		# tmp251, <retval>
	addi	a5,a5,40	#, _6, tmp251
	mv	a0,a5	#, _6
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L193:
# parser.hpp:623:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp252, parsed
	li	a5,1		# tmp253,
	bne	a4,a5,.L194	#, tmp252, tmp253,
# parser.hpp:624:             parsed = parse_exact(">=", parsed);
	ld	a2,-64(s0)		#, parsed
	lui	a5,%hi(.LC88)	# tmp254,
	addi	a1,a5,%lo(.LC88)	#, tmp254,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:625:             if (parsed == 2) {
	ld	a4,-64(s0)		# tmp255, parsed
	li	a5,2		# tmp256,
	bne	a4,a5,.L195	#, tmp255, tmp256,
# parser.hpp:630:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp257, <retval>
	li	a4,50		# tmp258,
	sd	a4,0(a5)	# tmp258, _95(D)->token
	ld	a5,-72(s0)		# tmp259, <retval>
	ld	a4,-32(s0)		# tmp260, saved_start_position
	sd	a4,8(a5)	# tmp260, _95(D)->start
# parser.hpp:628:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp261, this
	ld	a4,40(a5)		# _7, this_84(D)->cur_position
# parser.hpp:630:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp262, <retval>
	sd	a4,16(a5)	# _7, _95(D)->end
	ld	a5,-72(s0)		# tmp263, <retval>
	ld	a4,-48(s0)		# tmp264, saved_row
	sd	a4,24(a5)	# tmp264, _95(D)->row
	ld	a5,-72(s0)		# tmp265, <retval>
	ld	a4,-40(s0)		# tmp266, saved_col
	sd	a4,32(a5)	# tmp266, _95(D)->col
	ld	a5,-72(s0)		# tmp267, <retval>
	addi	a5,a5,40	#, _8, tmp267
	mv	a0,a5	#, _8
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L195:
# parser.hpp:631:             } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp268, parsed
	li	a5,1		# tmp269,
	bne	a4,a5,.L194	#, tmp268, tmp269,
# parser.hpp:636:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp270, <retval>
	li	a4,48		# tmp271,
	sd	a4,0(a5)	# tmp271, _95(D)->token
	ld	a5,-72(s0)		# tmp272, <retval>
	ld	a4,-32(s0)		# tmp273, saved_start_position
	sd	a4,8(a5)	# tmp273, _95(D)->start
# parser.hpp:634:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp274, this
	ld	a4,40(a5)		# _9, this_84(D)->cur_position
# parser.hpp:636:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp275, <retval>
	sd	a4,16(a5)	# _9, _95(D)->end
	ld	a5,-72(s0)		# tmp276, <retval>
	ld	a4,-48(s0)		# tmp277, saved_row
	sd	a4,24(a5)	# tmp277, _95(D)->row
	ld	a5,-72(s0)		# tmp278, <retval>
	ld	a4,-40(s0)		# tmp279, saved_col
	sd	a4,32(a5)	# tmp279, _95(D)->col
	ld	a5,-72(s0)		# tmp280, <retval>
	addi	a5,a5,40	#, _10, tmp280
	mv	a0,a5	#, _10
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L194:
# parser.hpp:640:         parsed = parse_exact("<<=");
	li	a2,0		#,
	lui	a5,%hi(.LC89)	# tmp281,
	addi	a1,a5,%lo(.LC89)	#, tmp281,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:641:         if (parsed == 3) {
	ld	a4,-64(s0)		# tmp282, parsed
	li	a5,3		# tmp283,
	bne	a4,a5,.L196	#, tmp282, tmp283,
# parser.hpp:646:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp284, <retval>
	li	a4,65		# tmp285,
	sd	a4,0(a5)	# tmp285, _95(D)->token
	ld	a5,-72(s0)		# tmp286, <retval>
	ld	a4,-32(s0)		# tmp287, saved_start_position
	sd	a4,8(a5)	# tmp287, _95(D)->start
# parser.hpp:644:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp288, this
	ld	a4,40(a5)		# _11, this_84(D)->cur_position
# parser.hpp:646:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp289, <retval>
	sd	a4,16(a5)	# _11, _95(D)->end
	ld	a5,-72(s0)		# tmp290, <retval>
	ld	a4,-48(s0)		# tmp291, saved_row
	sd	a4,24(a5)	# tmp291, _95(D)->row
	ld	a5,-72(s0)		# tmp292, <retval>
	ld	a4,-40(s0)		# tmp293, saved_col
	sd	a4,32(a5)	# tmp293, _95(D)->col
	ld	a5,-72(s0)		# tmp294, <retval>
	addi	a5,a5,40	#, _12, tmp294
	mv	a0,a5	#, _12
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L196:
# parser.hpp:647:         } else if (parsed == 2) {
	ld	a4,-64(s0)		# tmp295, parsed
	li	a5,2		# tmp296,
	bne	a4,a5,.L197	#, tmp295, tmp296,
# parser.hpp:652:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp297, <retval>
	li	a4,43		# tmp298,
	sd	a4,0(a5)	# tmp298, _95(D)->token
	ld	a5,-72(s0)		# tmp299, <retval>
	ld	a4,-32(s0)		# tmp300, saved_start_position
	sd	a4,8(a5)	# tmp300, _95(D)->start
# parser.hpp:650:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp301, this
	ld	a4,40(a5)		# _13, this_84(D)->cur_position
# parser.hpp:652:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp302, <retval>
	sd	a4,16(a5)	# _13, _95(D)->end
	ld	a5,-72(s0)		# tmp303, <retval>
	ld	a4,-48(s0)		# tmp304, saved_row
	sd	a4,24(a5)	# tmp304, _95(D)->row
	ld	a5,-72(s0)		# tmp305, <retval>
	ld	a4,-40(s0)		# tmp306, saved_col
	sd	a4,32(a5)	# tmp306, _95(D)->col
	ld	a5,-72(s0)		# tmp307, <retval>
	addi	a5,a5,40	#, _14, tmp307
	mv	a0,a5	#, _14
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L197:
# parser.hpp:653:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp308, parsed
	li	a5,1		# tmp309,
	bne	a4,a5,.L198	#, tmp308, tmp309,
# parser.hpp:654:             parsed = parse_exact("<=", parsed);
	ld	a2,-64(s0)		#, parsed
	lui	a5,%hi(.LC90)	# tmp310,
	addi	a1,a5,%lo(.LC90)	#, tmp310,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:655:             if (parsed == 2) {
	ld	a4,-64(s0)		# tmp311, parsed
	li	a5,2		# tmp312,
	bne	a4,a5,.L199	#, tmp311, tmp312,
# parser.hpp:660:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp313, <retval>
	li	a4,49		# tmp314,
	sd	a4,0(a5)	# tmp314, _95(D)->token
	ld	a5,-72(s0)		# tmp315, <retval>
	ld	a4,-32(s0)		# tmp316, saved_start_position
	sd	a4,8(a5)	# tmp316, _95(D)->start
# parser.hpp:658:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp317, this
	ld	a4,40(a5)		# _15, this_84(D)->cur_position
# parser.hpp:660:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp318, <retval>
	sd	a4,16(a5)	# _15, _95(D)->end
	ld	a5,-72(s0)		# tmp319, <retval>
	ld	a4,-48(s0)		# tmp320, saved_row
	sd	a4,24(a5)	# tmp320, _95(D)->row
	ld	a5,-72(s0)		# tmp321, <retval>
	ld	a4,-40(s0)		# tmp322, saved_col
	sd	a4,32(a5)	# tmp322, _95(D)->col
	ld	a5,-72(s0)		# tmp323, <retval>
	addi	a5,a5,40	#, _16, tmp323
	mv	a0,a5	#, _16
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L199:
# parser.hpp:661:             } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp324, parsed
	li	a5,1		# tmp325,
	bne	a4,a5,.L198	#, tmp324, tmp325,
# parser.hpp:666:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp326, <retval>
	li	a4,47		# tmp327,
	sd	a4,0(a5)	# tmp327, _95(D)->token
	ld	a5,-72(s0)		# tmp328, <retval>
	ld	a4,-32(s0)		# tmp329, saved_start_position
	sd	a4,8(a5)	# tmp329, _95(D)->start
# parser.hpp:664:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp330, this
	ld	a4,40(a5)		# _17, this_84(D)->cur_position
# parser.hpp:666:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp331, <retval>
	sd	a4,16(a5)	# _17, _95(D)->end
	ld	a5,-72(s0)		# tmp332, <retval>
	ld	a4,-48(s0)		# tmp333, saved_row
	sd	a4,24(a5)	# tmp333, _95(D)->row
	ld	a5,-72(s0)		# tmp334, <retval>
	ld	a4,-40(s0)		# tmp335, saved_col
	sd	a4,32(a5)	# tmp335, _95(D)->col
	ld	a5,-72(s0)		# tmp336, <retval>
	addi	a5,a5,40	#, _18, tmp336
	mv	a0,a5	#, _18
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L198:
# parser.hpp:670:         parsed = parse_exact("==");
	li	a2,0		#,
	lui	a5,%hi(.LC91)	# tmp337,
	addi	a1,a5,%lo(.LC91)	#, tmp337,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:671:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp338, parsed
	li	a5,2		# tmp339,
	bne	a4,a5,.L200	#, tmp338, tmp339,
# parser.hpp:676:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp340, <retval>
	li	a4,45		# tmp341,
	sd	a4,0(a5)	# tmp341, _95(D)->token
	ld	a5,-72(s0)		# tmp342, <retval>
	ld	a4,-32(s0)		# tmp343, saved_start_position
	sd	a4,8(a5)	# tmp343, _95(D)->start
# parser.hpp:674:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp344, this
	ld	a4,40(a5)		# _19, this_84(D)->cur_position
# parser.hpp:676:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp345, <retval>
	sd	a4,16(a5)	# _19, _95(D)->end
	ld	a5,-72(s0)		# tmp346, <retval>
	ld	a4,-48(s0)		# tmp347, saved_row
	sd	a4,24(a5)	# tmp347, _95(D)->row
	ld	a5,-72(s0)		# tmp348, <retval>
	ld	a4,-40(s0)		# tmp349, saved_col
	sd	a4,32(a5)	# tmp349, _95(D)->col
	ld	a5,-72(s0)		# tmp350, <retval>
	addi	a5,a5,40	#, _20, tmp350
	mv	a0,a5	#, _20
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L200:
# parser.hpp:677:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp351, parsed
	li	a5,1		# tmp352,
	bne	a4,a5,.L201	#, tmp351, tmp352,
# parser.hpp:678:             parsed = parse_exact("=", parsed);
	ld	a2,-64(s0)		#, parsed
	lui	a5,%hi(.LC92)	# tmp353,
	addi	a1,a5,%lo(.LC92)	#, tmp353,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:679:             if (parsed == 1) {
	ld	a4,-64(s0)		# tmp354, parsed
	li	a5,1		# tmp355,
	bne	a4,a5,.L201	#, tmp354, tmp355,
# parser.hpp:684:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp356, <retval>
	li	a4,54		# tmp357,
	sd	a4,0(a5)	# tmp357, _95(D)->token
	ld	a5,-72(s0)		# tmp358, <retval>
	ld	a4,-32(s0)		# tmp359, saved_start_position
	sd	a4,8(a5)	# tmp359, _95(D)->start
# parser.hpp:682:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp360, this
	ld	a4,40(a5)		# _21, this_84(D)->cur_position
# parser.hpp:684:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp361, <retval>
	sd	a4,16(a5)	# _21, _95(D)->end
	ld	a5,-72(s0)		# tmp362, <retval>
	ld	a4,-48(s0)		# tmp363, saved_row
	sd	a4,24(a5)	# tmp363, _95(D)->row
	ld	a5,-72(s0)		# tmp364, <retval>
	ld	a4,-40(s0)		# tmp365, saved_col
	sd	a4,32(a5)	# tmp365, _95(D)->col
	ld	a5,-72(s0)		# tmp366, <retval>
	addi	a5,a5,40	#, _22, tmp366
	mv	a0,a5	#, _22
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L201:
# parser.hpp:688:         parsed = parse_exact("!=");
	li	a2,0		#,
	lui	a5,%hi(.LC93)	# tmp367,
	addi	a1,a5,%lo(.LC93)	#, tmp367,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:689:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp368, parsed
	li	a5,2		# tmp369,
	bne	a4,a5,.L202	#, tmp368, tmp369,
# parser.hpp:694:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp370, <retval>
	li	a4,46		# tmp371,
	sd	a4,0(a5)	# tmp371, _95(D)->token
	ld	a5,-72(s0)		# tmp372, <retval>
	ld	a4,-32(s0)		# tmp373, saved_start_position
	sd	a4,8(a5)	# tmp373, _95(D)->start
# parser.hpp:692:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp374, this
	ld	a4,40(a5)		# _23, this_84(D)->cur_position
# parser.hpp:694:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp375, <retval>
	sd	a4,16(a5)	# _23, _95(D)->end
	ld	a5,-72(s0)		# tmp376, <retval>
	ld	a4,-48(s0)		# tmp377, saved_row
	sd	a4,24(a5)	# tmp377, _95(D)->row
	ld	a5,-72(s0)		# tmp378, <retval>
	ld	a4,-40(s0)		# tmp379, saved_col
	sd	a4,32(a5)	# tmp379, _95(D)->col
	ld	a5,-72(s0)		# tmp380, <retval>
	addi	a5,a5,40	#, _24, tmp380
	mv	a0,a5	#, _24
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L202:
# parser.hpp:695:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp381, parsed
	li	a5,1		# tmp382,
	bne	a4,a5,.L203	#, tmp381, tmp382,
# parser.hpp:701:                                   .data = current_string};
	ld	a5,-72(s0)		# tmp383, <retval>
	sd	zero,0(a5)	#, _95(D)->token
	ld	a5,-72(s0)		# tmp384, <retval>
	ld	a4,-32(s0)		# tmp385, saved_start_position
	sd	a4,8(a5)	# tmp385, _95(D)->start
# parser.hpp:698:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp386, this
	ld	a4,40(a5)		# _25, this_84(D)->cur_position
# parser.hpp:701:                                   .data = current_string};
	ld	a5,-72(s0)		# tmp387, <retval>
	sd	a4,16(a5)	# _25, _95(D)->end
	ld	a5,-72(s0)		# tmp388, <retval>
	ld	a4,-48(s0)		# tmp389, saved_row
	sd	a4,24(a5)	# tmp389, _95(D)->row
	ld	a5,-72(s0)		# tmp390, <retval>
	ld	a4,-40(s0)		# tmp391, saved_col
	sd	a4,32(a5)	# tmp391, _95(D)->col
	ld	a5,-72(s0)		# tmp392, <retval>
	addi	a4,a5,40	#, _26, tmp392
# parser.hpp:701:                                   .data = current_string};
	ld	a5,-80(s0)		# tmp393, this
	addi	a5,a5,64	#, _27, tmp393
# parser.hpp:701:                                   .data = current_string};
	mv	a1,a5	#, _27
	mv	a0,a4	#, _26
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L191		#
.L203:
# parser.hpp:704:         parsed = parse_exact("+=");
	li	a2,0		#,
	lui	a5,%hi(.LC94)	# tmp394,
	addi	a1,a5,%lo(.LC94)	#, tmp394,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:705:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp395, parsed
	li	a5,2		# tmp396,
	bne	a4,a5,.L204	#, tmp395, tmp396,
# parser.hpp:710:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp397, <retval>
	li	a4,55		# tmp398,
	sd	a4,0(a5)	# tmp398, _95(D)->token
	ld	a5,-72(s0)		# tmp399, <retval>
	ld	a4,-32(s0)		# tmp400, saved_start_position
	sd	a4,8(a5)	# tmp400, _95(D)->start
# parser.hpp:708:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp401, this
	ld	a4,40(a5)		# _28, this_84(D)->cur_position
# parser.hpp:710:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp402, <retval>
	sd	a4,16(a5)	# _28, _95(D)->end
	ld	a5,-72(s0)		# tmp403, <retval>
	ld	a4,-48(s0)		# tmp404, saved_row
	sd	a4,24(a5)	# tmp404, _95(D)->row
	ld	a5,-72(s0)		# tmp405, <retval>
	ld	a4,-40(s0)		# tmp406, saved_col
	sd	a4,32(a5)	# tmp406, _95(D)->col
	ld	a5,-72(s0)		# tmp407, <retval>
	addi	a5,a5,40	#, _29, tmp407
	mv	a0,a5	#, _29
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L204:
# parser.hpp:711:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp408, parsed
	li	a5,1		# tmp409,
	bne	a4,a5,.L205	#, tmp408, tmp409,
# parser.hpp:716:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp410, <retval>
	li	a4,32		# tmp411,
	sd	a4,0(a5)	# tmp411, _95(D)->token
	ld	a5,-72(s0)		# tmp412, <retval>
	ld	a4,-32(s0)		# tmp413, saved_start_position
	sd	a4,8(a5)	# tmp413, _95(D)->start
# parser.hpp:714:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp414, this
	ld	a4,40(a5)		# _30, this_84(D)->cur_position
# parser.hpp:716:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp415, <retval>
	sd	a4,16(a5)	# _30, _95(D)->end
	ld	a5,-72(s0)		# tmp416, <retval>
	ld	a4,-48(s0)		# tmp417, saved_row
	sd	a4,24(a5)	# tmp417, _95(D)->row
	ld	a5,-72(s0)		# tmp418, <retval>
	ld	a4,-40(s0)		# tmp419, saved_col
	sd	a4,32(a5)	# tmp419, _95(D)->col
	ld	a5,-72(s0)		# tmp420, <retval>
	addi	a5,a5,40	#, _31, tmp420
	mv	a0,a5	#, _31
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L205:
# parser.hpp:719:         parsed = parse_exact("-=");
	li	a2,0		#,
	lui	a5,%hi(.LC95)	# tmp421,
	addi	a1,a5,%lo(.LC95)	#, tmp421,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:720:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp422, parsed
	li	a5,2		# tmp423,
	bne	a4,a5,.L206	#, tmp422, tmp423,
# parser.hpp:725:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp424, <retval>
	li	a4,56		# tmp425,
	sd	a4,0(a5)	# tmp425, _95(D)->token
	ld	a5,-72(s0)		# tmp426, <retval>
	ld	a4,-32(s0)		# tmp427, saved_start_position
	sd	a4,8(a5)	# tmp427, _95(D)->start
# parser.hpp:723:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp428, this
	ld	a4,40(a5)		# _32, this_84(D)->cur_position
# parser.hpp:725:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp429, <retval>
	sd	a4,16(a5)	# _32, _95(D)->end
	ld	a5,-72(s0)		# tmp430, <retval>
	ld	a4,-48(s0)		# tmp431, saved_row
	sd	a4,24(a5)	# tmp431, _95(D)->row
	ld	a5,-72(s0)		# tmp432, <retval>
	ld	a4,-40(s0)		# tmp433, saved_col
	sd	a4,32(a5)	# tmp433, _95(D)->col
	ld	a5,-72(s0)		# tmp434, <retval>
	addi	a5,a5,40	#, _33, tmp434
	mv	a0,a5	#, _33
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L206:
# parser.hpp:726:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp435, parsed
	li	a5,1		# tmp436,
	bne	a4,a5,.L207	#, tmp435, tmp436,
# parser.hpp:731:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp437, <retval>
	li	a4,33		# tmp438,
	sd	a4,0(a5)	# tmp438, _95(D)->token
	ld	a5,-72(s0)		# tmp439, <retval>
	ld	a4,-32(s0)		# tmp440, saved_start_position
	sd	a4,8(a5)	# tmp440, _95(D)->start
# parser.hpp:729:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp441, this
	ld	a4,40(a5)		# _34, this_84(D)->cur_position
# parser.hpp:731:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp442, <retval>
	sd	a4,16(a5)	# _34, _95(D)->end
	ld	a5,-72(s0)		# tmp443, <retval>
	ld	a4,-48(s0)		# tmp444, saved_row
	sd	a4,24(a5)	# tmp444, _95(D)->row
	ld	a5,-72(s0)		# tmp445, <retval>
	ld	a4,-40(s0)		# tmp446, saved_col
	sd	a4,32(a5)	# tmp446, _95(D)->col
	ld	a5,-72(s0)		# tmp447, <retval>
	addi	a5,a5,40	#, _35, tmp447
	mv	a0,a5	#, _35
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L207:
# parser.hpp:734:         parsed = parse_exact("**=");
	li	a2,0		#,
	lui	a5,%hi(.LC96)	# tmp448,
	addi	a1,a5,%lo(.LC96)	#, tmp448,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:735:         if (parsed == 3) {
	ld	a4,-64(s0)		# tmp449, parsed
	li	a5,3		# tmp450,
	bne	a4,a5,.L208	#, tmp449, tmp450,
# parser.hpp:740:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp451, <retval>
	li	a4,60		# tmp452,
	sd	a4,0(a5)	# tmp452, _95(D)->token
	ld	a5,-72(s0)		# tmp453, <retval>
	ld	a4,-32(s0)		# tmp454, saved_start_position
	sd	a4,8(a5)	# tmp454, _95(D)->start
# parser.hpp:738:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp455, this
	ld	a4,40(a5)		# _36, this_84(D)->cur_position
# parser.hpp:740:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp456, <retval>
	sd	a4,16(a5)	# _36, _95(D)->end
	ld	a5,-72(s0)		# tmp457, <retval>
	ld	a4,-48(s0)		# tmp458, saved_row
	sd	a4,24(a5)	# tmp458, _95(D)->row
	ld	a5,-72(s0)		# tmp459, <retval>
	ld	a4,-40(s0)		# tmp460, saved_col
	sd	a4,32(a5)	# tmp460, _95(D)->col
	ld	a5,-72(s0)		# tmp461, <retval>
	addi	a5,a5,40	#, _37, tmp461
	mv	a0,a5	#, _37
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L208:
# parser.hpp:741:         } else if (parsed == 2) {
	ld	a4,-64(s0)		# tmp462, parsed
	li	a5,2		# tmp463,
	bne	a4,a5,.L209	#, tmp462, tmp463,
# parser.hpp:746:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp464, <retval>
	li	a4,37		# tmp465,
	sd	a4,0(a5)	# tmp465, _95(D)->token
	ld	a5,-72(s0)		# tmp466, <retval>
	ld	a4,-32(s0)		# tmp467, saved_start_position
	sd	a4,8(a5)	# tmp467, _95(D)->start
# parser.hpp:744:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp468, this
	ld	a4,40(a5)		# _38, this_84(D)->cur_position
# parser.hpp:746:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp469, <retval>
	sd	a4,16(a5)	# _38, _95(D)->end
	ld	a5,-72(s0)		# tmp470, <retval>
	ld	a4,-48(s0)		# tmp471, saved_row
	sd	a4,24(a5)	# tmp471, _95(D)->row
	ld	a5,-72(s0)		# tmp472, <retval>
	ld	a4,-40(s0)		# tmp473, saved_col
	sd	a4,32(a5)	# tmp473, _95(D)->col
	ld	a5,-72(s0)		# tmp474, <retval>
	addi	a5,a5,40	#, _39, tmp474
	mv	a0,a5	#, _39
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L209:
# parser.hpp:747:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp475, parsed
	li	a5,1		# tmp476,
	bne	a4,a5,.L210	#, tmp475, tmp476,
# parser.hpp:748:             parsed = parse_exact("*=", parsed);
	ld	a2,-64(s0)		#, parsed
	lui	a5,%hi(.LC97)	# tmp477,
	addi	a1,a5,%lo(.LC97)	#, tmp477,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:749:             if (parsed == 2) {
	ld	a4,-64(s0)		# tmp478, parsed
	li	a5,2		# tmp479,
	bne	a4,a5,.L211	#, tmp478, tmp479,
# parser.hpp:754:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp480, <retval>
	li	a4,57		# tmp481,
	sd	a4,0(a5)	# tmp481, _95(D)->token
	ld	a5,-72(s0)		# tmp482, <retval>
	ld	a4,-32(s0)		# tmp483, saved_start_position
	sd	a4,8(a5)	# tmp483, _95(D)->start
# parser.hpp:752:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp484, this
	ld	a4,40(a5)		# _40, this_84(D)->cur_position
# parser.hpp:754:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp485, <retval>
	sd	a4,16(a5)	# _40, _95(D)->end
	ld	a5,-72(s0)		# tmp486, <retval>
	ld	a4,-48(s0)		# tmp487, saved_row
	sd	a4,24(a5)	# tmp487, _95(D)->row
	ld	a5,-72(s0)		# tmp488, <retval>
	ld	a4,-40(s0)		# tmp489, saved_col
	sd	a4,32(a5)	# tmp489, _95(D)->col
	ld	a5,-72(s0)		# tmp490, <retval>
	addi	a5,a5,40	#, _41, tmp490
	mv	a0,a5	#, _41
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L211:
# parser.hpp:755:             } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp491, parsed
	li	a5,1		# tmp492,
	bne	a4,a5,.L210	#, tmp491, tmp492,
# parser.hpp:760:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp493, <retval>
	li	a4,34		# tmp494,
	sd	a4,0(a5)	# tmp494, _95(D)->token
	ld	a5,-72(s0)		# tmp495, <retval>
	ld	a4,-32(s0)		# tmp496, saved_start_position
	sd	a4,8(a5)	# tmp496, _95(D)->start
# parser.hpp:758:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp497, this
	ld	a4,40(a5)		# _42, this_84(D)->cur_position
# parser.hpp:760:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp498, <retval>
	sd	a4,16(a5)	# _42, _95(D)->end
	ld	a5,-72(s0)		# tmp499, <retval>
	ld	a4,-48(s0)		# tmp500, saved_row
	sd	a4,24(a5)	# tmp500, _95(D)->row
	ld	a5,-72(s0)		# tmp501, <retval>
	ld	a4,-40(s0)		# tmp502, saved_col
	sd	a4,32(a5)	# tmp502, _95(D)->col
	ld	a5,-72(s0)		# tmp503, <retval>
	addi	a5,a5,40	#, _43, tmp503
	mv	a0,a5	#, _43
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L210:
# parser.hpp:764:         parsed = parse_exact("//=");
	li	a2,0		#,
	lui	a5,%hi(.LC98)	# tmp504,
	addi	a1,a5,%lo(.LC98)	#, tmp504,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:765:         if (parsed == 3) {
	ld	a4,-64(s0)		# tmp505, parsed
	li	a5,3		# tmp506,
	bne	a4,a5,.L212	#, tmp505, tmp506,
# parser.hpp:770:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp507, <retval>
	li	a4,61		# tmp508,
	sd	a4,0(a5)	# tmp508, _95(D)->token
	ld	a5,-72(s0)		# tmp509, <retval>
	ld	a4,-32(s0)		# tmp510, saved_start_position
	sd	a4,8(a5)	# tmp510, _95(D)->start
# parser.hpp:768:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp511, this
	ld	a4,40(a5)		# _44, this_84(D)->cur_position
# parser.hpp:770:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp512, <retval>
	sd	a4,16(a5)	# _44, _95(D)->end
	ld	a5,-72(s0)		# tmp513, <retval>
	ld	a4,-48(s0)		# tmp514, saved_row
	sd	a4,24(a5)	# tmp514, _95(D)->row
	ld	a5,-72(s0)		# tmp515, <retval>
	ld	a4,-40(s0)		# tmp516, saved_col
	sd	a4,32(a5)	# tmp516, _95(D)->col
	ld	a5,-72(s0)		# tmp517, <retval>
	addi	a5,a5,40	#, _45, tmp517
	mv	a0,a5	#, _45
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L212:
# parser.hpp:771:         } else if (parsed == 2) {
	ld	a4,-64(s0)		# tmp518, parsed
	li	a5,2		# tmp519,
	bne	a4,a5,.L213	#, tmp518, tmp519,
# parser.hpp:776:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp520, <retval>
	li	a4,38		# tmp521,
	sd	a4,0(a5)	# tmp521, _95(D)->token
	ld	a5,-72(s0)		# tmp522, <retval>
	ld	a4,-32(s0)		# tmp523, saved_start_position
	sd	a4,8(a5)	# tmp523, _95(D)->start
# parser.hpp:774:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp524, this
	ld	a4,40(a5)		# _46, this_84(D)->cur_position
# parser.hpp:776:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp525, <retval>
	sd	a4,16(a5)	# _46, _95(D)->end
	ld	a5,-72(s0)		# tmp526, <retval>
	ld	a4,-48(s0)		# tmp527, saved_row
	sd	a4,24(a5)	# tmp527, _95(D)->row
	ld	a5,-72(s0)		# tmp528, <retval>
	ld	a4,-40(s0)		# tmp529, saved_col
	sd	a4,32(a5)	# tmp529, _95(D)->col
	ld	a5,-72(s0)		# tmp530, <retval>
	addi	a5,a5,40	#, _47, tmp530
	mv	a0,a5	#, _47
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L213:
# parser.hpp:777:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp531, parsed
	li	a5,1		# tmp532,
	bne	a4,a5,.L214	#, tmp531, tmp532,
# parser.hpp:778:             parsed = parse_exact("/=", parsed);
	ld	a2,-64(s0)		#, parsed
	lui	a5,%hi(.LC99)	# tmp533,
	addi	a1,a5,%lo(.LC99)	#, tmp533,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:779:             if (parsed == 2) {
	ld	a4,-64(s0)		# tmp534, parsed
	li	a5,2		# tmp535,
	bne	a4,a5,.L215	#, tmp534, tmp535,
# parser.hpp:784:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp536, <retval>
	li	a4,58		# tmp537,
	sd	a4,0(a5)	# tmp537, _95(D)->token
	ld	a5,-72(s0)		# tmp538, <retval>
	ld	a4,-32(s0)		# tmp539, saved_start_position
	sd	a4,8(a5)	# tmp539, _95(D)->start
# parser.hpp:782:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp540, this
	ld	a4,40(a5)		# _48, this_84(D)->cur_position
# parser.hpp:784:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp541, <retval>
	sd	a4,16(a5)	# _48, _95(D)->end
	ld	a5,-72(s0)		# tmp542, <retval>
	ld	a4,-48(s0)		# tmp543, saved_row
	sd	a4,24(a5)	# tmp543, _95(D)->row
	ld	a5,-72(s0)		# tmp544, <retval>
	ld	a4,-40(s0)		# tmp545, saved_col
	sd	a4,32(a5)	# tmp545, _95(D)->col
	ld	a5,-72(s0)		# tmp546, <retval>
	addi	a5,a5,40	#, _49, tmp546
	mv	a0,a5	#, _49
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L215:
# parser.hpp:790:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp547, <retval>
	li	a4,35		# tmp548,
	sd	a4,0(a5)	# tmp548, _95(D)->token
	ld	a5,-72(s0)		# tmp549, <retval>
	ld	a4,-32(s0)		# tmp550, saved_start_position
	sd	a4,8(a5)	# tmp550, _95(D)->start
# parser.hpp:788:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp551, this
	ld	a4,40(a5)		# _50, this_84(D)->cur_position
# parser.hpp:790:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp552, <retval>
	sd	a4,16(a5)	# _50, _95(D)->end
	ld	a5,-72(s0)		# tmp553, <retval>
	ld	a4,-48(s0)		# tmp554, saved_row
	sd	a4,24(a5)	# tmp554, _95(D)->row
	ld	a5,-72(s0)		# tmp555, <retval>
	ld	a4,-40(s0)		# tmp556, saved_col
	sd	a4,32(a5)	# tmp556, _95(D)->col
	ld	a5,-72(s0)		# tmp557, <retval>
	addi	a5,a5,40	#, _51, tmp557
	mv	a0,a5	#, _51
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L214:
# parser.hpp:793:         parsed = parse_exact("%=");
	li	a2,0		#,
	lui	a5,%hi(.LC100)	# tmp558,
	addi	a1,a5,%lo(.LC100)	#, tmp558,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:794:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp559, parsed
	li	a5,2		# tmp560,
	bne	a4,a5,.L216	#, tmp559, tmp560,
# parser.hpp:799:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp561, <retval>
	li	a4,59		# tmp562,
	sd	a4,0(a5)	# tmp562, _95(D)->token
	ld	a5,-72(s0)		# tmp563, <retval>
	ld	a4,-32(s0)		# tmp564, saved_start_position
	sd	a4,8(a5)	# tmp564, _95(D)->start
# parser.hpp:797:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp565, this
	ld	a4,40(a5)		# _52, this_84(D)->cur_position
# parser.hpp:799:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp566, <retval>
	sd	a4,16(a5)	# _52, _95(D)->end
	ld	a5,-72(s0)		# tmp567, <retval>
	ld	a4,-48(s0)		# tmp568, saved_row
	sd	a4,24(a5)	# tmp568, _95(D)->row
	ld	a5,-72(s0)		# tmp569, <retval>
	ld	a4,-40(s0)		# tmp570, saved_col
	sd	a4,32(a5)	# tmp570, _95(D)->col
	ld	a5,-72(s0)		# tmp571, <retval>
	addi	a5,a5,40	#, _53, tmp571
	mv	a0,a5	#, _53
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L216:
# parser.hpp:800:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp572, parsed
	li	a5,1		# tmp573,
	bne	a4,a5,.L217	#, tmp572, tmp573,
# parser.hpp:805:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp574, <retval>
	li	a4,36		# tmp575,
	sd	a4,0(a5)	# tmp575, _95(D)->token
	ld	a5,-72(s0)		# tmp576, <retval>
	ld	a4,-32(s0)		# tmp577, saved_start_position
	sd	a4,8(a5)	# tmp577, _95(D)->start
# parser.hpp:803:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp578, this
	ld	a4,40(a5)		# _54, this_84(D)->cur_position
# parser.hpp:805:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp579, <retval>
	sd	a4,16(a5)	# _54, _95(D)->end
	ld	a5,-72(s0)		# tmp580, <retval>
	ld	a4,-48(s0)		# tmp581, saved_row
	sd	a4,24(a5)	# tmp581, _95(D)->row
	ld	a5,-72(s0)		# tmp582, <retval>
	ld	a4,-40(s0)		# tmp583, saved_col
	sd	a4,32(a5)	# tmp583, _95(D)->col
	ld	a5,-72(s0)		# tmp584, <retval>
	addi	a5,a5,40	#, _55, tmp584
	mv	a0,a5	#, _55
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L217:
# parser.hpp:808:         parsed = parse_exact("|=");
	li	a2,0		#,
	lui	a5,%hi(.LC101)	# tmp585,
	addi	a1,a5,%lo(.LC101)	#, tmp585,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:809:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp586, parsed
	li	a5,2		# tmp587,
	bne	a4,a5,.L218	#, tmp586, tmp587,
# parser.hpp:814:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp588, <retval>
	li	a4,63		# tmp589,
	sd	a4,0(a5)	# tmp589, _95(D)->token
	ld	a5,-72(s0)		# tmp590, <retval>
	ld	a4,-32(s0)		# tmp591, saved_start_position
	sd	a4,8(a5)	# tmp591, _95(D)->start
# parser.hpp:812:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp592, this
	ld	a4,40(a5)		# _56, this_84(D)->cur_position
# parser.hpp:814:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp593, <retval>
	sd	a4,16(a5)	# _56, _95(D)->end
	ld	a5,-72(s0)		# tmp594, <retval>
	ld	a4,-48(s0)		# tmp595, saved_row
	sd	a4,24(a5)	# tmp595, _95(D)->row
	ld	a5,-72(s0)		# tmp596, <retval>
	ld	a4,-40(s0)		# tmp597, saved_col
	sd	a4,32(a5)	# tmp597, _95(D)->col
	ld	a5,-72(s0)		# tmp598, <retval>
	addi	a5,a5,40	#, _57, tmp598
	mv	a0,a5	#, _57
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L218:
# parser.hpp:815:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp599, parsed
	li	a5,1		# tmp600,
	bne	a4,a5,.L219	#, tmp599, tmp600,
# parser.hpp:820:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp601, <retval>
	li	a4,41		# tmp602,
	sd	a4,0(a5)	# tmp602, _95(D)->token
	ld	a5,-72(s0)		# tmp603, <retval>
	ld	a4,-32(s0)		# tmp604, saved_start_position
	sd	a4,8(a5)	# tmp604, _95(D)->start
# parser.hpp:818:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp605, this
	ld	a4,40(a5)		# _58, this_84(D)->cur_position
# parser.hpp:820:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp606, <retval>
	sd	a4,16(a5)	# _58, _95(D)->end
	ld	a5,-72(s0)		# tmp607, <retval>
	ld	a4,-48(s0)		# tmp608, saved_row
	sd	a4,24(a5)	# tmp608, _95(D)->row
	ld	a5,-72(s0)		# tmp609, <retval>
	ld	a4,-40(s0)		# tmp610, saved_col
	sd	a4,32(a5)	# tmp610, _95(D)->col
	ld	a5,-72(s0)		# tmp611, <retval>
	addi	a5,a5,40	#, _59, tmp611
	mv	a0,a5	#, _59
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L219:
# parser.hpp:823:         parsed = parse_exact("&=");
	li	a2,0		#,
	lui	a5,%hi(.LC102)	# tmp612,
	addi	a1,a5,%lo(.LC102)	#, tmp612,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:824:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp613, parsed
	li	a5,2		# tmp614,
	bne	a4,a5,.L220	#, tmp613, tmp614,
# parser.hpp:829:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp615, <retval>
	li	a4,62		# tmp616,
	sd	a4,0(a5)	# tmp616, _95(D)->token
	ld	a5,-72(s0)		# tmp617, <retval>
	ld	a4,-32(s0)		# tmp618, saved_start_position
	sd	a4,8(a5)	# tmp618, _95(D)->start
# parser.hpp:827:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp619, this
	ld	a4,40(a5)		# _60, this_84(D)->cur_position
# parser.hpp:829:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp620, <retval>
	sd	a4,16(a5)	# _60, _95(D)->end
	ld	a5,-72(s0)		# tmp621, <retval>
	ld	a4,-48(s0)		# tmp622, saved_row
	sd	a4,24(a5)	# tmp622, _95(D)->row
	ld	a5,-72(s0)		# tmp623, <retval>
	ld	a4,-40(s0)		# tmp624, saved_col
	sd	a4,32(a5)	# tmp624, _95(D)->col
	ld	a5,-72(s0)		# tmp625, <retval>
	addi	a5,a5,40	#, _61, tmp625
	mv	a0,a5	#, _61
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L220:
# parser.hpp:830:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp626, parsed
	li	a5,1		# tmp627,
	bne	a4,a5,.L221	#, tmp626, tmp627,
# parser.hpp:835:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp628, <retval>
	li	a4,40		# tmp629,
	sd	a4,0(a5)	# tmp629, _95(D)->token
	ld	a5,-72(s0)		# tmp630, <retval>
	ld	a4,-32(s0)		# tmp631, saved_start_position
	sd	a4,8(a5)	# tmp631, _95(D)->start
# parser.hpp:833:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp632, this
	ld	a4,40(a5)		# _62, this_84(D)->cur_position
# parser.hpp:835:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp633, <retval>
	sd	a4,16(a5)	# _62, _95(D)->end
	ld	a5,-72(s0)		# tmp634, <retval>
	ld	a4,-48(s0)		# tmp635, saved_row
	sd	a4,24(a5)	# tmp635, _95(D)->row
	ld	a5,-72(s0)		# tmp636, <retval>
	ld	a4,-40(s0)		# tmp637, saved_col
	sd	a4,32(a5)	# tmp637, _95(D)->col
	ld	a5,-72(s0)		# tmp638, <retval>
	addi	a5,a5,40	#, _63, tmp638
	mv	a0,a5	#, _63
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L221:
# parser.hpp:838:         parsed = parse_exact("^=");
	li	a2,0		#,
	lui	a5,%hi(.LC103)	# tmp639,
	addi	a1,a5,%lo(.LC103)	#, tmp639,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:839:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp640, parsed
	li	a5,2		# tmp641,
	bne	a4,a5,.L222	#, tmp640, tmp641,
# parser.hpp:844:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp642, <retval>
	li	a4,64		# tmp643,
	sd	a4,0(a5)	# tmp643, _95(D)->token
	ld	a5,-72(s0)		# tmp644, <retval>
	ld	a4,-32(s0)		# tmp645, saved_start_position
	sd	a4,8(a5)	# tmp645, _95(D)->start
# parser.hpp:842:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp646, this
	ld	a4,40(a5)		# _64, this_84(D)->cur_position
# parser.hpp:844:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp647, <retval>
	sd	a4,16(a5)	# _64, _95(D)->end
	ld	a5,-72(s0)		# tmp648, <retval>
	ld	a4,-48(s0)		# tmp649, saved_row
	sd	a4,24(a5)	# tmp649, _95(D)->row
	ld	a5,-72(s0)		# tmp650, <retval>
	ld	a4,-40(s0)		# tmp651, saved_col
	sd	a4,32(a5)	# tmp651, _95(D)->col
	ld	a5,-72(s0)		# tmp652, <retval>
	addi	a5,a5,40	#, _65, tmp652
	mv	a0,a5	#, _65
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L222:
# parser.hpp:845:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp653, parsed
	li	a5,1		# tmp654,
	bne	a4,a5,.L223	#, tmp653, tmp654,
# parser.hpp:850:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp655, <retval>
	li	a4,42		# tmp656,
	sd	a4,0(a5)	# tmp656, _95(D)->token
	ld	a5,-72(s0)		# tmp657, <retval>
	ld	a4,-32(s0)		# tmp658, saved_start_position
	sd	a4,8(a5)	# tmp658, _95(D)->start
# parser.hpp:848:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp659, this
	ld	a4,40(a5)		# _66, this_84(D)->cur_position
# parser.hpp:850:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp660, <retval>
	sd	a4,16(a5)	# _66, _95(D)->end
	ld	a5,-72(s0)		# tmp661, <retval>
	ld	a4,-48(s0)		# tmp662, saved_row
	sd	a4,24(a5)	# tmp662, _95(D)->row
	ld	a5,-72(s0)		# tmp663, <retval>
	ld	a4,-40(s0)		# tmp664, saved_col
	sd	a4,32(a5)	# tmp664, _95(D)->col
	ld	a5,-72(s0)		# tmp665, <retval>
	addi	a5,a5,40	#, _67, tmp665
	mv	a0,a5	#, _67
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L223:
# parser.hpp:853:         parsed = parse_exact("~=");
	li	a2,0		#,
	lui	a5,%hi(.LC104)	# tmp666,
	addi	a1,a5,%lo(.LC104)	#, tmp666,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t11parse_exactEPKcm		#
	sd	a0,-64(s0)	#, parsed
# parser.hpp:854:         if (parsed == 2) {
	ld	a4,-64(s0)		# tmp667, parsed
	li	a5,2		# tmp668,
	bne	a4,a5,.L224	#, tmp667, tmp668,
# parser.hpp:859:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp669, <retval>
	li	a4,67		# tmp670,
	sd	a4,0(a5)	# tmp670, _95(D)->token
	ld	a5,-72(s0)		# tmp671, <retval>
	ld	a4,-32(s0)		# tmp672, saved_start_position
	sd	a4,8(a5)	# tmp672, _95(D)->start
# parser.hpp:857:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp673, this
	ld	a4,40(a5)		# _68, this_84(D)->cur_position
# parser.hpp:859:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp674, <retval>
	sd	a4,16(a5)	# _68, _95(D)->end
	ld	a5,-72(s0)		# tmp675, <retval>
	ld	a4,-48(s0)		# tmp676, saved_row
	sd	a4,24(a5)	# tmp676, _95(D)->row
	ld	a5,-72(s0)		# tmp677, <retval>
	ld	a4,-40(s0)		# tmp678, saved_col
	sd	a4,32(a5)	# tmp678, _95(D)->col
	ld	a5,-72(s0)		# tmp679, <retval>
	addi	a5,a5,40	#, _69, tmp679
	mv	a0,a5	#, _69
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L224:
# parser.hpp:860:         } else if (parsed == 1) {
	ld	a4,-64(s0)		# tmp680, parsed
	li	a5,1		# tmp681,
	bne	a4,a5,.L225	#, tmp680, tmp681,
# parser.hpp:865:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp682, <retval>
	li	a4,39		# tmp683,
	sd	a4,0(a5)	# tmp683, _95(D)->token
	ld	a5,-72(s0)		# tmp684, <retval>
	ld	a4,-32(s0)		# tmp685, saved_start_position
	sd	a4,8(a5)	# tmp685, _95(D)->start
# parser.hpp:863:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp686, this
	ld	a4,40(a5)		# _70, this_84(D)->cur_position
# parser.hpp:865:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp687, <retval>
	sd	a4,16(a5)	# _70, _95(D)->end
	ld	a5,-72(s0)		# tmp688, <retval>
	ld	a4,-48(s0)		# tmp689, saved_row
	sd	a4,24(a5)	# tmp689, _95(D)->row
	ld	a5,-72(s0)		# tmp690, <retval>
	ld	a4,-40(s0)		# tmp691, saved_col
	sd	a4,32(a5)	# tmp691, _95(D)->col
	ld	a5,-72(s0)		# tmp692, <retval>
	addi	a5,a5,40	#, _71, tmp692
	mv	a0,a5	#, _71
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L225:
# parser.hpp:870:         token_t parsed_one_char_token = UNDEFINED;
	sd	zero,-24(s0)	#, parsed_one_char_token
# parser.hpp:871:         switch (c) {
	lbu	a5,-49(s0)	# tmp693, c
	sext.w	a5,a5	# _72, tmp693
# parser.hpp:871:         switch (c) {
	addiw	a3,a5,-34	#, tmp694, _72
	sext.w	a4,a3	# tmp695, tmp694
	li	a5,91		# tmp696,
	bgtu	a4,a5,.L226	#, tmp695, tmp696,
	slli	a5,a3,32	#, tmp697, tmp694
	srli	a5,a5,32	#, tmp697, tmp697
	slli	a4,a5,2	#, tmp698, tmp697
	lui	a5,%hi(.L228)	# tmp701,
	addi	a5,a5,%lo(.L228)	# tmp700, tmp701,
	add	a5,a4,a5	# tmp700, tmp699, tmp698
	lw	a5,0(a5)		# tmp703,
	jr	a5		# tmp702
	.section	.rodata._ZN7lexer_t14parse_non_nameEv,"aG",@progbits,_ZN7lexer_t14parse_non_nameEv,comdat
	.align	2
	.align	2
.L228:
	.word	.L240
	.word	.L239
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L238
	.word	.L237
	.word	.L236
	.word	.L226
	.word	.L226
	.word	.L235
	.word	.L226
	.word	.L234
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L233
	.word	.L232
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L231
	.word	.L226
	.word	.L230
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L226
	.word	.L229
	.word	.L226
	.word	.L227
	.section	.text._ZN7lexer_t14parse_non_nameEv,"axG",@progbits,_ZN7lexer_t14parse_non_nameEv,comdat
.L235:
# parser.hpp:873:                 parsed_one_char_token = COMMA;
	li	a5,68		# tmp704,
	sd	a5,-24(s0)	# tmp704, parsed_one_char_token
# parser.hpp:874:                 break;
	j	.L241		#
.L234:
# parser.hpp:876:                 parsed_one_char_token = DOT;
	li	a5,69		# tmp705,
	sd	a5,-24(s0)	# tmp705, parsed_one_char_token
# parser.hpp:877:                 break;
	j	.L241		#
.L233:
# parser.hpp:879:                 parsed_one_char_token = COLON;
	li	a5,70		# tmp706,
	sd	a5,-24(s0)	# tmp706, parsed_one_char_token
# parser.hpp:880:                 break;
	j	.L241		#
.L232:
# parser.hpp:882:                 parsed_one_char_token = SEMICOLON;
	li	a5,71		# tmp707,
	sd	a5,-24(s0)	# tmp707, parsed_one_char_token
# parser.hpp:883:                 break;
	j	.L241		#
.L237:
# parser.hpp:885:                 parsed_one_char_token = LPAREN;
	li	a5,72		# tmp708,
	sd	a5,-24(s0)	# tmp708, parsed_one_char_token
# parser.hpp:886:                 break;
	j	.L241		#
.L236:
# parser.hpp:888:                 parsed_one_char_token = RPAREN;
	li	a5,73		# tmp709,
	sd	a5,-24(s0)	# tmp709, parsed_one_char_token
# parser.hpp:889:                 break;
	j	.L241		#
.L231:
# parser.hpp:891:                 parsed_one_char_token = LBRACKET;
	li	a5,74		# tmp710,
	sd	a5,-24(s0)	# tmp710, parsed_one_char_token
# parser.hpp:892:                 break;
	j	.L241		#
.L230:
# parser.hpp:894:                 parsed_one_char_token = RBRACKET;
	li	a5,75		# tmp711,
	sd	a5,-24(s0)	# tmp711, parsed_one_char_token
# parser.hpp:895:                 break;
	j	.L241		#
.L229:
# parser.hpp:897:                 parsed_one_char_token = LBRACE;
	li	a5,76		# tmp712,
	sd	a5,-24(s0)	# tmp712, parsed_one_char_token
# parser.hpp:898:                 break;
	j	.L241		#
.L227:
# parser.hpp:900:                 parsed_one_char_token = RBRACE;
	li	a5,77		# tmp713,
	sd	a5,-24(s0)	# tmp713, parsed_one_char_token
# parser.hpp:901:                 break;
	j	.L241		#
.L240:
# parser.hpp:903:                 parsed_one_char_token = DOUBLE_QUOTE;
	li	a5,78		# tmp714,
	sd	a5,-24(s0)	# tmp714, parsed_one_char_token
# parser.hpp:904:                 break;
	j	.L241		#
.L238:
# parser.hpp:906:                 parsed_one_char_token = SINGLE_QUOTE;
	li	a5,79		# tmp715,
	sd	a5,-24(s0)	# tmp715, parsed_one_char_token
# parser.hpp:907:                 break;
	j	.L241		#
.L239:
# parser.hpp:909:                 parsed_one_char_token = HASHTAG_COMMENT;
	li	a5,81		# tmp716,
	sd	a5,-24(s0)	# tmp716, parsed_one_char_token
# parser.hpp:910:                 break;
	j	.L241		#
.L226:
# parser.hpp:912:                 parsed_one_char_token = UNDEFINED;
	sd	zero,-24(s0)	#, parsed_one_char_token
# parser.hpp:913:                 break;
	nop	
.L241:
# parser.hpp:915:         if (parsed_one_char_token == HASHTAG_COMMENT) {
	ld	a4,-24(s0)		# tmp717, parsed_one_char_token
	li	a5,81		# tmp718,
	bne	a4,a5,.L242	#, tmp717, tmp718,
# parser.hpp:916:             return parse_comment();
	ld	a5,-72(s0)		# tmp719, <retval>
	ld	a1,-80(s0)		#, this
	mv	a0,a5	#, tmp719
	call	_ZN7lexer_t13parse_commentEv		#
	j	.L191		#
.L242:
# parser.hpp:918:         if (parsed_one_char_token == DOUBLE_QUOTE ||
	ld	a4,-24(s0)		# tmp720, parsed_one_char_token
	li	a5,78		# tmp721,
	beq	a4,a5,.L243	#, tmp720, tmp721,
# parser.hpp:918:         if (parsed_one_char_token == DOUBLE_QUOTE ||
	ld	a4,-24(s0)		# tmp722, parsed_one_char_token
	li	a5,79		# tmp723,
	bne	a4,a5,.L244	#, tmp722, tmp723,
.L243:
# parser.hpp:920:             return parse_string_unescape();
	ld	a5,-72(s0)		# tmp724, <retval>
	ld	a1,-80(s0)		#, this
	mv	a0,a5	#, tmp724
	call	_ZN7lexer_t21parse_string_unescapeEv		#
	j	.L191		#
.L244:
# parser.hpp:922:         if (parsed_one_char_token != UNDEFINED) {
	ld	a5,-24(s0)		# tmp725, parsed_one_char_token
	beq	a5,zero,.L245	#, tmp725,,
# parser.hpp:923:             advance();
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t7advanceEv		#
# parser.hpp:930:             };
	ld	a5,-72(s0)		# tmp726, <retval>
	ld	a4,-24(s0)		# tmp727, parsed_one_char_token
	sd	a4,0(a5)	# tmp727, _95(D)->token
	ld	a5,-72(s0)		# tmp728, <retval>
	ld	a4,-32(s0)		# tmp729, saved_start_position
	sd	a4,8(a5)	# tmp729, _95(D)->start
# parser.hpp:927:                 .end = cur_position,
	ld	a5,-80(s0)		# tmp730, this
	ld	a4,40(a5)		# _73, this_84(D)->cur_position
# parser.hpp:930:             };
	ld	a5,-72(s0)		# tmp731, <retval>
	sd	a4,16(a5)	# _73, _95(D)->end
	ld	a5,-72(s0)		# tmp732, <retval>
	ld	a4,-48(s0)		# tmp733, saved_row
	sd	a4,24(a5)	# tmp733, _95(D)->row
	ld	a5,-72(s0)		# tmp734, <retval>
	ld	a4,-40(s0)		# tmp735, saved_col
	sd	a4,32(a5)	# tmp735, _95(D)->col
	ld	a5,-72(s0)		# tmp736, <retval>
	addi	a5,a5,40	#, _74, tmp736
	mv	a0,a5	#, _74
	call	_ZN4rstd6stringC1Ev		#
	j	.L191		#
.L245:
# parser.hpp:936:                               .col = saved_col};
	ld	a5,-72(s0)		# tmp737, <retval>
	sd	zero,0(a5)	#, _95(D)->token
	ld	a5,-72(s0)		# tmp738, <retval>
	ld	a4,-32(s0)		# tmp739, saved_start_position
	sd	a4,8(a5)	# tmp739, _95(D)->start
# parser.hpp:934:                               .end = cur_position,
	ld	a5,-80(s0)		# tmp740, this
	ld	a4,40(a5)		# _75, this_84(D)->cur_position
# parser.hpp:936:                               .col = saved_col};
	ld	a5,-72(s0)		# tmp741, <retval>
	sd	a4,16(a5)	# _75, _95(D)->end
	ld	a5,-72(s0)		# tmp742, <retval>
	ld	a4,-48(s0)		# tmp743, saved_row
	sd	a4,24(a5)	# tmp743, _95(D)->row
	ld	a5,-72(s0)		# tmp744, <retval>
	ld	a4,-40(s0)		# tmp745, saved_col
	sd	a4,32(a5)	# tmp745, _95(D)->col
	ld	a5,-72(s0)		# tmp746, <retval>
	addi	a5,a5,40	#, _76, tmp746
	mv	a0,a5	#, _76
	call	_ZN4rstd6stringC1Ev		#
.L191:
# parser.hpp:937:     }
	ld	a0,-72(s0)		#, <retval>
	ld	ra,72(sp)		#,
	.cfi_restore 1
	ld	s0,64(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 80
	addi	sp,sp,80	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4648:
	.size	_ZN7lexer_t14parse_non_nameEv, .-_ZN7lexer_t14parse_non_nameEv
	.section	.rodata
	.align	3
.LC105:
	.string	"and"
	.align	3
.LC106:
	.string	"as"
	.align	3
.LC107:
	.string	"break"
	.align	3
.LC108:
	.string	"bool"
	.align	3
.LC109:
	.string	"continue"
	.align	3
.LC110:
	.string	"dict"
	.align	3
.LC111:
	.string	"def"
	.align	3
.LC112:
	.string	"del"
	.align	3
.LC113:
	.string	"exception"
	.align	3
.LC114:
	.string	"except"
	.align	3
.LC115:
	.string	"from"
	.align	3
.LC116:
	.string	"for"
	.align	3
.LC117:
	.string	"getattr"
	.align	3
.LC118:
	.string	"import"
	.align	3
.LC119:
	.string	"is"
	.align	3
.LC120:
	.string	"in"
	.align	3
.LC121:
	.string	"if"
	.align	3
.LC122:
	.string	"list"
	.align	3
.LC123:
	.string	"len"
	.align	3
.LC124:
	.string	"or"
	.align	3
.LC125:
	.string	"return"
	.align	3
.LC126:
	.string	"setattr"
	.align	3
.LC127:
	.string	"set"
	.align	3
.LC128:
	.string	"yield"
	.section	.text._ZN7lexer_t8next_tokEv,"axG",@progbits,_ZN7lexer_t8next_tokEv,comdat
	.align	1
	.weak	_ZN7lexer_t8next_tokEv
	.type	_ZN7lexer_t8next_tokEv, @function
_ZN7lexer_t8next_tokEv:
.LFB4649:
	.cfi_startproc
	addi	sp,sp,-80	#,,
	.cfi_def_cfa_offset 80
	sd	ra,72(sp)	#,
	sd	s0,64(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,80	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-72(s0)	# .result_ptr, .result_ptr
	sd	a1,-80(s0)	# this, this
# parser.hpp:940:         current_string.clear();
	ld	a5,-80(s0)		# tmp190, this
	addi	a5,a5,64	#, _1, tmp190
	mv	a0,a5	#, _1
	call	_ZN4rstd6string5clearEv		#
# parser.hpp:941:         char c = get_char();
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t8get_charEv		#
	mv	a5,a0	# tmp191,
	sb	a5,-17(s0)	# tmp191, c
# parser.hpp:942:         if (c == '\0') {
	lbu	a5,-17(s0)	# tmp193, c
	andi	a5,a5,0xff	# tmp194, tmp192
	bne	a5,zero,.L247	#, tmp194,,
# parser.hpp:943:             return parsed_token_t{.token = eof};
	ld	a5,-72(s0)		# tmp195, <retval>
	sd	zero,0(a5)	#, *_73(D)
	sd	zero,8(a5)	#, *_73(D)
	sd	zero,16(a5)	#, *_73(D)
	sd	zero,24(a5)	#, *_73(D)
	sd	zero,32(a5)	#, *_73(D)
	sd	zero,40(a5)	#, *_73(D)
	sd	zero,48(a5)	#, *_73(D)
	sd	zero,56(a5)	#, *_73(D)
	ld	a5,-72(s0)		# tmp196, <retval>
	li	a4,1		# tmp197,
	sd	a4,0(a5)	# tmp197, _73(D)->token
	ld	a5,-72(s0)		# tmp198, <retval>
	addi	a5,a5,40	#, _2, tmp198
	mv	a0,a5	#, _2
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L247:
# parser.hpp:946:         auto saved_start_position = cur_position;
	ld	a5,-80(s0)		# tmp199, this
	ld	a5,40(a5)		# tmp200, this_57(D)->cur_position
	sd	a5,-32(s0)	# tmp200, saved_start_position
# parser.hpp:947:         auto saved_col = cur_col;
	ld	a5,-80(s0)		# tmp201, this
	ld	a5,56(a5)		# tmp202, this_57(D)->cur_col
	sd	a5,-40(s0)	# tmp202, saved_col
# parser.hpp:948:         auto saved_row = cur_row;
	ld	a5,-80(s0)		# tmp203, this
	ld	a5,48(a5)		# tmp204, this_57(D)->cur_row
	sd	a5,-48(s0)	# tmp204, saved_row
# parser.hpp:950:         auto parsed = parse_word("and");
	li	a2,0		#,
	lui	a5,%hi(.LC105)	# tmp205,
	addi	a1,a5,%lo(.LC105)	#, tmp205,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:951:         if (parsed > 3) {
	ld	a4,-56(s0)		# tmp206, parsed
	li	a5,3		# tmp207,
	bleu	a4,a5,.L249	#, tmp206, tmp207,
# parser.hpp:953:                               parsed);
	ld	a0,-72(s0)		# tmp208, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L249:
# parser.hpp:954:         } else if (parsed == 3) {
	ld	a4,-56(s0)		# tmp209, parsed
	li	a5,3		# tmp210,
	bne	a4,a5,.L250	#, tmp209, tmp210,
# parser.hpp:961:             };
	ld	a5,-72(s0)		# tmp211, <retval>
	li	a4,7		# tmp212,
	sd	a4,0(a5)	# tmp212, _73(D)->token
	ld	a5,-72(s0)		# tmp213, <retval>
	ld	a4,-32(s0)		# tmp214, saved_start_position
	sd	a4,8(a5)	# tmp214, _73(D)->start
# parser.hpp:958:                 .end = cur_position,
	ld	a5,-80(s0)		# tmp215, this
	ld	a4,40(a5)		# _3, this_57(D)->cur_position
# parser.hpp:961:             };
	ld	a5,-72(s0)		# tmp216, <retval>
	sd	a4,16(a5)	# _3, _73(D)->end
	ld	a5,-72(s0)		# tmp217, <retval>
	ld	a4,-48(s0)		# tmp218, saved_row
	sd	a4,24(a5)	# tmp218, _73(D)->row
	ld	a5,-72(s0)		# tmp219, <retval>
	ld	a4,-40(s0)		# tmp220, saved_col
	sd	a4,32(a5)	# tmp220, _73(D)->col
	ld	a5,-72(s0)		# tmp221, <retval>
	addi	a5,a5,40	#, _4, tmp221
	mv	a0,a5	#, _4
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L250:
# parser.hpp:962:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp222, parsed
	li	a5,1		# tmp223,
	bne	a4,a5,.L251	#, tmp222, tmp223,
# parser.hpp:963:             if (parsed = parse_word("as", parsed); parsed == 2) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC106)	# tmp224,
	addi	a1,a5,%lo(.LC106)	#, tmp224,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:963:             if (parsed = parse_word("as", parsed); parsed == 2) {
	ld	a4,-56(s0)		# tmp225, parsed
	li	a5,2		# tmp226,
	bne	a4,a5,.L252	#, tmp225, tmp226,
# parser.hpp:970:                 };
	ld	a5,-72(s0)		# tmp227, <retval>
	li	a4,8		# tmp228,
	sd	a4,0(a5)	# tmp228, _73(D)->token
	ld	a5,-72(s0)		# tmp229, <retval>
	ld	a4,-32(s0)		# tmp230, saved_start_position
	sd	a4,8(a5)	# tmp230, _73(D)->start
# parser.hpp:967:                     .end = cur_position,
	ld	a5,-80(s0)		# tmp231, this
	ld	a4,40(a5)		# _5, this_57(D)->cur_position
# parser.hpp:970:                 };
	ld	a5,-72(s0)		# tmp232, <retval>
	sd	a4,16(a5)	# _5, _73(D)->end
	ld	a5,-72(s0)		# tmp233, <retval>
	ld	a4,-48(s0)		# tmp234, saved_row
	sd	a4,24(a5)	# tmp234, _73(D)->row
	ld	a5,-72(s0)		# tmp235, <retval>
	ld	a4,-40(s0)		# tmp236, saved_col
	sd	a4,32(a5)	# tmp236, _73(D)->col
	ld	a5,-72(s0)		# tmp237, <retval>
	addi	a5,a5,40	#, _6, tmp237
	mv	a0,a5	#, _6
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L252:
# parser.hpp:973:                               parsed);
	ld	a0,-72(s0)		# tmp238, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L251:
# parser.hpp:974:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp239, parsed
	beq	a5,zero,.L253	#, tmp239,,
# parser.hpp:976:                               parsed);
	ld	a0,-72(s0)		# tmp240, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L253:
# parser.hpp:980:         parsed = parse_word("break");
	li	a2,0		#,
	lui	a5,%hi(.LC107)	# tmp241,
	addi	a1,a5,%lo(.LC107)	#, tmp241,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:981:         if (parsed > 5) {
	ld	a4,-56(s0)		# tmp242, parsed
	li	a5,5		# tmp243,
	bleu	a4,a5,.L254	#, tmp242, tmp243,
# parser.hpp:983:                               parsed);
	ld	a0,-72(s0)		# tmp244, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L254:
# parser.hpp:984:         } else if (parsed == 5) {
	ld	a4,-56(s0)		# tmp245, parsed
	li	a5,5		# tmp246,
	bne	a4,a5,.L255	#, tmp245, tmp246,
# parser.hpp:989:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp247, <retval>
	li	a4,10		# tmp248,
	sd	a4,0(a5)	# tmp248, _73(D)->token
	ld	a5,-72(s0)		# tmp249, <retval>
	ld	a4,-32(s0)		# tmp250, saved_start_position
	sd	a4,8(a5)	# tmp250, _73(D)->start
# parser.hpp:987:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp251, this
	ld	a4,40(a5)		# _7, this_57(D)->cur_position
# parser.hpp:989:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp252, <retval>
	sd	a4,16(a5)	# _7, _73(D)->end
	ld	a5,-72(s0)		# tmp253, <retval>
	ld	a4,-48(s0)		# tmp254, saved_row
	sd	a4,24(a5)	# tmp254, _73(D)->row
	ld	a5,-72(s0)		# tmp255, <retval>
	ld	a4,-40(s0)		# tmp256, saved_col
	sd	a4,32(a5)	# tmp256, _73(D)->col
	ld	a5,-72(s0)		# tmp257, <retval>
	addi	a5,a5,40	#, _8, tmp257
	mv	a0,a5	#, _8
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L255:
# parser.hpp:990:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp258, parsed
	li	a5,1		# tmp259,
	bne	a4,a5,.L256	#, tmp258, tmp259,
# parser.hpp:991:             if (parsed = parse_word("bool", parsed); parsed == 4) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC108)	# tmp260,
	addi	a1,a5,%lo(.LC108)	#, tmp260,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:991:             if (parsed = parse_word("bool", parsed); parsed == 4) {
	ld	a4,-56(s0)		# tmp261, parsed
	li	a5,4		# tmp262,
	bne	a4,a5,.L257	#, tmp261, tmp262,
# parser.hpp:996:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp263, <retval>
	li	a4,9		# tmp264,
	sd	a4,0(a5)	# tmp264, _73(D)->token
	ld	a5,-72(s0)		# tmp265, <retval>
	ld	a4,-32(s0)		# tmp266, saved_start_position
	sd	a4,8(a5)	# tmp266, _73(D)->start
# parser.hpp:994:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp267, this
	ld	a4,40(a5)		# _9, this_57(D)->cur_position
# parser.hpp:996:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp268, <retval>
	sd	a4,16(a5)	# _9, _73(D)->end
	ld	a5,-72(s0)		# tmp269, <retval>
	ld	a4,-48(s0)		# tmp270, saved_row
	sd	a4,24(a5)	# tmp270, _73(D)->row
	ld	a5,-72(s0)		# tmp271, <retval>
	ld	a4,-40(s0)		# tmp272, saved_col
	sd	a4,32(a5)	# tmp272, _73(D)->col
	ld	a5,-72(s0)		# tmp273, <retval>
	addi	a5,a5,40	#, _10, tmp273
	mv	a0,a5	#, _10
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L257:
# parser.hpp:999:                               parsed);
	ld	a0,-72(s0)		# tmp274, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L256:
# parser.hpp:1000:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp275, parsed
	beq	a5,zero,.L258	#, tmp275,,
# parser.hpp:1002:                               parsed);
	ld	a0,-72(s0)		# tmp276, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L258:
# parser.hpp:1006:         parsed = parse_word("continue");
	li	a2,0		#,
	lui	a5,%hi(.LC109)	# tmp277,
	addi	a1,a5,%lo(.LC109)	#, tmp277,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1007:         if (parsed > 8) {
	ld	a4,-56(s0)		# tmp278, parsed
	li	a5,8		# tmp279,
	bleu	a4,a5,.L259	#, tmp278, tmp279,
# parser.hpp:1009:                               parsed);
	ld	a0,-72(s0)		# tmp280, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L259:
# parser.hpp:1010:         } else if (parsed == 8) {
	ld	a4,-56(s0)		# tmp281, parsed
	li	a5,8		# tmp282,
	bne	a4,a5,.L260	#, tmp281, tmp282,
# parser.hpp:1015:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp283, <retval>
	li	a4,11		# tmp284,
	sd	a4,0(a5)	# tmp284, _73(D)->token
	ld	a5,-72(s0)		# tmp285, <retval>
	ld	a4,-32(s0)		# tmp286, saved_start_position
	sd	a4,8(a5)	# tmp286, _73(D)->start
# parser.hpp:1013:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp287, this
	ld	a4,40(a5)		# _11, this_57(D)->cur_position
# parser.hpp:1015:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp288, <retval>
	sd	a4,16(a5)	# _11, _73(D)->end
	ld	a5,-72(s0)		# tmp289, <retval>
	ld	a4,-48(s0)		# tmp290, saved_row
	sd	a4,24(a5)	# tmp290, _73(D)->row
	ld	a5,-72(s0)		# tmp291, <retval>
	ld	a4,-40(s0)		# tmp292, saved_col
	sd	a4,32(a5)	# tmp292, _73(D)->col
	ld	a5,-72(s0)		# tmp293, <retval>
	addi	a5,a5,40	#, _12, tmp293
	mv	a0,a5	#, _12
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L260:
# parser.hpp:1016:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp294, parsed
	beq	a5,zero,.L261	#, tmp294,,
# parser.hpp:1018:                               parsed);
	ld	a0,-72(s0)		# tmp295, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L261:
# parser.hpp:1021:         parsed = parse_word("dict");
	li	a2,0		#,
	lui	a5,%hi(.LC110)	# tmp296,
	addi	a1,a5,%lo(.LC110)	#, tmp296,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1022:         if (parsed > 4) {
	ld	a4,-56(s0)		# tmp297, parsed
	li	a5,4		# tmp298,
	bleu	a4,a5,.L262	#, tmp297, tmp298,
# parser.hpp:1024:                               parsed);
	ld	a0,-72(s0)		# tmp299, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L262:
# parser.hpp:1025:         } else if (parsed == 4) {
	ld	a4,-56(s0)		# tmp300, parsed
	li	a5,4		# tmp301,
	bne	a4,a5,.L263	#, tmp300, tmp301,
# parser.hpp:1030:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp302, <retval>
	li	a4,12		# tmp303,
	sd	a4,0(a5)	# tmp303, _73(D)->token
	ld	a5,-72(s0)		# tmp304, <retval>
	ld	a4,-32(s0)		# tmp305, saved_start_position
	sd	a4,8(a5)	# tmp305, _73(D)->start
# parser.hpp:1028:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp306, this
	ld	a4,40(a5)		# _13, this_57(D)->cur_position
# parser.hpp:1030:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp307, <retval>
	sd	a4,16(a5)	# _13, _73(D)->end
	ld	a5,-72(s0)		# tmp308, <retval>
	ld	a4,-48(s0)		# tmp309, saved_row
	sd	a4,24(a5)	# tmp309, _73(D)->row
	ld	a5,-72(s0)		# tmp310, <retval>
	ld	a4,-40(s0)		# tmp311, saved_col
	sd	a4,32(a5)	# tmp311, _73(D)->col
	ld	a5,-72(s0)		# tmp312, <retval>
	addi	a5,a5,40	#, _14, tmp312
	mv	a0,a5	#, _14
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L263:
# parser.hpp:1031:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp313, parsed
	li	a5,1		# tmp314,
	bne	a4,a5,.L264	#, tmp313, tmp314,
# parser.hpp:1032:             parsed = parse_word("def", parsed);
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC111)	# tmp315,
	addi	a1,a5,%lo(.LC111)	#, tmp315,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1033:             if (parsed > 3) {
	ld	a4,-56(s0)		# tmp316, parsed
	li	a5,3		# tmp317,
	bleu	a4,a5,.L265	#, tmp316, tmp317,
# parser.hpp:1035:                                   parsed);
	ld	a0,-72(s0)		# tmp318, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L265:
# parser.hpp:1036:             } else if (parsed == 3) {
	ld	a4,-56(s0)		# tmp319, parsed
	li	a5,3		# tmp320,
	bne	a4,a5,.L266	#, tmp319, tmp320,
# parser.hpp:1041:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp321, <retval>
	li	a4,13		# tmp322,
	sd	a4,0(a5)	# tmp322, _73(D)->token
	ld	a5,-72(s0)		# tmp323, <retval>
	ld	a4,-32(s0)		# tmp324, saved_start_position
	sd	a4,8(a5)	# tmp324, _73(D)->start
# parser.hpp:1039:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp325, this
	ld	a4,40(a5)		# _15, this_57(D)->cur_position
# parser.hpp:1041:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp326, <retval>
	sd	a4,16(a5)	# _15, _73(D)->end
	ld	a5,-72(s0)		# tmp327, <retval>
	ld	a4,-48(s0)		# tmp328, saved_row
	sd	a4,24(a5)	# tmp328, _73(D)->row
	ld	a5,-72(s0)		# tmp329, <retval>
	ld	a4,-40(s0)		# tmp330, saved_col
	sd	a4,32(a5)	# tmp330, _73(D)->col
	ld	a5,-72(s0)		# tmp331, <retval>
	addi	a5,a5,40	#, _16, tmp331
	mv	a0,a5	#, _16
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L266:
# parser.hpp:1042:             } else if (parsed == 2) {
	ld	a4,-56(s0)		# tmp332, parsed
	li	a5,2		# tmp333,
	bne	a4,a5,.L267	#, tmp332, tmp333,
# parser.hpp:1043:                 if (parsed = parse_word("del", parsed); parsed == 3) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC112)	# tmp334,
	addi	a1,a5,%lo(.LC112)	#, tmp334,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1043:                 if (parsed = parse_word("del", parsed); parsed == 3) {
	ld	a4,-56(s0)		# tmp335, parsed
	li	a5,3		# tmp336,
	bne	a4,a5,.L268	#, tmp335, tmp336,
# parser.hpp:1048:                                           .col = saved_col};
	ld	a5,-72(s0)		# tmp337, <retval>
	li	a4,14		# tmp338,
	sd	a4,0(a5)	# tmp338, _73(D)->token
	ld	a5,-72(s0)		# tmp339, <retval>
	ld	a4,-32(s0)		# tmp340, saved_start_position
	sd	a4,8(a5)	# tmp340, _73(D)->start
# parser.hpp:1046:                                           .end = cur_position,
	ld	a5,-80(s0)		# tmp341, this
	ld	a4,40(a5)		# _17, this_57(D)->cur_position
# parser.hpp:1048:                                           .col = saved_col};
	ld	a5,-72(s0)		# tmp342, <retval>
	sd	a4,16(a5)	# _17, _73(D)->end
	ld	a5,-72(s0)		# tmp343, <retval>
	ld	a4,-48(s0)		# tmp344, saved_row
	sd	a4,24(a5)	# tmp344, _73(D)->row
	ld	a5,-72(s0)		# tmp345, <retval>
	ld	a4,-40(s0)		# tmp346, saved_col
	sd	a4,32(a5)	# tmp346, _73(D)->col
	ld	a5,-72(s0)		# tmp347, <retval>
	addi	a5,a5,40	#, _18, tmp347
	mv	a0,a5	#, _18
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L268:
# parser.hpp:1051:                                   parsed);
	ld	a0,-72(s0)		# tmp348, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L267:
# parser.hpp:1052:             } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp349, parsed
	beq	a5,zero,.L269	#, tmp349,,
# parser.hpp:1054:                                   parsed);
	ld	a0,-72(s0)		# tmp350, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L264:
# parser.hpp:1056:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp351, parsed
	beq	a5,zero,.L269	#, tmp351,,
# parser.hpp:1058:                               parsed);
	ld	a0,-72(s0)		# tmp352, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L269:
# parser.hpp:1061:         parsed = parse_word("exception");
	li	a2,0		#,
	lui	a5,%hi(.LC113)	# tmp353,
	addi	a1,a5,%lo(.LC113)	#, tmp353,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1062:         if (parsed > 9) {
	ld	a4,-56(s0)		# tmp354, parsed
	li	a5,9		# tmp355,
	bleu	a4,a5,.L270	#, tmp354, tmp355,
# parser.hpp:1064:                               parsed);
	ld	a0,-72(s0)		# tmp356, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L270:
# parser.hpp:1065:         } else if (parsed == 9) {
	ld	a4,-56(s0)		# tmp357, parsed
	li	a5,9		# tmp358,
	bne	a4,a5,.L271	#, tmp357, tmp358,
# parser.hpp:1070:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp359, <retval>
	li	a4,15		# tmp360,
	sd	a4,0(a5)	# tmp360, _73(D)->token
	ld	a5,-72(s0)		# tmp361, <retval>
	ld	a4,-32(s0)		# tmp362, saved_start_position
	sd	a4,8(a5)	# tmp362, _73(D)->start
# parser.hpp:1068:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp363, this
	ld	a4,40(a5)		# _19, this_57(D)->cur_position
# parser.hpp:1070:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp364, <retval>
	sd	a4,16(a5)	# _19, _73(D)->end
	ld	a5,-72(s0)		# tmp365, <retval>
	ld	a4,-48(s0)		# tmp366, saved_row
	sd	a4,24(a5)	# tmp366, _73(D)->row
	ld	a5,-72(s0)		# tmp367, <retval>
	ld	a4,-40(s0)		# tmp368, saved_col
	sd	a4,32(a5)	# tmp368, _73(D)->col
	ld	a5,-72(s0)		# tmp369, <retval>
	addi	a5,a5,40	#, _20, tmp369
	mv	a0,a5	#, _20
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L271:
# parser.hpp:1071:         } else if (parsed == 6) {
	ld	a4,-56(s0)		# tmp370, parsed
	li	a5,6		# tmp371,
	bne	a4,a5,.L272	#, tmp370, tmp371,
# parser.hpp:1072:             if (parsed = parse_word("except", parsed); parsed == 6) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC114)	# tmp372,
	addi	a1,a5,%lo(.LC114)	#, tmp372,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1072:             if (parsed = parse_word("except", parsed); parsed == 6) {
	ld	a4,-56(s0)		# tmp373, parsed
	li	a5,6		# tmp374,
	bne	a4,a5,.L273	#, tmp373, tmp374,
# parser.hpp:1077:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp375, <retval>
	li	a4,16		# tmp376,
	sd	a4,0(a5)	# tmp376, _73(D)->token
	ld	a5,-72(s0)		# tmp377, <retval>
	ld	a4,-32(s0)		# tmp378, saved_start_position
	sd	a4,8(a5)	# tmp378, _73(D)->start
# parser.hpp:1075:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp379, this
	ld	a4,40(a5)		# _21, this_57(D)->cur_position
# parser.hpp:1077:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp380, <retval>
	sd	a4,16(a5)	# _21, _73(D)->end
	ld	a5,-72(s0)		# tmp381, <retval>
	ld	a4,-48(s0)		# tmp382, saved_row
	sd	a4,24(a5)	# tmp382, _73(D)->row
	ld	a5,-72(s0)		# tmp383, <retval>
	ld	a4,-40(s0)		# tmp384, saved_col
	sd	a4,32(a5)	# tmp384, _73(D)->col
	ld	a5,-72(s0)		# tmp385, <retval>
	addi	a5,a5,40	#, _22, tmp385
	mv	a0,a5	#, _22
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L273:
# parser.hpp:1080:                               parsed);
	ld	a0,-72(s0)		# tmp386, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L272:
# parser.hpp:1081:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp387, parsed
	beq	a5,zero,.L274	#, tmp387,,
# parser.hpp:1083:                               parsed);
	ld	a0,-72(s0)		# tmp388, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L274:
# parser.hpp:1087:         parsed = parse_word("from");
	li	a2,0		#,
	lui	a5,%hi(.LC115)	# tmp389,
	addi	a1,a5,%lo(.LC115)	#, tmp389,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1088:         if (parsed > 4) {
	ld	a4,-56(s0)		# tmp390, parsed
	li	a5,4		# tmp391,
	bleu	a4,a5,.L275	#, tmp390, tmp391,
# parser.hpp:1090:                               parsed);
	ld	a0,-72(s0)		# tmp392, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L275:
# parser.hpp:1091:         } else if (parsed == 4) {
	ld	a4,-56(s0)		# tmp393, parsed
	li	a5,4		# tmp394,
	bne	a4,a5,.L276	#, tmp393, tmp394,
# parser.hpp:1096:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp395, <retval>
	li	a4,17		# tmp396,
	sd	a4,0(a5)	# tmp396, _73(D)->token
	ld	a5,-72(s0)		# tmp397, <retval>
	ld	a4,-32(s0)		# tmp398, saved_start_position
	sd	a4,8(a5)	# tmp398, _73(D)->start
# parser.hpp:1094:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp399, this
	ld	a4,40(a5)		# _23, this_57(D)->cur_position
# parser.hpp:1096:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp400, <retval>
	sd	a4,16(a5)	# _23, _73(D)->end
	ld	a5,-72(s0)		# tmp401, <retval>
	ld	a4,-48(s0)		# tmp402, saved_row
	sd	a4,24(a5)	# tmp402, _73(D)->row
	ld	a5,-72(s0)		# tmp403, <retval>
	ld	a4,-40(s0)		# tmp404, saved_col
	sd	a4,32(a5)	# tmp404, _73(D)->col
	ld	a5,-72(s0)		# tmp405, <retval>
	addi	a5,a5,40	#, _24, tmp405
	mv	a0,a5	#, _24
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L276:
# parser.hpp:1097:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp406, parsed
	li	a5,1		# tmp407,
	bne	a4,a5,.L277	#, tmp406, tmp407,
# parser.hpp:1098:             if (parsed = parse_word("for", parsed); parsed == 3) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC116)	# tmp408,
	addi	a1,a5,%lo(.LC116)	#, tmp408,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1098:             if (parsed = parse_word("for", parsed); parsed == 3) {
	ld	a4,-56(s0)		# tmp409, parsed
	li	a5,3		# tmp410,
	bne	a4,a5,.L278	#, tmp409, tmp410,
# parser.hpp:1103:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp411, <retval>
	li	a4,18		# tmp412,
	sd	a4,0(a5)	# tmp412, _73(D)->token
	ld	a5,-72(s0)		# tmp413, <retval>
	ld	a4,-32(s0)		# tmp414, saved_start_position
	sd	a4,8(a5)	# tmp414, _73(D)->start
# parser.hpp:1101:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp415, this
	ld	a4,40(a5)		# _25, this_57(D)->cur_position
# parser.hpp:1103:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp416, <retval>
	sd	a4,16(a5)	# _25, _73(D)->end
	ld	a5,-72(s0)		# tmp417, <retval>
	ld	a4,-48(s0)		# tmp418, saved_row
	sd	a4,24(a5)	# tmp418, _73(D)->row
	ld	a5,-72(s0)		# tmp419, <retval>
	ld	a4,-40(s0)		# tmp420, saved_col
	sd	a4,32(a5)	# tmp420, _73(D)->col
	ld	a5,-72(s0)		# tmp421, <retval>
	addi	a5,a5,40	#, _26, tmp421
	mv	a0,a5	#, _26
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L278:
# parser.hpp:1106:                               parsed);
	ld	a0,-72(s0)		# tmp422, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L277:
# parser.hpp:1107:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp423, parsed
	beq	a5,zero,.L279	#, tmp423,,
# parser.hpp:1109:                               parsed);
	ld	a0,-72(s0)		# tmp424, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L279:
# parser.hpp:1113:         parsed = parse_word("getattr");
	li	a2,0		#,
	lui	a5,%hi(.LC117)	# tmp425,
	addi	a1,a5,%lo(.LC117)	#, tmp425,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1114:         if (parsed > 7) {
	ld	a4,-56(s0)		# tmp426, parsed
	li	a5,7		# tmp427,
	bleu	a4,a5,.L280	#, tmp426, tmp427,
# parser.hpp:1116:                               parsed);
	ld	a0,-72(s0)		# tmp428, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L280:
# parser.hpp:1117:         } else if (parsed == 7) {
	ld	a4,-56(s0)		# tmp429, parsed
	li	a5,7		# tmp430,
	bne	a4,a5,.L281	#, tmp429, tmp430,
# parser.hpp:1122:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp431, <retval>
	li	a4,19		# tmp432,
	sd	a4,0(a5)	# tmp432, _73(D)->token
	ld	a5,-72(s0)		# tmp433, <retval>
	ld	a4,-32(s0)		# tmp434, saved_start_position
	sd	a4,8(a5)	# tmp434, _73(D)->start
# parser.hpp:1120:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp435, this
	ld	a4,40(a5)		# _27, this_57(D)->cur_position
# parser.hpp:1122:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp436, <retval>
	sd	a4,16(a5)	# _27, _73(D)->end
	ld	a5,-72(s0)		# tmp437, <retval>
	ld	a4,-48(s0)		# tmp438, saved_row
	sd	a4,24(a5)	# tmp438, _73(D)->row
	ld	a5,-72(s0)		# tmp439, <retval>
	ld	a4,-40(s0)		# tmp440, saved_col
	sd	a4,32(a5)	# tmp440, _73(D)->col
	ld	a5,-72(s0)		# tmp441, <retval>
	addi	a5,a5,40	#, _28, tmp441
	mv	a0,a5	#, _28
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L281:
# parser.hpp:1123:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp442, parsed
	beq	a5,zero,.L282	#, tmp442,,
# parser.hpp:1125:                               parsed);
	ld	a0,-72(s0)		# tmp443, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L282:
# parser.hpp:1129:         parsed = parse_word("import");
	li	a2,0		#,
	lui	a5,%hi(.LC118)	# tmp444,
	addi	a1,a5,%lo(.LC118)	#, tmp444,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1131:         if (parsed > 6) {
	ld	a4,-56(s0)		# tmp445, parsed
	li	a5,6		# tmp446,
	bleu	a4,a5,.L283	#, tmp445, tmp446,
# parser.hpp:1133:                               parsed);
	ld	a0,-72(s0)		# tmp447, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L283:
# parser.hpp:1134:         } else if (parsed == 6) {
	ld	a4,-56(s0)		# tmp448, parsed
	li	a5,6		# tmp449,
	bne	a4,a5,.L284	#, tmp448, tmp449,
# parser.hpp:1139:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp450, <retval>
	li	a4,20		# tmp451,
	sd	a4,0(a5)	# tmp451, _73(D)->token
	ld	a5,-72(s0)		# tmp452, <retval>
	ld	a4,-32(s0)		# tmp453, saved_start_position
	sd	a4,8(a5)	# tmp453, _73(D)->start
# parser.hpp:1137:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp454, this
	ld	a4,40(a5)		# _29, this_57(D)->cur_position
# parser.hpp:1139:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp455, <retval>
	sd	a4,16(a5)	# _29, _73(D)->end
	ld	a5,-72(s0)		# tmp456, <retval>
	ld	a4,-48(s0)		# tmp457, saved_row
	sd	a4,24(a5)	# tmp457, _73(D)->row
	ld	a5,-72(s0)		# tmp458, <retval>
	ld	a4,-40(s0)		# tmp459, saved_col
	sd	a4,32(a5)	# tmp459, _73(D)->col
	ld	a5,-72(s0)		# tmp460, <retval>
	addi	a5,a5,40	#, _30, tmp460
	mv	a0,a5	#, _30
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L284:
# parser.hpp:1140:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp461, parsed
	li	a5,1		# tmp462,
	bne	a4,a5,.L285	#, tmp461, tmp462,
# parser.hpp:1141:             parsed = parse_word("is", parsed);
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC119)	# tmp463,
	addi	a1,a5,%lo(.LC119)	#, tmp463,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1142:             if (parsed > 2) {
	ld	a4,-56(s0)		# tmp464, parsed
	li	a5,2		# tmp465,
	bleu	a4,a5,.L286	#, tmp464, tmp465,
# parser.hpp:1144:                                   parsed);
	ld	a0,-72(s0)		# tmp466, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L286:
# parser.hpp:1146:             if (parsed == 2) {
	ld	a4,-56(s0)		# tmp467, parsed
	li	a5,2		# tmp468,
	bne	a4,a5,.L287	#, tmp467, tmp468,
# parser.hpp:1151:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp469, <retval>
	li	a4,21		# tmp470,
	sd	a4,0(a5)	# tmp470, _73(D)->token
	ld	a5,-72(s0)		# tmp471, <retval>
	ld	a4,-32(s0)		# tmp472, saved_start_position
	sd	a4,8(a5)	# tmp472, _73(D)->start
# parser.hpp:1149:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp473, this
	ld	a4,40(a5)		# _31, this_57(D)->cur_position
# parser.hpp:1151:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp474, <retval>
	sd	a4,16(a5)	# _31, _73(D)->end
	ld	a5,-72(s0)		# tmp475, <retval>
	ld	a4,-48(s0)		# tmp476, saved_row
	sd	a4,24(a5)	# tmp476, _73(D)->row
	ld	a5,-72(s0)		# tmp477, <retval>
	ld	a4,-40(s0)		# tmp478, saved_col
	sd	a4,32(a5)	# tmp478, _73(D)->col
	ld	a5,-72(s0)		# tmp479, <retval>
	addi	a5,a5,40	#, _32, tmp479
	mv	a0,a5	#, _32
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L287:
# parser.hpp:1153:             parsed = parse_word("in", parsed);
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC120)	# tmp480,
	addi	a1,a5,%lo(.LC120)	#, tmp480,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1154:             if (parsed > 2) {
	ld	a4,-56(s0)		# tmp481, parsed
	li	a5,2		# tmp482,
	bleu	a4,a5,.L288	#, tmp481, tmp482,
# parser.hpp:1156:                                   parsed);
	ld	a0,-72(s0)		# tmp483, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L288:
# parser.hpp:1158:             if (parsed == 2) {
	ld	a4,-56(s0)		# tmp484, parsed
	li	a5,2		# tmp485,
	bne	a4,a5,.L289	#, tmp484, tmp485,
# parser.hpp:1163:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp486, <retval>
	li	a4,22		# tmp487,
	sd	a4,0(a5)	# tmp487, _73(D)->token
	ld	a5,-72(s0)		# tmp488, <retval>
	ld	a4,-32(s0)		# tmp489, saved_start_position
	sd	a4,8(a5)	# tmp489, _73(D)->start
# parser.hpp:1161:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp490, this
	ld	a4,40(a5)		# _33, this_57(D)->cur_position
# parser.hpp:1163:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp491, <retval>
	sd	a4,16(a5)	# _33, _73(D)->end
	ld	a5,-72(s0)		# tmp492, <retval>
	ld	a4,-48(s0)		# tmp493, saved_row
	sd	a4,24(a5)	# tmp493, _73(D)->row
	ld	a5,-72(s0)		# tmp494, <retval>
	ld	a4,-40(s0)		# tmp495, saved_col
	sd	a4,32(a5)	# tmp495, _73(D)->col
	ld	a5,-72(s0)		# tmp496, <retval>
	addi	a5,a5,40	#, _34, tmp496
	mv	a0,a5	#, _34
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L289:
# parser.hpp:1165:             parsed = parse_word("if", parsed);
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC121)	# tmp497,
	addi	a1,a5,%lo(.LC121)	#, tmp497,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1166:             if (parsed > 2) {
	ld	a4,-56(s0)		# tmp498, parsed
	li	a5,2		# tmp499,
	bleu	a4,a5,.L290	#, tmp498, tmp499,
# parser.hpp:1168:                                   parsed);
	ld	a0,-72(s0)		# tmp500, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L290:
# parser.hpp:1170:             if (parsed == 2) {
	ld	a4,-56(s0)		# tmp501, parsed
	li	a5,2		# tmp502,
	bne	a4,a5,.L291	#, tmp501, tmp502,
# parser.hpp:1175:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp503, <retval>
	li	a4,23		# tmp504,
	sd	a4,0(a5)	# tmp504, _73(D)->token
	ld	a5,-72(s0)		# tmp505, <retval>
	ld	a4,-32(s0)		# tmp506, saved_start_position
	sd	a4,8(a5)	# tmp506, _73(D)->start
# parser.hpp:1173:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp507, this
	ld	a4,40(a5)		# _35, this_57(D)->cur_position
# parser.hpp:1175:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp508, <retval>
	sd	a4,16(a5)	# _35, _73(D)->end
	ld	a5,-72(s0)		# tmp509, <retval>
	ld	a4,-48(s0)		# tmp510, saved_row
	sd	a4,24(a5)	# tmp510, _73(D)->row
	ld	a5,-72(s0)		# tmp511, <retval>
	ld	a4,-40(s0)		# tmp512, saved_col
	sd	a4,32(a5)	# tmp512, _73(D)->col
	ld	a5,-72(s0)		# tmp513, <retval>
	addi	a5,a5,40	#, _36, tmp513
	mv	a0,a5	#, _36
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L291:
# parser.hpp:1178:                               parsed);
	ld	a0,-72(s0)		# tmp514, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L285:
# parser.hpp:1179:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp515, parsed
	beq	a5,zero,.L292	#, tmp515,,
# parser.hpp:1181:                               parsed);
	ld	a0,-72(s0)		# tmp516, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L292:
# parser.hpp:1184:         parsed = parse_word("list");
	li	a2,0		#,
	lui	a5,%hi(.LC122)	# tmp517,
	addi	a1,a5,%lo(.LC122)	#, tmp517,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1185:         if (parsed > 4) {
	ld	a4,-56(s0)		# tmp518, parsed
	li	a5,4		# tmp519,
	bleu	a4,a5,.L293	#, tmp518, tmp519,
# parser.hpp:1187:                               parsed);
	ld	a0,-72(s0)		# tmp520, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L293:
# parser.hpp:1188:         } else if (parsed == 4) {
	ld	a4,-56(s0)		# tmp521, parsed
	li	a5,4		# tmp522,
	bne	a4,a5,.L294	#, tmp521, tmp522,
# parser.hpp:1193:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp523, <retval>
	li	a4,24		# tmp524,
	sd	a4,0(a5)	# tmp524, _73(D)->token
	ld	a5,-72(s0)		# tmp525, <retval>
	ld	a4,-32(s0)		# tmp526, saved_start_position
	sd	a4,8(a5)	# tmp526, _73(D)->start
# parser.hpp:1191:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp527, this
	ld	a4,40(a5)		# _37, this_57(D)->cur_position
# parser.hpp:1193:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp528, <retval>
	sd	a4,16(a5)	# _37, _73(D)->end
	ld	a5,-72(s0)		# tmp529, <retval>
	ld	a4,-48(s0)		# tmp530, saved_row
	sd	a4,24(a5)	# tmp530, _73(D)->row
	ld	a5,-72(s0)		# tmp531, <retval>
	ld	a4,-40(s0)		# tmp532, saved_col
	sd	a4,32(a5)	# tmp532, _73(D)->col
	ld	a5,-72(s0)		# tmp533, <retval>
	addi	a5,a5,40	#, _38, tmp533
	mv	a0,a5	#, _38
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L294:
# parser.hpp:1194:         } else if (parsed == 1) {
	ld	a4,-56(s0)		# tmp534, parsed
	li	a5,1		# tmp535,
	bne	a4,a5,.L295	#, tmp534, tmp535,
# parser.hpp:1195:             if (parsed = parse_word("len", parsed); parsed == 3) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC123)	# tmp536,
	addi	a1,a5,%lo(.LC123)	#, tmp536,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1195:             if (parsed = parse_word("len", parsed); parsed == 3) {
	ld	a4,-56(s0)		# tmp537, parsed
	li	a5,3		# tmp538,
	bne	a4,a5,.L296	#, tmp537, tmp538,
# parser.hpp:1200:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp539, <retval>
	li	a4,25		# tmp540,
	sd	a4,0(a5)	# tmp540, _73(D)->token
	ld	a5,-72(s0)		# tmp541, <retval>
	ld	a4,-32(s0)		# tmp542, saved_start_position
	sd	a4,8(a5)	# tmp542, _73(D)->start
# parser.hpp:1198:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp543, this
	ld	a4,40(a5)		# _39, this_57(D)->cur_position
# parser.hpp:1200:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp544, <retval>
	sd	a4,16(a5)	# _39, _73(D)->end
	ld	a5,-72(s0)		# tmp545, <retval>
	ld	a4,-48(s0)		# tmp546, saved_row
	sd	a4,24(a5)	# tmp546, _73(D)->row
	ld	a5,-72(s0)		# tmp547, <retval>
	ld	a4,-40(s0)		# tmp548, saved_col
	sd	a4,32(a5)	# tmp548, _73(D)->col
	ld	a5,-72(s0)		# tmp549, <retval>
	addi	a5,a5,40	#, _40, tmp549
	mv	a0,a5	#, _40
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L296:
# parser.hpp:1203:                               parsed);
	ld	a0,-72(s0)		# tmp550, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L295:
# parser.hpp:1204:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp551, parsed
	beq	a5,zero,.L297	#, tmp551,,
# parser.hpp:1206:                               parsed);
	ld	a0,-72(s0)		# tmp552, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L297:
# parser.hpp:1209:         parsed = parse_word("or");
	li	a2,0		#,
	lui	a5,%hi(.LC124)	# tmp553,
	addi	a1,a5,%lo(.LC124)	#, tmp553,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1210:         if (parsed > 2) {
	ld	a4,-56(s0)		# tmp554, parsed
	li	a5,2		# tmp555,
	bleu	a4,a5,.L298	#, tmp554, tmp555,
# parser.hpp:1212:                               parsed);
	ld	a0,-72(s0)		# tmp556, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L298:
# parser.hpp:1213:         } else if (parsed == 2) {
	ld	a4,-56(s0)		# tmp557, parsed
	li	a5,2		# tmp558,
	bne	a4,a5,.L299	#, tmp557, tmp558,
# parser.hpp:1218:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp559, <retval>
	li	a4,26		# tmp560,
	sd	a4,0(a5)	# tmp560, _73(D)->token
	ld	a5,-72(s0)		# tmp561, <retval>
	ld	a4,-32(s0)		# tmp562, saved_start_position
	sd	a4,8(a5)	# tmp562, _73(D)->start
# parser.hpp:1216:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp563, this
	ld	a4,40(a5)		# _41, this_57(D)->cur_position
# parser.hpp:1218:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp564, <retval>
	sd	a4,16(a5)	# _41, _73(D)->end
	ld	a5,-72(s0)		# tmp565, <retval>
	ld	a4,-48(s0)		# tmp566, saved_row
	sd	a4,24(a5)	# tmp566, _73(D)->row
	ld	a5,-72(s0)		# tmp567, <retval>
	ld	a4,-40(s0)		# tmp568, saved_col
	sd	a4,32(a5)	# tmp568, _73(D)->col
	ld	a5,-72(s0)		# tmp569, <retval>
	addi	a5,a5,40	#, _42, tmp569
	mv	a0,a5	#, _42
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L299:
# parser.hpp:1219:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp570, parsed
	beq	a5,zero,.L300	#, tmp570,,
# parser.hpp:1221:                               parsed);
	ld	a0,-72(s0)		# tmp571, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L300:
# parser.hpp:1224:         parsed = parse_word("return");
	li	a2,0		#,
	lui	a5,%hi(.LC125)	# tmp572,
	addi	a1,a5,%lo(.LC125)	#, tmp572,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1225:         if (parsed > 6) {
	ld	a4,-56(s0)		# tmp573, parsed
	li	a5,6		# tmp574,
	bleu	a4,a5,.L301	#, tmp573, tmp574,
# parser.hpp:1227:                               parsed);
	ld	a0,-72(s0)		# tmp575, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L301:
# parser.hpp:1228:         } else if (parsed == 6) {
	ld	a4,-56(s0)		# tmp576, parsed
	li	a5,6		# tmp577,
	bne	a4,a5,.L302	#, tmp576, tmp577,
# parser.hpp:1236:             };
	ld	a5,-72(s0)		# tmp578, <retval>
	li	a4,28		# tmp579,
	sd	a4,0(a5)	# tmp579, _73(D)->token
	ld	a5,-72(s0)		# tmp580, <retval>
	ld	a4,-32(s0)		# tmp581, saved_start_position
	sd	a4,8(a5)	# tmp581, _73(D)->start
# parser.hpp:1232:                 .end = cur_position,
	ld	a5,-80(s0)		# tmp582, this
	ld	a4,40(a5)		# _43, this_57(D)->cur_position
# parser.hpp:1236:             };
	ld	a5,-72(s0)		# tmp583, <retval>
	sd	a4,16(a5)	# _43, _73(D)->end
	ld	a5,-72(s0)		# tmp584, <retval>
	ld	a4,-48(s0)		# tmp585, saved_row
	sd	a4,24(a5)	# tmp585, _73(D)->row
	ld	a5,-72(s0)		# tmp586, <retval>
	ld	a4,-40(s0)		# tmp587, saved_col
	sd	a4,32(a5)	# tmp587, _73(D)->col
	ld	a5,-72(s0)		# tmp588, <retval>
	addi	a4,a5,40	#, _44, tmp588
# parser.hpp:1235:                 .data = current_string,
	ld	a5,-80(s0)		# tmp589, this
	addi	a5,a5,64	#, _45, tmp589
# parser.hpp:1236:             };
	mv	a1,a5	#, _45
	mv	a0,a4	#, _44
	call	_ZN4rstd6stringC1ERKS0_		#
	j	.L248		#
.L302:
# parser.hpp:1237:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp590, parsed
	beq	a5,zero,.L303	#, tmp590,,
# parser.hpp:1239:                               parsed);
	ld	a0,-72(s0)		# tmp591, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L303:
# parser.hpp:1242:         parsed = parse_word("setattr");
	li	a2,0		#,
	lui	a5,%hi(.LC126)	# tmp592,
	addi	a1,a5,%lo(.LC126)	#, tmp592,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1243:         if (parsed > 7) {
	ld	a4,-56(s0)		# tmp593, parsed
	li	a5,7		# tmp594,
	bleu	a4,a5,.L304	#, tmp593, tmp594,
# parser.hpp:1245:                               parsed);
	ld	a0,-72(s0)		# tmp595, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L304:
# parser.hpp:1246:         } else if (parsed == 7) {
	ld	a4,-56(s0)		# tmp596, parsed
	li	a5,7		# tmp597,
	bne	a4,a5,.L305	#, tmp596, tmp597,
# parser.hpp:1251:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp598, <retval>
	li	a4,29		# tmp599,
	sd	a4,0(a5)	# tmp599, _73(D)->token
	ld	a5,-72(s0)		# tmp600, <retval>
	ld	a4,-32(s0)		# tmp601, saved_start_position
	sd	a4,8(a5)	# tmp601, _73(D)->start
# parser.hpp:1249:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp602, this
	ld	a4,40(a5)		# _46, this_57(D)->cur_position
# parser.hpp:1251:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp603, <retval>
	sd	a4,16(a5)	# _46, _73(D)->end
	ld	a5,-72(s0)		# tmp604, <retval>
	ld	a4,-48(s0)		# tmp605, saved_row
	sd	a4,24(a5)	# tmp605, _73(D)->row
	ld	a5,-72(s0)		# tmp606, <retval>
	ld	a4,-40(s0)		# tmp607, saved_col
	sd	a4,32(a5)	# tmp607, _73(D)->col
	ld	a5,-72(s0)		# tmp608, <retval>
	addi	a5,a5,40	#, _47, tmp608
	mv	a0,a5	#, _47
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L305:
# parser.hpp:1252:         } else if (parsed == 3) {
	ld	a4,-56(s0)		# tmp609, parsed
	li	a5,3		# tmp610,
	bne	a4,a5,.L306	#, tmp609, tmp610,
# parser.hpp:1253:             if (parsed = parse_word("set", parsed); parsed == 3) {
	ld	a2,-56(s0)		#, parsed
	lui	a5,%hi(.LC127)	# tmp611,
	addi	a1,a5,%lo(.LC127)	#, tmp611,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1253:             if (parsed = parse_word("set", parsed); parsed == 3) {
	ld	a4,-56(s0)		# tmp612, parsed
	li	a5,3		# tmp613,
	bne	a4,a5,.L307	#, tmp612, tmp613,
# parser.hpp:1258:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp614, <retval>
	li	a4,30		# tmp615,
	sd	a4,0(a5)	# tmp615, _73(D)->token
	ld	a5,-72(s0)		# tmp616, <retval>
	ld	a4,-32(s0)		# tmp617, saved_start_position
	sd	a4,8(a5)	# tmp617, _73(D)->start
# parser.hpp:1256:                                       .end = cur_position,
	ld	a5,-80(s0)		# tmp618, this
	ld	a4,40(a5)		# _48, this_57(D)->cur_position
# parser.hpp:1258:                                       .col = saved_col};
	ld	a5,-72(s0)		# tmp619, <retval>
	sd	a4,16(a5)	# _48, _73(D)->end
	ld	a5,-72(s0)		# tmp620, <retval>
	ld	a4,-48(s0)		# tmp621, saved_row
	sd	a4,24(a5)	# tmp621, _73(D)->row
	ld	a5,-72(s0)		# tmp622, <retval>
	ld	a4,-40(s0)		# tmp623, saved_col
	sd	a4,32(a5)	# tmp623, _73(D)->col
	ld	a5,-72(s0)		# tmp624, <retval>
	addi	a5,a5,40	#, _49, tmp624
	mv	a0,a5	#, _49
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L307:
# parser.hpp:1261:                               parsed);
	ld	a0,-72(s0)		# tmp625, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L306:
# parser.hpp:1262:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp626, parsed
	beq	a5,zero,.L308	#, tmp626,,
# parser.hpp:1264:                               parsed);
	ld	a0,-72(s0)		# tmp627, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L308:
# parser.hpp:1267:         parsed = parse_word("yield");
	li	a2,0		#,
	lui	a5,%hi(.LC128)	# tmp628,
	addi	a1,a5,%lo(.LC128)	#, tmp628,
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t10parse_wordEPKcm		#
	sd	a0,-56(s0)	#, parsed
# parser.hpp:1268:         if (parsed > 5) {
	ld	a4,-56(s0)		# tmp629, parsed
	li	a5,5		# tmp630,
	bleu	a4,a5,.L309	#, tmp629, tmp630,
# parser.hpp:1270:                               parsed);
	ld	a0,-72(s0)		# tmp631, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L309:
# parser.hpp:1271:         } else if (parsed == 5) {
	ld	a4,-56(s0)		# tmp632, parsed
	li	a5,5		# tmp633,
	bne	a4,a5,.L310	#, tmp632, tmp633,
# parser.hpp:1276:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp634, <retval>
	li	a4,31		# tmp635,
	sd	a4,0(a5)	# tmp635, _73(D)->token
	ld	a5,-72(s0)		# tmp636, <retval>
	ld	a4,-32(s0)		# tmp637, saved_start_position
	sd	a4,8(a5)	# tmp637, _73(D)->start
# parser.hpp:1274:                                   .end = cur_position,
	ld	a5,-80(s0)		# tmp638, this
	ld	a4,40(a5)		# _50, this_57(D)->cur_position
# parser.hpp:1276:                                   .col = saved_col};
	ld	a5,-72(s0)		# tmp639, <retval>
	sd	a4,16(a5)	# _50, _73(D)->end
	ld	a5,-72(s0)		# tmp640, <retval>
	ld	a4,-48(s0)		# tmp641, saved_row
	sd	a4,24(a5)	# tmp641, _73(D)->row
	ld	a5,-72(s0)		# tmp642, <retval>
	ld	a4,-40(s0)		# tmp643, saved_col
	sd	a4,32(a5)	# tmp643, _73(D)->col
	ld	a5,-72(s0)		# tmp644, <retval>
	addi	a5,a5,40	#, _51, tmp644
	mv	a0,a5	#, _51
	call	_ZN4rstd6stringC1Ev		#
	j	.L248		#
.L310:
# parser.hpp:1277:         } else if (parsed != 0) {
	ld	a5,-56(s0)		# tmp645, parsed
	beq	a5,zero,.L311	#, tmp645,,
# parser.hpp:1279:                               parsed);
	ld	a0,-72(s0)		# tmp646, <retval>
	ld	a5,-56(s0)		#, parsed
	ld	a4,-40(s0)		#, saved_col
	ld	a3,-48(s0)		#, saved_row
	ld	a2,-32(s0)		#, saved_start_position
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L311:
# parser.hpp:1281:         if (isdigit(c)) {
	lbu	a5,-17(s0)	# tmp647, c
	mv	a1,a5	#, tmp647
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t7isdigitEc		#
	mv	a5,a0	# tmp648,
# parser.hpp:1281:         if (isdigit(c)) {
	beq	a5,zero,.L312	#, retval.11_113,,
# parser.hpp:1282:             return parse_number();
	ld	a5,-72(s0)		# tmp649, <retval>
	ld	a1,-80(s0)		#, this
	mv	a0,a5	#, tmp649
	call	_ZN7lexer_t12parse_numberEv		#
	j	.L248		#
.L312:
# parser.hpp:1284:         if (can_continue_name(c)) {
	lbu	a5,-17(s0)	# tmp650, c
	mv	a1,a5	#, tmp650
	ld	a0,-80(s0)		#, this
	call	_ZN7lexer_t17can_continue_nameEc		#
	mv	a5,a0	# tmp651,
# parser.hpp:1284:         if (can_continue_name(c)) {
	beq	a5,zero,.L313	#, retval.12_115,,
# parser.hpp:1285:             return parse_name(cur_position, cur_row, cur_col);
	ld	a5,-80(s0)		# tmp652, this
	ld	a2,40(a5)		# _52, this_57(D)->cur_position
	ld	a5,-80(s0)		# tmp653, this
	ld	a3,48(a5)		# _53, this_57(D)->cur_row
	ld	a5,-80(s0)		# tmp654, this
	ld	a4,56(a5)		# _54, this_57(D)->cur_col
	ld	a0,-72(s0)		# tmp655, <retval>
	li	a5,0		#,
	ld	a1,-80(s0)		#, this
	call	_ZN7lexer_t10parse_nameEmmmm		#
	j	.L248		#
.L313:
# parser.hpp:1287:         if (c == ' ' || c == '\t' || c == '\n') {
	lbu	a5,-17(s0)	# tmp657, c
	andi	a4,a5,0xff	# tmp658, tmp656
	li	a5,32		# tmp659,
	beq	a4,a5,.L314	#, tmp658, tmp659,
# parser.hpp:1287:         if (c == ' ' || c == '\t' || c == '\n') {
	lbu	a5,-17(s0)	# tmp661, c
	andi	a4,a5,0xff	# tmp662, tmp660
	li	a5,9		# tmp663,
	beq	a4,a5,.L314	#, tmp662, tmp663,
# parser.hpp:1287:         if (c == ' ' || c == '\t' || c == '\n') {
	lbu	a5,-17(s0)	# tmp665, c
	andi	a4,a5,0xff	# tmp666, tmp664
	li	a5,10		# tmp667,
	bne	a4,a5,.L315	#, tmp666, tmp667,
.L314:
# parser.hpp:1288:             return parse_space();
	ld	a5,-72(s0)		# tmp668, <retval>
	ld	a1,-80(s0)		#, this
	mv	a0,a5	#, tmp668
	call	_ZN7lexer_t11parse_spaceEv		#
	j	.L248		#
.L315:
# parser.hpp:1290:         return parse_non_name();
	ld	a5,-72(s0)		# tmp669, <retval>
	ld	a1,-80(s0)		#, this
	mv	a0,a5	#, tmp669
	call	_ZN7lexer_t14parse_non_nameEv		#
.L248:
# parser.hpp:1291:     }
	ld	a0,-72(s0)		#, <retval>
	ld	ra,72(sp)		#,
	.cfi_restore 1
	ld	s0,64(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 80
	addi	sp,sp,80	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4649:
	.size	_ZN7lexer_t8next_tokEv, .-_ZN7lexer_t8next_tokEv
	.globl	NODE_NAMES
	.section	.rodata
	.align	3
.LC129:
	.string	"UNKNOWN"
	.string	""
	.align	3
.LC130:
	.string	"BINARY_OP"
	.string	""
	.align	3
.LC131:
	.string	"UNARY_OP"
	.string	""
	.align	3
.LC132:
	.string	"NUMBER"
	.string	""
	.data
	.align	3
	.type	NODE_NAMES, @object
	.size	NODE_NAMES, 32
NODE_NAMES:
	.dword	.LC129
	.dword	.LC130
	.dword	.LC131
	.dword	.LC132
	.section	.text._ZN14parsed_token_tC2ERKS_,"axG",@progbits,_ZN14parsed_token_tC5ERKS_,comdat
	.align	1
	.weak	_ZN14parsed_token_tC2ERKS_
	.type	_ZN14parsed_token_tC2ERKS_, @function
_ZN14parsed_token_tC2ERKS_:
.LFB4871:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.101305, D.101305
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-32(s0)		# tmp142, D.101305
	ld	a4,0(a5)		# _1, _12(D)->token
	ld	a5,-24(s0)		# tmp143, this
	sd	a4,0(a5)	# _1, this_10(D)->token
	ld	a5,-32(s0)		# tmp144, D.101305
	ld	a4,8(a5)		# _2, _12(D)->start
	ld	a5,-24(s0)		# tmp145, this
	sd	a4,8(a5)	# _2, this_10(D)->start
	ld	a5,-32(s0)		# tmp146, D.101305
	ld	a4,16(a5)		# _3, _12(D)->end
	ld	a5,-24(s0)		# tmp147, this
	sd	a4,16(a5)	# _3, this_10(D)->end
	ld	a5,-32(s0)		# tmp148, D.101305
	ld	a4,24(a5)		# _4, _12(D)->row
	ld	a5,-24(s0)		# tmp149, this
	sd	a4,24(a5)	# _4, this_10(D)->row
	ld	a5,-32(s0)		# tmp150, D.101305
	ld	a4,32(a5)		# _5, _12(D)->col
	ld	a5,-24(s0)		# tmp151, this
	sd	a4,32(a5)	# _5, this_10(D)->col
	ld	a5,-24(s0)		# tmp152, this
	addi	a4,a5,40	#, _6, tmp152
	ld	a5,-32(s0)		# tmp153, D.101305
	addi	a5,a5,40	#, _7, tmp153
	mv	a1,a5	#, _7
	mv	a0,a4	#, _6
	call	_ZN4rstd6stringC1ERKS0_		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4871:
	.size	_ZN14parsed_token_tC2ERKS_, .-_ZN14parsed_token_tC2ERKS_
	.weak	_ZN14parsed_token_tC1ERKS_
	.set	_ZN14parsed_token_tC1ERKS_,_ZN14parsed_token_tC2ERKS_
	.section	.text._ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t,"axG",@progbits,_ZN10ast_node_tC5ERK11node_type_tRK14parsed_token_t,comdat
	.align	1
	.weak	_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t
	.type	_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t, @function
_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t:
.LFB4873:
	.cfi_startproc
	addi	sp,sp,-48	#,,
	.cfi_def_cfa_offset 48
	sd	ra,40(sp)	#,
	sd	s0,32(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,48	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# type, type
	sd	a2,-40(s0)	# token, token
# ast.hpp:36:         : type(type),
	ld	a5,-32(s0)		# tmp138, type
	lw	a4,0(a5)		# _1, *type_8(D)
# ast.hpp:36:         : type(type),
	ld	a5,-24(s0)		# tmp139, this
	sw	a4,0(a5)	# _1, this_6(D)->type
# ast.hpp:38:           children((ast_node_t*)memory::alloc(sizeof(ast_node_t) * 10)) {}
	li	a0,800		#,
	call	_ZN6memory5allocEm		#
	mv	a4,a0	# _2,
# ast.hpp:38:           children((ast_node_t*)memory::alloc(sizeof(ast_node_t) * 10)) {}
	ld	a5,-24(s0)		# tmp140, this
	sd	a4,8(a5)	# _2, this_6(D)->children
# ast.hpp:37:           token(token),
	ld	a5,-24(s0)		# tmp141, this
	addi	a5,a5,16	#, _3, tmp141
	ld	a1,-40(s0)		#, token
	mv	a0,a5	#, _3
	call	_ZN14parsed_token_tC1ERKS_		#
# ast.hpp:38:           children((ast_node_t*)memory::alloc(sizeof(ast_node_t) * 10)) {}
	nop	
	ld	ra,40(sp)		#,
	.cfi_restore 1
	ld	s0,32(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 48
	addi	sp,sp,48	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4873:
	.size	_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t, .-_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t
	.weak	_ZN10ast_node_tC1ERK11node_type_tRK14parsed_token_t
	.set	_ZN10ast_node_tC1ERK11node_type_tRK14parsed_token_t,_ZN10ast_node_tC2ERK11node_type_tRK14parsed_token_t
	.section	.text._ZN14parsed_token_tC2Ev,"axG",@progbits,_ZN14parsed_token_tC5Ev,comdat
	.align	1
	.weak	_ZN14parsed_token_tC2Ev
	.type	_ZN14parsed_token_tC2Ev, @function
_ZN14parsed_token_tC2Ev:
.LFB4878:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-24(s0)		# tmp136, this
	addi	a5,a5,40	#, _1, tmp136
	mv	a0,a5	#, _1
	call	_ZN4rstd6stringC1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4878:
	.size	_ZN14parsed_token_tC2Ev, .-_ZN14parsed_token_tC2Ev
	.weak	_ZN14parsed_token_tC1Ev
	.set	_ZN14parsed_token_tC1Ev,_ZN14parsed_token_tC2Ev
	.section	.text._ZN10ast_node_tC2Ev,"axG",@progbits,_ZN10ast_node_tC5Ev,comdat
	.align	1
	.weak	_ZN10ast_node_tC2Ev
	.type	_ZN10ast_node_tC2Ev, @function
_ZN10ast_node_tC2Ev:
.LFB4880:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:39:     inline ast_node_t() = default;
	ld	a5,-24(s0)		# tmp136, this
	sw	zero,0(a5)	#, this_4(D)->type
	ld	a5,-24(s0)		# tmp137, this
	sd	zero,8(a5)	#, this_4(D)->children
	ld	a5,-24(s0)		# tmp138, this
	addi	a5,a5,16	#, _1, tmp138
	mv	a0,a5	#, _1
	call	_ZN14parsed_token_tC1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4880:
	.size	_ZN10ast_node_tC2Ev, .-_ZN10ast_node_tC2Ev
	.weak	_ZN10ast_node_tC1Ev
	.set	_ZN10ast_node_tC1Ev,_ZN10ast_node_tC2Ev
	.section	.text._ZN10ast_node_tD2Ev,"axG",@progbits,_ZN10ast_node_tD5Ev,comdat
	.align	1
	.weak	_ZN10ast_node_tD2Ev
	.type	_ZN10ast_node_tD2Ev, @function
_ZN10ast_node_tD2Ev:
.LFB4883:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:30: struct ast_node_t {
	ld	a5,-24(s0)		# tmp135, this
	addi	a5,a5,16	#, _1, tmp135
	mv	a0,a5	#, _1
	call	_ZN14parsed_token_tD1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4883:
	.size	_ZN10ast_node_tD2Ev, .-_ZN10ast_node_tD2Ev
	.weak	_ZN10ast_node_tD1Ev
	.set	_ZN10ast_node_tD1Ev,_ZN10ast_node_tD2Ev
	.section	.text._ZN12maybe_node_tC2Ev,"axG",@progbits,_ZN12maybe_node_tC5Ev,comdat
	.align	1
	.weak	_ZN12maybe_node_tC2Ev
	.type	_ZN12maybe_node_tC2Ev, @function
_ZN12maybe_node_tC2Ev:
.LFB4885:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:45:     inline maybe_node_t() : is_none(true) {}
	ld	a5,-24(s0)		# tmp136, this
	li	a4,1		# tmp137,
	sb	a4,0(a5)	# tmp137, this_4(D)->is_none
# ast.hpp:45:     inline maybe_node_t() : is_none(true) {}
	ld	a5,-24(s0)		# tmp138, this
	addi	a5,a5,8	#, _1, tmp138
	mv	a0,a5	#, _1
	call	_ZN10ast_node_tC1Ev		#
# ast.hpp:45:     inline maybe_node_t() : is_none(true) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4885:
	.size	_ZN12maybe_node_tC2Ev, .-_ZN12maybe_node_tC2Ev
	.weak	_ZN12maybe_node_tC1Ev
	.set	_ZN12maybe_node_tC1Ev,_ZN12maybe_node_tC2Ev
	.section	.text._ZN10ast_node_tC2ERKS_,"axG",@progbits,_ZN10ast_node_tC5ERKS_,comdat
	.align	1
	.weak	_ZN10ast_node_tC2ERKS_
	.type	_ZN10ast_node_tC2ERKS_, @function
_ZN10ast_node_tC2ERKS_:
.LFB4889:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109226, D.109226
# ast.hpp:30: struct ast_node_t {
	ld	a5,-32(s0)		# tmp139, D.109226
	lw	a4,0(a5)		# _1, _9(D)->type
	ld	a5,-24(s0)		# tmp140, this
	sw	a4,0(a5)	# _1, this_7(D)->type
	ld	a5,-32(s0)		# tmp141, D.109226
	ld	a4,8(a5)		# _2, _9(D)->children
	ld	a5,-24(s0)		# tmp142, this
	sd	a4,8(a5)	# _2, this_7(D)->children
	ld	a5,-24(s0)		# tmp143, this
	addi	a4,a5,16	#, _3, tmp143
	ld	a5,-32(s0)		# tmp144, D.109226
	addi	a5,a5,16	#, _4, tmp144
	mv	a1,a5	#, _4
	mv	a0,a4	#, _3
	call	_ZN14parsed_token_tC1ERKS_		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4889:
	.size	_ZN10ast_node_tC2ERKS_, .-_ZN10ast_node_tC2ERKS_
	.weak	_ZN10ast_node_tC1ERKS_
	.set	_ZN10ast_node_tC1ERKS_,_ZN10ast_node_tC2ERKS_
	.section	.text._ZN12maybe_node_tC2ERK10ast_node_t,"axG",@progbits,_ZN12maybe_node_tC5ERK10ast_node_t,comdat
	.align	1
	.weak	_ZN12maybe_node_tC2ERK10ast_node_t
	.type	_ZN12maybe_node_tC2ERK10ast_node_t, @function
_ZN12maybe_node_tC2ERK10ast_node_t:
.LFB4891:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# node, node
# ast.hpp:47:     inline maybe_node_t(const ast_node_t& node) : is_none(false), node(node) {}
	ld	a5,-24(s0)		# tmp136, this
	sb	zero,0(a5)	#, this_4(D)->is_none
# ast.hpp:47:     inline maybe_node_t(const ast_node_t& node) : is_none(false), node(node) {}
	ld	a5,-24(s0)		# tmp137, this
	addi	a5,a5,8	#, _1, tmp137
	ld	a1,-32(s0)		#, node
	mv	a0,a5	#, _1
	call	_ZN10ast_node_tC1ERKS_		#
# ast.hpp:47:     inline maybe_node_t(const ast_node_t& node) : is_none(false), node(node) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4891:
	.size	_ZN12maybe_node_tC2ERK10ast_node_t, .-_ZN12maybe_node_tC2ERK10ast_node_t
	.weak	_ZN12maybe_node_tC1ERK10ast_node_t
	.set	_ZN12maybe_node_tC1ERK10ast_node_t,_ZN12maybe_node_tC2ERK10ast_node_t
	.section	.text._ZN12maybe_node_tC2ERKS_,"axG",@progbits,_ZN12maybe_node_tC5ERKS_,comdat
	.align	1
	.weak	_ZN12maybe_node_tC2ERKS_
	.type	_ZN12maybe_node_tC2ERKS_, @function
_ZN12maybe_node_tC2ERKS_:
.LFB4894:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# other, other
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	ld	a5,-32(s0)		# tmp138, other
	lbu	a4,0(a5)	# _1, other_8(D)->is_none
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	ld	a5,-24(s0)		# tmp139, this
	sb	a4,0(a5)	# _1, this_6(D)->is_none
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	ld	a5,-24(s0)		# tmp140, this
	addi	a4,a5,8	#, _2, tmp140
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	ld	a5,-32(s0)		# tmp141, other
	addi	a5,a5,8	#, _3, tmp141
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	mv	a1,a5	#, _3
	mv	a0,a4	#, _2
	call	_ZN10ast_node_tC1ERKS_		#
# ast.hpp:50:         : is_none(other.is_none), node(other.node) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4894:
	.size	_ZN12maybe_node_tC2ERKS_, .-_ZN12maybe_node_tC2ERKS_
	.weak	_ZN12maybe_node_tC1ERKS_
	.set	_ZN12maybe_node_tC1ERKS_,_ZN12maybe_node_tC2ERKS_
	.section	.text._ZN12maybe_node_tD2Ev,"axG",@progbits,_ZN12maybe_node_tD5Ev,comdat
	.align	1
	.weak	_ZN12maybe_node_tD2Ev
	.type	_ZN12maybe_node_tD2Ev, @function
_ZN12maybe_node_tD2Ev:
.LFB4898:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:42: struct maybe_node_t {
	ld	a5,-24(s0)		# tmp135, this
	addi	a5,a5,8	#, _1, tmp135
	mv	a0,a5	#, _1
	call	_ZN10ast_node_tD1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4898:
	.size	_ZN12maybe_node_tD2Ev, .-_ZN12maybe_node_tD2Ev
	.weak	_ZN12maybe_node_tD1Ev
	.set	_ZN12maybe_node_tD1Ev,_ZN12maybe_node_tD2Ev
	.section	.text._ZN13maybe_error_tC2ERK12maybe_node_t,"axG",@progbits,_ZN13maybe_error_tC5ERK12maybe_node_t,comdat
	.align	1
	.weak	_ZN13maybe_error_tC2ERK12maybe_node_t
	.type	_ZN13maybe_error_tC2ERK12maybe_node_t, @function
_ZN13maybe_error_tC2ERK12maybe_node_t:
.LFB4900:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# maybe_node, maybe_node
# ast.hpp:60:         : is_error(false), maybe_node(maybe_node) {}
	ld	a5,-24(s0)		# tmp136, this
	sb	zero,0(a5)	#, this_4(D)->is_error
# ast.hpp:60:         : is_error(false), maybe_node(maybe_node) {}
	ld	a5,-24(s0)		# tmp137, this
	sd	zero,8(a5)	#, this_4(D)->error
# ast.hpp:60:         : is_error(false), maybe_node(maybe_node) {}
	ld	a5,-24(s0)		# tmp138, this
	addi	a5,a5,16	#, _1, tmp138
	ld	a1,-32(s0)		#, maybe_node
	mv	a0,a5	#, _1
	call	_ZN12maybe_node_tC1ERKS_		#
# ast.hpp:60:         : is_error(false), maybe_node(maybe_node) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4900:
	.size	_ZN13maybe_error_tC2ERK12maybe_node_t, .-_ZN13maybe_error_tC2ERK12maybe_node_t
	.weak	_ZN13maybe_error_tC1ERK12maybe_node_t
	.set	_ZN13maybe_error_tC1ERK12maybe_node_t,_ZN13maybe_error_tC2ERK12maybe_node_t
	.section	.text._ZN13maybe_error_tC2EPKc,"axG",@progbits,_ZN13maybe_error_tC5EPKc,comdat
	.align	1
	.weak	_ZN13maybe_error_tC2EPKc
	.type	_ZN13maybe_error_tC2EPKc, @function
_ZN13maybe_error_tC2EPKc:
.LFB4903:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# error, error
# ast.hpp:62:     inline maybe_error_t(const char* error) : is_error(true), error(error) {}
	ld	a5,-24(s0)		# tmp136, this
	li	a4,1		# tmp137,
	sb	a4,0(a5)	# tmp137, this_4(D)->is_error
# ast.hpp:62:     inline maybe_error_t(const char* error) : is_error(true), error(error) {}
	ld	a5,-24(s0)		# tmp138, this
	ld	a4,-32(s0)		# tmp139, error
	sd	a4,8(a5)	# tmp139, this_4(D)->error
# ast.hpp:62:     inline maybe_error_t(const char* error) : is_error(true), error(error) {}
	ld	a5,-24(s0)		# tmp140, this
	addi	a5,a5,16	#, _1, tmp140
	mv	a0,a5	#, _1
	call	_ZN12maybe_node_tC1Ev		#
# ast.hpp:62:     inline maybe_error_t(const char* error) : is_error(true), error(error) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4903:
	.size	_ZN13maybe_error_tC2EPKc, .-_ZN13maybe_error_tC2EPKc
	.weak	_ZN13maybe_error_tC1EPKc
	.set	_ZN13maybe_error_tC1EPKc,_ZN13maybe_error_tC2EPKc
	.section	.text._ZN13maybe_error_tC2ERKS_,"axG",@progbits,_ZN13maybe_error_tC5ERKS_,comdat
	.align	1
	.weak	_ZN13maybe_error_tC2ERKS_
	.type	_ZN13maybe_error_tC2ERKS_, @function
_ZN13maybe_error_tC2ERKS_:
.LFB4906:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# other, other
# ast.hpp:65:         : is_error(other.is_error),
	ld	a5,-32(s0)		# tmp139, other
	lbu	a4,0(a5)	# _1, other_9(D)->is_error
# ast.hpp:65:         : is_error(other.is_error),
	ld	a5,-24(s0)		# tmp140, this
	sb	a4,0(a5)	# _1, this_7(D)->is_error
# ast.hpp:66:           error(other.error),
	ld	a5,-32(s0)		# tmp141, other
	ld	a4,8(a5)		# _2, other_9(D)->error
# ast.hpp:66:           error(other.error),
	ld	a5,-24(s0)		# tmp142, this
	sd	a4,8(a5)	# _2, this_7(D)->error
# ast.hpp:67:           maybe_node(other.maybe_node) {}
	ld	a5,-24(s0)		# tmp143, this
	addi	a4,a5,16	#, _3, tmp143
# ast.hpp:67:           maybe_node(other.maybe_node) {}
	ld	a5,-32(s0)		# tmp144, other
	addi	a5,a5,16	#, _4, tmp144
# ast.hpp:67:           maybe_node(other.maybe_node) {}
	mv	a1,a5	#, _4
	mv	a0,a4	#, _3
	call	_ZN12maybe_node_tC1ERKS_		#
# ast.hpp:67:           maybe_node(other.maybe_node) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4906:
	.size	_ZN13maybe_error_tC2ERKS_, .-_ZN13maybe_error_tC2ERKS_
	.weak	_ZN13maybe_error_tC1ERKS_
	.set	_ZN13maybe_error_tC1ERKS_,_ZN13maybe_error_tC2ERKS_
	.section	.text._ZN13maybe_error_tC2ERK10ast_node_t,"axG",@progbits,_ZN13maybe_error_tC5ERK10ast_node_t,comdat
	.align	1
	.weak	_ZN13maybe_error_tC2ERK10ast_node_t
	.type	_ZN13maybe_error_tC2ERK10ast_node_t, @function
_ZN13maybe_error_tC2ERK10ast_node_t:
.LFB4909:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# node, node
# ast.hpp:70:         : is_error(false), maybe_node(node) {}
	ld	a5,-24(s0)		# tmp136, this
	sb	zero,0(a5)	#, this_4(D)->is_error
# ast.hpp:70:         : is_error(false), maybe_node(node) {}
	ld	a5,-24(s0)		# tmp137, this
	sd	zero,8(a5)	#, this_4(D)->error
# ast.hpp:70:         : is_error(false), maybe_node(node) {}
	ld	a5,-24(s0)		# tmp138, this
	addi	a5,a5,16	#, _1, tmp138
	ld	a1,-32(s0)		#, node
	mv	a0,a5	#, _1
	call	_ZN12maybe_node_tC1ERK10ast_node_t		#
# ast.hpp:70:         : is_error(false), maybe_node(node) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4909:
	.size	_ZN13maybe_error_tC2ERK10ast_node_t, .-_ZN13maybe_error_tC2ERK10ast_node_t
	.weak	_ZN13maybe_error_tC1ERK10ast_node_t
	.set	_ZN13maybe_error_tC1ERK10ast_node_t,_ZN13maybe_error_tC2ERK10ast_node_t
	.section	.text._ZN7lexer_tC2ERKS_,"axG",@progbits,_ZN7lexer_tC5ERKS_,comdat
	.align	1
	.weak	_ZN7lexer_tC2ERKS_
	.type	_ZN7lexer_tC2ERKS_, @function
_ZN7lexer_tC2ERKS_:
.LFB4913:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109396, D.109396
# parser.hpp:258: struct lexer_t {
	ld	a5,-32(s0)		# tmp145, D.109396
	ld	a4,0(a5)		# _1, _15(D)->descriptor
	ld	a5,-24(s0)		# tmp146, this
	sd	a4,0(a5)	# _1, this_13(D)->descriptor
	ld	a5,-32(s0)		# tmp147, D.109396
	ld	a4,8(a5)		# _2, _15(D)->buffer
	ld	a5,-24(s0)		# tmp148, this
	sd	a4,8(a5)	# _2, this_13(D)->buffer
	ld	a5,-32(s0)		# tmp149, D.109396
	ld	a4,16(a5)		# _3, _15(D)->current_read_position
	ld	a5,-24(s0)		# tmp150, this
	sd	a4,16(a5)	# _3, this_13(D)->current_read_position
	ld	a5,-32(s0)		# tmp151, D.109396
	lbu	a4,24(a5)	# _4, _15(D)->ended_reading
	ld	a5,-24(s0)		# tmp152, this
	sb	a4,24(a5)	# _4, this_13(D)->ended_reading
	ld	a5,-32(s0)		# tmp153, D.109396
	ld	a4,32(a5)		# _5, _15(D)->max_length
	ld	a5,-24(s0)		# tmp154, this
	sd	a4,32(a5)	# _5, this_13(D)->max_length
	ld	a5,-32(s0)		# tmp155, D.109396
	ld	a4,40(a5)		# _6, _15(D)->cur_position
	ld	a5,-24(s0)		# tmp156, this
	sd	a4,40(a5)	# _6, this_13(D)->cur_position
	ld	a5,-32(s0)		# tmp157, D.109396
	ld	a4,48(a5)		# _7, _15(D)->cur_row
	ld	a5,-24(s0)		# tmp158, this
	sd	a4,48(a5)	# _7, this_13(D)->cur_row
	ld	a5,-32(s0)		# tmp159, D.109396
	ld	a4,56(a5)		# _8, _15(D)->cur_col
	ld	a5,-24(s0)		# tmp160, this
	sd	a4,56(a5)	# _8, this_13(D)->cur_col
	ld	a5,-24(s0)		# tmp161, this
	addi	a4,a5,64	#, _9, tmp161
	ld	a5,-32(s0)		# tmp162, D.109396
	addi	a5,a5,64	#, _10, tmp162
	mv	a1,a5	#, _10
	mv	a0,a4	#, _9
	call	_ZN4rstd6stringC1ERKS0_		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4913:
	.size	_ZN7lexer_tC2ERKS_, .-_ZN7lexer_tC2ERKS_
	.weak	_ZN7lexer_tC1ERKS_
	.set	_ZN7lexer_tC1ERKS_,_ZN7lexer_tC2ERKS_
	.section	.text._ZN8parser_tC2ERK7lexer_t,"axG",@progbits,_ZN8parser_tC5ERK7lexer_t,comdat
	.align	1
	.weak	_ZN8parser_tC2ERK7lexer_t
	.type	_ZN8parser_tC2ERK7lexer_t, @function
_ZN8parser_tC2ERK7lexer_t:
.LFB4915:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# lexer, lexer
# ast.hpp:77:     inline parser_t(const lexer_t& lexer) : lexer(lexer) {}
	ld	a5,-24(s0)		# _1, this
	ld	a1,-32(s0)		#, lexer
	mv	a0,a5	#, _1
	call	_ZN7lexer_tC1ERKS_		#
# ast.hpp:77:     inline parser_t(const lexer_t& lexer) : lexer(lexer) {}
	ld	a5,-24(s0)		# tmp138, this
	addi	a5,a5,88	#, _2, tmp138
	mv	a0,a5	#, _2
	call	_ZN14parsed_token_tC1Ev		#
# ast.hpp:77:     inline parser_t(const lexer_t& lexer) : lexer(lexer) {}
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4915:
	.size	_ZN8parser_tC2ERK7lexer_t, .-_ZN8parser_tC2ERK7lexer_t
	.weak	_ZN8parser_tC1ERK7lexer_t
	.set	_ZN8parser_tC1ERK7lexer_t,_ZN8parser_tC2ERK7lexer_t
	.section	.text._ZN14parsed_token_taSEOS_,"axG",@progbits,_ZN14parsed_token_taSEOS_,comdat
	.align	1
	.weak	_ZN14parsed_token_taSEOS_
	.type	_ZN14parsed_token_taSEOS_, @function
_ZN14parsed_token_taSEOS_:
.LFB4918:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109410, D.109410
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-32(s0)		# tmp143, D.109410
	ld	a4,0(a5)		# _1, _9(D)->token
	ld	a5,-24(s0)		# tmp144, this
	sd	a4,0(a5)	# _1, this_10(D)->token
	ld	a5,-32(s0)		# tmp145, D.109410
	ld	a4,8(a5)		# _2, _9(D)->start
	ld	a5,-24(s0)		# tmp146, this
	sd	a4,8(a5)	# _2, this_10(D)->start
	ld	a5,-32(s0)		# tmp147, D.109410
	ld	a4,16(a5)		# _3, _9(D)->end
	ld	a5,-24(s0)		# tmp148, this
	sd	a4,16(a5)	# _3, this_10(D)->end
	ld	a5,-32(s0)		# tmp149, D.109410
	ld	a4,24(a5)		# _4, _9(D)->row
	ld	a5,-24(s0)		# tmp150, this
	sd	a4,24(a5)	# _4, this_10(D)->row
	ld	a5,-32(s0)		# tmp151, D.109410
	ld	a4,32(a5)		# _5, _9(D)->col
	ld	a5,-24(s0)		# tmp152, this
	sd	a4,32(a5)	# _5, this_10(D)->col
	ld	a5,-32(s0)		# tmp153, D.109410
	addi	a4,a5,40	#, _6, tmp153
	ld	a5,-24(s0)		# tmp154, this
	addi	a5,a5,40	#, _7, tmp154
	mv	a1,a4	#, _6
	mv	a0,a5	#, _7
	call	_ZN4rstd6stringaSERKS0_		#
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-24(s0)		# _17, this
# parser.hpp:236: struct parsed_token_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4918:
	.size	_ZN14parsed_token_taSEOS_, .-_ZN14parsed_token_taSEOS_
	.section	.text._ZN14parsed_token_taSERKS_,"axG",@progbits,_ZN14parsed_token_taSERKS_,comdat
	.align	1
	.weak	_ZN14parsed_token_taSERKS_
	.type	_ZN14parsed_token_taSERKS_, @function
_ZN14parsed_token_taSERKS_:
.LFB4919:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109407, D.109407
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-32(s0)		# tmp143, D.109407
	ld	a4,0(a5)		# _1, _9(D)->token
	ld	a5,-24(s0)		# tmp144, this
	sd	a4,0(a5)	# _1, this_10(D)->token
	ld	a5,-32(s0)		# tmp145, D.109407
	ld	a4,8(a5)		# _2, _9(D)->start
	ld	a5,-24(s0)		# tmp146, this
	sd	a4,8(a5)	# _2, this_10(D)->start
	ld	a5,-32(s0)		# tmp147, D.109407
	ld	a4,16(a5)		# _3, _9(D)->end
	ld	a5,-24(s0)		# tmp148, this
	sd	a4,16(a5)	# _3, this_10(D)->end
	ld	a5,-32(s0)		# tmp149, D.109407
	ld	a4,24(a5)		# _4, _9(D)->row
	ld	a5,-24(s0)		# tmp150, this
	sd	a4,24(a5)	# _4, this_10(D)->row
	ld	a5,-32(s0)		# tmp151, D.109407
	ld	a4,32(a5)		# _5, _9(D)->col
	ld	a5,-24(s0)		# tmp152, this
	sd	a4,32(a5)	# _5, this_10(D)->col
	ld	a5,-32(s0)		# tmp153, D.109407
	addi	a4,a5,40	#, _6, tmp153
	ld	a5,-24(s0)		# tmp154, this
	addi	a5,a5,40	#, _7, tmp154
	mv	a1,a4	#, _6
	mv	a0,a5	#, _7
	call	_ZN4rstd6stringaSERKS0_		#
# parser.hpp:236: struct parsed_token_t {
	ld	a5,-24(s0)		# _17, this
# parser.hpp:236: struct parsed_token_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4919:
	.size	_ZN14parsed_token_taSERKS_, .-_ZN14parsed_token_taSERKS_
	.section	.text._ZN8parser_t15skip_whitespaceEv,"axG",@progbits,_ZN8parser_t15skip_whitespaceEv,comdat
	.align	1
	.weak	_ZN8parser_t15skip_whitespaceEv
	.type	_ZN8parser_t15skip_whitespaceEv, @function
_ZN8parser_t15skip_whitespaceEv:
.LFB4917:
	.cfi_startproc
	addi	sp,sp,-160	#,,
	.cfi_def_cfa_offset 160
	sd	ra,152(sp)	#,
	sd	s0,144(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,160	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-152(s0)	# this, this
# ast.hpp:80:         auto new_token = lexer.next_tok();
	ld	a4,-152(s0)		# _1, this
	addi	a5,s0,-144	#, tmp139,
	mv	a1,a4	#, _1
	mv	a0,a5	#, tmp139
	call	_ZN7lexer_t8next_tokEv		#
# ast.hpp:81:         while (new_token.token == SPACE || new_token.token == NEWLINE) {
	j	.L337		#
.L338:
# ast.hpp:82:             new_token = lexer.next_tok();
	ld	a4,-152(s0)		# _2, this
	addi	a5,s0,-80	#, tmp140,
	mv	a1,a4	#, _2
	mv	a0,a5	#, tmp140
	call	_ZN7lexer_t8next_tokEv		#
# ast.hpp:82:             new_token = lexer.next_tok();
	addi	a4,s0,-80	#, tmp141,
	addi	a5,s0,-144	#, tmp142,
	mv	a1,a4	#, tmp141
	mv	a0,a5	#, tmp142
	call	_ZN14parsed_token_taSEOS_		#
# ast.hpp:82:             new_token = lexer.next_tok();
	addi	a5,s0,-80	#, tmp143,
	mv	a0,a5	#, tmp143
	call	_ZN14parsed_token_tD1Ev		#
.L337:
# ast.hpp:81:         while (new_token.token == SPACE || new_token.token == NEWLINE) {
	ld	a4,-144(s0)		# _3, new_token.token
# ast.hpp:81:         while (new_token.token == SPACE || new_token.token == NEWLINE) {
	li	a5,3		# tmp144,
	beq	a4,a5,.L338	#, _3, tmp144,
# ast.hpp:81:         while (new_token.token == SPACE || new_token.token == NEWLINE) {
	ld	a4,-144(s0)		# _4, new_token.token
# ast.hpp:81:         while (new_token.token == SPACE || new_token.token == NEWLINE) {
	li	a5,2		# tmp145,
	beq	a4,a5,.L338	#, _4, tmp145,
# ast.hpp:84:         current_token = new_token;
	ld	a5,-152(s0)		# tmp146, this
	addi	a5,a5,88	#, _5, tmp146
	addi	a4,s0,-144	#, tmp147,
	mv	a1,a4	#, tmp147
	mv	a0,a5	#, _5
	call	_ZN14parsed_token_taSERKS_		#
# ast.hpp:85:     }
	addi	a5,s0,-144	#, tmp148,
	mv	a0,a5	#, tmp148
	call	_ZN14parsed_token_tD1Ev		#
	ld	ra,152(sp)		#,
	.cfi_restore 1
	ld	s0,144(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 160
	addi	sp,sp,160	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4917:
	.size	_ZN8parser_t15skip_whitespaceEv, .-_ZN8parser_t15skip_whitespaceEv
	.section	.text._ZN8parser_t3eatEv,"axG",@progbits,_ZN8parser_t3eatEv,comdat
	.align	1
	.weak	_ZN8parser_t3eatEv
	.type	_ZN8parser_t3eatEv, @function
_ZN8parser_t3eatEv:
.LFB4920:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# .result_ptr, .result_ptr
	sd	a1,-32(s0)	# this, this
# ast.hpp:88:         skip_whitespace();
	ld	a0,-32(s0)		#, this
	call	_ZN8parser_t15skip_whitespaceEv		#
# ast.hpp:89:         return current_token;
	ld	a5,-32(s0)		# tmp135, this
	addi	a5,a5,88	#, _1, tmp135
	mv	a1,a5	#, _1
	ld	a0,-24(s0)		#, <retval>
	call	_ZN14parsed_token_tC1ERKS_		#
# ast.hpp:90:     }
	ld	a0,-24(s0)		#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4920:
	.size	_ZN8parser_t3eatEv, .-_ZN8parser_t3eatEv
	.section	.text._ZN13maybe_error_tD2Ev,"axG",@progbits,_ZN13maybe_error_tD5Ev,comdat
	.align	1
	.weak	_ZN13maybe_error_tD2Ev
	.type	_ZN13maybe_error_tD2Ev, @function
_ZN13maybe_error_tD2Ev:
.LFB4923:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:53: struct maybe_error_t {
	ld	a5,-24(s0)		# tmp135, this
	addi	a5,a5,16	#, _1, tmp135
	mv	a0,a5	#, _1
	call	_ZN12maybe_node_tD1Ev		#
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4923:
	.size	_ZN13maybe_error_tD2Ev, .-_ZN13maybe_error_tD2Ev
	.weak	_ZN13maybe_error_tD1Ev
	.set	_ZN13maybe_error_tD1Ev,_ZN13maybe_error_tD2Ev
	.section	.rodata
	.align	3
.LC133:
	.string	"ast parsed number: "
	.section	.text._ZN8parser_t12parse_numberEv,"axG",@progbits,_ZN8parser_t12parse_numberEv,comdat
	.align	1
	.weak	_ZN8parser_t12parse_numberEv
	.type	_ZN8parser_t12parse_numberEv, @function
_ZN8parser_t12parse_numberEv:
.LFB4921:
	.cfi_startproc
	addi	sp,sp,-512	#,,
	.cfi_def_cfa_offset 512
	sd	ra,504(sp)	#,
	sd	s0,496(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,512	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-504(s0)	# .result_ptr, .result_ptr
	sd	a1,-512(s0)	# this, this
# ast.hpp:93:         if (current_token.token == eof) {
	ld	a5,-512(s0)		# tmp139, this
	ld	a4,88(a5)		# _1, this_8(D)->current_token.token
# ast.hpp:93:         if (current_token.token == eof) {
	li	a5,1		# tmp140,
	bne	a4,a5,.L343	#, _1, tmp140,
# ast.hpp:94:             return maybe_error_t(maybe_node_t());
	addi	a5,s0,-264	#, tmp141,
	mv	a0,a5	#, tmp141
	call	_ZN12maybe_node_tC1Ev		#
# ast.hpp:94:             return maybe_error_t(maybe_node_t());
	addi	a5,s0,-264	#, tmp142,
	mv	a1,a5	#, tmp142
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERK12maybe_node_t		#
# ast.hpp:94:             return maybe_error_t(maybe_node_t());
	addi	a5,s0,-264	#, tmp143,
	mv	a0,a5	#, tmp143
	call	_ZN12maybe_node_tD1Ev		#
# ast.hpp:109:     }
	j	.L342		#
.L343:
# ast.hpp:97:         eat();
	addi	a5,s0,-176	#, tmp144,
	ld	a1,-512(s0)		#, this
	mv	a0,a5	#, tmp144
	call	_ZN8parser_t3eatEv		#
# ast.hpp:97:         eat();
	addi	a5,s0,-176	#, tmp145,
	mv	a0,a5	#, tmp145
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:98:         if (current_token.token == INT_10 || current_token.token == FLOAT_10) {
	ld	a5,-512(s0)		# tmp146, this
	ld	a4,88(a5)		# _2, this_8(D)->current_token.token
# ast.hpp:98:         if (current_token.token == INT_10 || current_token.token == FLOAT_10) {
	li	a5,4		# tmp147,
	beq	a4,a5,.L345	#, _2, tmp147,
# ast.hpp:98:         if (current_token.token == INT_10 || current_token.token == FLOAT_10) {
	ld	a5,-512(s0)		# tmp148, this
	ld	a4,88(a5)		# _3, this_8(D)->current_token.token
# ast.hpp:98:         if (current_token.token == INT_10 || current_token.token == FLOAT_10) {
	li	a5,5		# tmp149,
	bne	a4,a5,.L346	#, _3, tmp149,
.L345:
# ast.hpp:99:             const auto parsed_token = current_token;
	ld	a5,-512(s0)		# tmp150, this
	addi	a4,a5,88	#, _4, tmp150
	addi	a5,s0,-496	#, tmp151,
	mv	a1,a4	#, _4
	mv	a0,a5	#, tmp151
	call	_ZN14parsed_token_tC1ERKS_		#
# ast.hpp:100:             const auto node = ast_node_t(NUMBER, parsed_token);
	li	a5,3		# tmp152,
	sw	a5,-108(s0)	# tmp152, D.109438
# ast.hpp:100:             const auto node = ast_node_t(NUMBER, parsed_token);
	addi	a3,s0,-496	#, tmp153,
	addi	a4,s0,-108	#, tmp154,
	addi	a5,s0,-432	#, tmp155,
	mv	a2,a3	#, tmp153
	mv	a1,a4	#, tmp154
	mv	a0,a5	#, tmp155
	call	_ZN10ast_node_tC1ERK11node_type_tRK14parsed_token_t		#
# ast.hpp:102:             auto result = maybe_node_t(node);
	addi	a4,s0,-432	#, tmp156,
	addi	a5,s0,-352	#, tmp157,
	mv	a1,a4	#, tmp156
	mv	a0,a5	#, tmp157
	call	_ZN12maybe_node_tC1ERK10ast_node_t		#
# ast.hpp:103:             rsyscall::print_string("ast parsed number: ");
	lui	a5,%hi(.LC133)	# tmp158,
	addi	a0,a5,%lo(.LC133)	#, tmp158,
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:104:             rsyscall::print_string(result.node.token.data.c_str());
	addi	a5,s0,-352	#, tmp159,
	addi	a5,a5,64	#, tmp160, tmp159
	mv	a0,a5	#, tmp160
	call	_ZN4rstd6string5c_strEv		#
	mv	a5,a0	# _5,
# ast.hpp:104:             rsyscall::print_string(result.node.token.data.c_str());
	mv	a0,a5	#, _5
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:105:             rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp161,
	addi	a0,a5,%lo(.LC85)	#, tmp161,
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:106:             return maybe_error_t(result);
	addi	a5,s0,-352	#, tmp162,
	mv	a1,a5	#, tmp162
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERK12maybe_node_t		#
# ast.hpp:107:         }
	addi	a5,s0,-352	#, tmp163,
	mv	a0,a5	#, tmp163
	call	_ZN12maybe_node_tD1Ev		#
# ast.hpp:107:         }
	addi	a5,s0,-432	#, tmp164,
	mv	a0,a5	#, tmp164
	call	_ZN10ast_node_tD1Ev		#
# ast.hpp:107:         }
	addi	a5,s0,-496	#, tmp165,
	mv	a0,a5	#, tmp165
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:109:     }
	j	.L342		#
.L346:
# ast.hpp:108:         return maybe_error_t(maybe_node_t());
	addi	a5,s0,-104	#, tmp166,
	mv	a0,a5	#, tmp166
	call	_ZN12maybe_node_tC1Ev		#
# ast.hpp:108:         return maybe_error_t(maybe_node_t());
	addi	a5,s0,-104	#, tmp167,
	mv	a1,a5	#, tmp167
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERK12maybe_node_t		#
# ast.hpp:108:         return maybe_error_t(maybe_node_t());
	addi	a5,s0,-104	#, tmp168,
	mv	a0,a5	#, tmp168
	call	_ZN12maybe_node_tD1Ev		#
.L342:
# ast.hpp:109:     }
	ld	a0,-504(s0)		#, <retval>
	ld	ra,504(sp)		#,
	.cfi_restore 1
	ld	s0,496(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 512
	addi	sp,sp,512	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4921:
	.size	_ZN8parser_t12parse_numberEv, .-_ZN8parser_t12parse_numberEv
	.section	.text._ZN10ast_node_taSEOS_,"axG",@progbits,_ZN10ast_node_taSEOS_,comdat
	.align	1
	.weak	_ZN10ast_node_taSEOS_
	.type	_ZN10ast_node_taSEOS_, @function
_ZN10ast_node_taSEOS_:
.LFB4926:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109470, D.109470
# ast.hpp:30: struct ast_node_t {
	ld	a5,-32(s0)		# tmp140, D.109470
	lw	a4,0(a5)		# _1, _6(D)->type
	ld	a5,-24(s0)		# tmp141, this
	sw	a4,0(a5)	# _1, this_7(D)->type
	ld	a5,-32(s0)		# tmp142, D.109470
	ld	a4,8(a5)		# _2, _6(D)->children
	ld	a5,-24(s0)		# tmp143, this
	sd	a4,8(a5)	# _2, this_7(D)->children
	ld	a5,-32(s0)		# tmp144, D.109470
	addi	a4,a5,16	#, _3, tmp144
	ld	a5,-24(s0)		# tmp145, this
	addi	a5,a5,16	#, _4, tmp145
	mv	a1,a4	#, _3
	mv	a0,a5	#, _4
	call	_ZN14parsed_token_taSEOS_		#
# ast.hpp:30: struct ast_node_t {
	ld	a5,-24(s0)		# _11, this
# ast.hpp:30: struct ast_node_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4926:
	.size	_ZN10ast_node_taSEOS_, .-_ZN10ast_node_taSEOS_
	.section	.text._ZN10ast_node_taSERKS_,"axG",@progbits,_ZN10ast_node_taSERKS_,comdat
	.align	1
	.weak	_ZN10ast_node_taSERKS_
	.type	_ZN10ast_node_taSERKS_, @function
_ZN10ast_node_taSERKS_:
.LFB4927:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109467, D.109467
# ast.hpp:30: struct ast_node_t {
	ld	a5,-32(s0)		# tmp140, D.109467
	lw	a4,0(a5)		# _1, _6(D)->type
	ld	a5,-24(s0)		# tmp141, this
	sw	a4,0(a5)	# _1, this_7(D)->type
	ld	a5,-32(s0)		# tmp142, D.109467
	ld	a4,8(a5)		# _2, _6(D)->children
	ld	a5,-24(s0)		# tmp143, this
	sd	a4,8(a5)	# _2, this_7(D)->children
	ld	a5,-32(s0)		# tmp144, D.109467
	addi	a4,a5,16	#, _3, tmp144
	ld	a5,-24(s0)		# tmp145, this
	addi	a5,a5,16	#, _4, tmp145
	mv	a1,a4	#, _3
	mv	a0,a5	#, _4
	call	_ZN14parsed_token_taSERKS_		#
# ast.hpp:30: struct ast_node_t {
	ld	a5,-24(s0)		# _11, this
# ast.hpp:30: struct ast_node_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4927:
	.size	_ZN10ast_node_taSERKS_, .-_ZN10ast_node_taSERKS_
	.section	.text._ZN12maybe_node_taSERKS_,"axG",@progbits,_ZN12maybe_node_taSERKS_,comdat
	.align	1
	.weak	_ZN12maybe_node_taSERKS_
	.type	_ZN12maybe_node_taSERKS_, @function
_ZN12maybe_node_taSERKS_:
.LFB4929:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109476, D.109476
# ast.hpp:42: struct maybe_node_t {
	ld	a5,-32(s0)		# tmp139, D.109476
	lbu	a4,0(a5)	# _1, _5(D)->is_none
	ld	a5,-24(s0)		# tmp140, this
	sb	a4,0(a5)	# _1, this_6(D)->is_none
	ld	a5,-32(s0)		# tmp141, D.109476
	addi	a4,a5,8	#, _2, tmp141
	ld	a5,-24(s0)		# tmp142, this
	addi	a5,a5,8	#, _3, tmp142
	mv	a1,a4	#, _2
	mv	a0,a5	#, _3
	call	_ZN10ast_node_taSERKS_		#
# ast.hpp:42: struct maybe_node_t {
	ld	a5,-24(s0)		# _9, this
# ast.hpp:42: struct maybe_node_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4929:
	.size	_ZN12maybe_node_taSERKS_, .-_ZN12maybe_node_taSERKS_
	.section	.text._ZN13maybe_error_taSERKS_,"axG",@progbits,_ZN13maybe_error_taSERKS_,comdat
	.align	1
	.weak	_ZN13maybe_error_taSERKS_
	.type	_ZN13maybe_error_taSERKS_, @function
_ZN13maybe_error_taSERKS_:
.LFB4928:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
	sd	a1,-32(s0)	# D.109479, D.109479
# ast.hpp:53: struct maybe_error_t {
	ld	a5,-32(s0)		# tmp140, D.109479
	lbu	a4,0(a5)	# _1, _6(D)->is_error
	ld	a5,-24(s0)		# tmp141, this
	sb	a4,0(a5)	# _1, this_7(D)->is_error
	ld	a5,-32(s0)		# tmp142, D.109479
	ld	a4,8(a5)		# _2, _6(D)->error
	ld	a5,-24(s0)		# tmp143, this
	sd	a4,8(a5)	# _2, this_7(D)->error
	ld	a5,-32(s0)		# tmp144, D.109479
	addi	a4,a5,16	#, _3, tmp144
	ld	a5,-24(s0)		# tmp145, this
	addi	a5,a5,16	#, _4, tmp145
	mv	a1,a4	#, _3
	mv	a0,a5	#, _4
	call	_ZN12maybe_node_taSERKS_		#
# ast.hpp:53: struct maybe_error_t {
	ld	a5,-24(s0)		# _11, this
# ast.hpp:53: struct maybe_error_t {
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4928:
	.size	_ZN13maybe_error_taSERKS_, .-_ZN13maybe_error_taSERKS_
	.section	.rodata
	.align	3
.LC134:
	.string	"Expected expression after product expression"
	.section	.text._ZN8parser_t13parse_productEv,"axG",@progbits,_ZN8parser_t13parse_productEv,comdat
	.align	1
	.weak	_ZN8parser_t13parse_productEv
	.type	_ZN8parser_t13parse_productEv, @function
_ZN8parser_t13parse_productEv:
.LFB4925:
	.cfi_startproc
	addi	sp,sp,-720	#,,
	.cfi_def_cfa_offset 720
	sd	ra,712(sp)	#,
	sd	s0,704(sp)	#,
	sd	s1,696(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,720	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-712(s0)	# .result_ptr, .result_ptr
	sd	a1,-720(s0)	# this, this
# ast.hpp:112:         auto result = parse_number();
	addi	a5,s0,-456	#, tmp147,
	ld	a1,-720(s0)		#, this
	mv	a0,a5	#, tmp147
	call	_ZN8parser_t12parse_numberEv		#
# ast.hpp:114:         if (result.is_error) {
	lbu	a5,-456(s0)	# _1, result.is_error
# ast.hpp:114:         if (result.is_error) {
	beq	a5,zero,.L356	#, _1,,
# ast.hpp:115:             return result;
	addi	a5,s0,-456	#, tmp148,
	mv	a1,a5	#, tmp148
	ld	a0,-712(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
	j	.L357		#
.L356:
# ast.hpp:117:         if (result.maybe_node.is_none) {
	lbu	a5,-440(s0)	# _2, result.maybe_node.is_none
# ast.hpp:117:         if (result.maybe_node.is_none) {
	beq	a5,zero,.L358	#, _2,,
# ast.hpp:118:             return result;
	addi	a5,s0,-456	#, tmp149,
	mv	a1,a5	#, tmp149
	ld	a0,-712(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
	j	.L357		#
.L358:
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	addi	a5,s0,-352	#, tmp150,
	ld	a1,-720(s0)		#, this
	mv	a0,a5	#, tmp150
	call	_ZN8parser_t3eatEv		#
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	addi	a5,s0,-352	#, tmp151,
	mv	a0,a5	#, tmp151
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	j	.L359		#
.L366:
# ast.hpp:124:             auto parsed_token = current_token;
	ld	a5,-720(s0)		# tmp152, this
	addi	a4,a5,88	#, _3, tmp152
	addi	a5,s0,-704	#, tmp153,
	mv	a1,a4	#, _3
	mv	a0,a5	#, tmp153
	call	_ZN14parsed_token_tC1ERKS_		#
# ast.hpp:126:             auto rhs = parse_number();
	addi	a5,s0,-560	#, tmp154,
	ld	a1,-720(s0)		#, this
	mv	a0,a5	#, tmp154
	call	_ZN8parser_t12parse_numberEv		#
# ast.hpp:127:             if (result.is_error) {
	lbu	a5,-456(s0)	# _4, result.is_error
# ast.hpp:127:             if (result.is_error) {
	beq	a5,zero,.L360	#, _4,,
# ast.hpp:128:                 return result;
	addi	a5,s0,-456	#, tmp155,
	mv	a1,a5	#, tmp155
	ld	a0,-712(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
# ast.hpp:128:                 return result;
	li	s1,0		# finally_tmp.8_12,
# ast.hpp:128:                 return result;
	j	.L361		#
.L360:
# ast.hpp:130:             if (result.maybe_node.is_none) {
	lbu	a5,-440(s0)	# _5, result.maybe_node.is_none
# ast.hpp:130:             if (result.maybe_node.is_none) {
	beq	a5,zero,.L362	#, _5,,
# ast.hpp:132:                     "Expected expression after product expression");
	lui	a5,%hi(.LC134)	# tmp156,
	addi	a1,a5,%lo(.LC134)	#, tmp156,
	ld	a0,-712(s0)		#, <retval>
	call	_ZN13maybe_error_tC1EPKc		#
# ast.hpp:132:                     "Expected expression after product expression");
	li	s1,0		# finally_tmp.8_12,
# ast.hpp:132:                     "Expected expression after product expression");
	j	.L361		#
.L362:
# ast.hpp:134:             auto result_node = ast_node_t(BINARY_OP, parsed_token);
	li	a5,1		# tmp157,
	sw	a5,-284(s0)	# tmp157, D.109463
# ast.hpp:134:             auto result_node = ast_node_t(BINARY_OP, parsed_token);
	addi	a3,s0,-704	#, tmp158,
	addi	a4,s0,-284	#, tmp159,
	addi	a5,s0,-640	#, tmp160,
	mv	a2,a3	#, tmp158
	mv	a1,a4	#, tmp159
	mv	a0,a5	#, tmp160
	call	_ZN10ast_node_tC1ERK11node_type_tRK14parsed_token_t		#
# ast.hpp:135:             result_node.children[0] = ast_node_t(result.maybe_node.node);
	addi	a5,s0,-456	#, tmp161,
	addi	a4,a5,24	#, tmp162, tmp161
	addi	a5,s0,-280	#, tmp163,
	mv	a1,a4	#, tmp162
	mv	a0,a5	#, tmp163
	call	_ZN10ast_node_tC1ERKS_		#
# ast.hpp:135:             result_node.children[0] = ast_node_t(result.maybe_node.node);
	ld	a5,-632(s0)		# _6, result_node.children
# ast.hpp:135:             result_node.children[0] = ast_node_t(result.maybe_node.node);
	addi	a4,s0,-280	#, tmp164,
	mv	a1,a4	#, tmp164
	mv	a0,a5	#, _6
	call	_ZN10ast_node_taSEOS_		#
# ast.hpp:135:             result_node.children[0] = ast_node_t(result.maybe_node.node);
	addi	a5,s0,-280	#, tmp165,
	mv	a0,a5	#, tmp165
	call	_ZN10ast_node_tD1Ev		#
# ast.hpp:136:             result_node.children[1] = rhs.maybe_node.node;
	ld	a5,-632(s0)		# _7, result_node.children
# ast.hpp:136:             result_node.children[1] = rhs.maybe_node.node;
	addi	a4,a5,80	#, _8, _7
	addi	a5,s0,-560	#, tmp166,
	addi	a5,a5,24	#, tmp167, tmp166
	mv	a1,a5	#, tmp167
	mv	a0,a4	#, _8
	call	_ZN10ast_node_taSERKS_		#
# ast.hpp:137:             result = maybe_error_t(result_node);
	addi	a4,s0,-640	#, tmp168,
	addi	a5,s0,-200	#, tmp169,
	mv	a1,a4	#, tmp168
	mv	a0,a5	#, tmp169
	call	_ZN13maybe_error_tC1ERK10ast_node_t		#
# ast.hpp:137:             result = maybe_error_t(result_node);
	addi	a4,s0,-200	#, tmp170,
	addi	a5,s0,-456	#, tmp171,
	mv	a1,a4	#, tmp170
	mv	a0,a5	#, tmp171
	call	_ZN13maybe_error_taSERKS_		#
# ast.hpp:137:             result = maybe_error_t(result_node);
	addi	a5,s0,-200	#, tmp172,
	mv	a0,a5	#, tmp172
	call	_ZN13maybe_error_tD1Ev		#
# ast.hpp:140:         }
	addi	a5,s0,-640	#, tmp173,
	mv	a0,a5	#, tmp173
	call	_ZN10ast_node_tD1Ev		#
# ast.hpp:140:         }
	li	s1,1		# finally_tmp.8_12,
.L361:
	addi	a5,s0,-560	#, tmp174,
	mv	a0,a5	#, tmp174
	call	_ZN13maybe_error_tD1Ev		#
	mv	a4,s1	# tmp175, finally_tmp.8_12
	li	a5,1		# tmp176,
	bne	a4,a5,.L363	#, tmp175, tmp176,
# ast.hpp:140:         }
	li	s1,1		# finally_tmp.9_13,
	j	.L364		#
.L363:
	li	s1,0		# finally_tmp.9_13,
.L364:
# ast.hpp:140:         }
	addi	a5,s0,-704	#, tmp177,
	mv	a0,a5	#, tmp177
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:140:         }
	mv	a4,s1	# tmp178, finally_tmp.9_13
	li	a5,1		# tmp179,
	bne	a4,a5,.L357	#, tmp178, tmp179,
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	addi	a5,s0,-96	#, tmp180,
	ld	a1,-720(s0)		#, this
	mv	a0,a5	#, tmp180
	call	_ZN8parser_t3eatEv		#
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	addi	a5,s0,-96	#, tmp181,
	mv	a0,a5	#, tmp181
	call	_ZN14parsed_token_tD1Ev		#
.L359:
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	ld	a5,-720(s0)		# tmp182, this
	ld	a4,88(a5)		# _9, this_18(D)->current_token.token
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	li	a5,34		# tmp183,
	beq	a4,a5,.L366	#, _9, tmp183,
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	ld	a5,-720(s0)		# tmp184, this
	ld	a4,88(a5)		# _10, this_18(D)->current_token.token
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	li	a5,35		# tmp185,
	beq	a4,a5,.L366	#, _10, tmp185,
# ast.hpp:122:                     current_token.token == FLOORDIV;
	ld	a5,-720(s0)		# tmp186, this
	ld	a4,88(a5)		# _11, this_18(D)->current_token.token
# ast.hpp:121:         for (eat(); current_token.token == MUL || current_token.token == DIV ||
	li	a5,38		# tmp187,
	beq	a4,a5,.L366	#, _11, tmp187,
# ast.hpp:145:         return result;
	addi	a5,s0,-456	#, tmp188,
	mv	a1,a5	#, tmp188
	ld	a0,-712(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
.L357:
# ast.hpp:146:     }
	addi	a5,s0,-456	#, tmp189,
	mv	a0,a5	#, tmp189
	call	_ZN13maybe_error_tD1Ev		#
	ld	a0,-712(s0)		#, <retval>
	ld	ra,712(sp)		#,
	.cfi_restore 1
	ld	s0,704(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 720
	ld	s1,696(sp)		#,
	.cfi_restore 9
	addi	sp,sp,720	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4925:
	.size	_ZN8parser_t13parse_productEv, .-_ZN8parser_t13parse_productEv
	.section	.rodata
	.align	3
.LC135:
	.string	"got lhs: "
	.align	3
.LC136:
	.string	"Expected expression after sum expression"
	.section	.text._ZN8parser_t9parse_sumEv,"axG",@progbits,_ZN8parser_t9parse_sumEv,comdat
	.align	1
	.weak	_ZN8parser_t9parse_sumEv
	.type	_ZN8parser_t9parse_sumEv, @function
_ZN8parser_t9parse_sumEv:
.LFB4930:
	.cfi_startproc
	addi	sp,sp,-512	#,,
	.cfi_def_cfa_offset 512
	sd	ra,504(sp)	#,
	sd	s0,496(sp)	#,
	sd	s1,488(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	.cfi_offset 9, -24
	addi	s0,sp,512	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-504(s0)	# .result_ptr, .result_ptr
	sd	a1,-512(s0)	# this, this
# ast.hpp:149:         auto result = parse_product();
	addi	a5,s0,-248	#, tmp147,
	ld	a1,-512(s0)		#, this
	mv	a0,a5	#, tmp147
	call	_ZN8parser_t13parse_productEv		#
# ast.hpp:150:         rsyscall::print_string("got lhs: ");
	lui	a5,%hi(.LC135)	# tmp148,
	addi	a0,a5,%lo(.LC135)	#, tmp148,
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:151:         rsyscall::print_string(result.maybe_node.node.token.data.c_str());
	addi	a5,s0,-248	#, tmp149,
	addi	a5,a5,80	#, tmp150, tmp149
	mv	a0,a5	#, tmp150
	call	_ZN4rstd6string5c_strEv		#
	mv	a5,a0	# _1,
# ast.hpp:151:         rsyscall::print_string(result.maybe_node.node.token.data.c_str());
	mv	a0,a5	#, _1
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:154:         rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp151,
	addi	a0,a5,%lo(.LC85)	#, tmp151,
	call	_ZN8rsyscall12print_stringEPKc		#
# ast.hpp:155:         if (result.is_error) {
	lbu	a5,-248(s0)	# _2, result.is_error
# ast.hpp:155:         if (result.is_error) {
	beq	a5,zero,.L369	#, _2,,
# ast.hpp:156:             return result;
	addi	a5,s0,-248	#, tmp152,
	mv	a1,a5	#, tmp152
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
	j	.L370		#
.L369:
# ast.hpp:158:         if (result.maybe_node.is_none) {
	lbu	a5,-232(s0)	# _3, result.maybe_node.is_none
# ast.hpp:158:         if (result.maybe_node.is_none) {
	beq	a5,zero,.L372	#, _3,,
# ast.hpp:159:             return result;
	addi	a5,s0,-248	#, tmp153,
	mv	a1,a5	#, tmp153
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
	j	.L370		#
.L379:
# ast.hpp:165:             auto parsed_token = current_token;
	ld	a5,-512(s0)		# tmp154, this
	addi	a4,a5,88	#, _4, tmp154
	addi	a5,s0,-496	#, tmp155,
	mv	a1,a4	#, _4
	mv	a0,a5	#, tmp155
	call	_ZN14parsed_token_tC1ERKS_		#
# ast.hpp:166:             auto rhs = parse_product();
	addi	a5,s0,-352	#, tmp156,
	ld	a1,-512(s0)		#, this
	mv	a0,a5	#, tmp156
	call	_ZN8parser_t13parse_productEv		#
# ast.hpp:167:             if (result.is_error) {
	lbu	a5,-248(s0)	# _5, result.is_error
# ast.hpp:167:             if (result.is_error) {
	beq	a5,zero,.L373	#, _5,,
# ast.hpp:168:                 return result;
	addi	a5,s0,-248	#, tmp157,
	mv	a1,a5	#, tmp157
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
# ast.hpp:168:                 return result;
	li	s1,0		# finally_tmp.6_12,
# ast.hpp:168:                 return result;
	j	.L374		#
.L373:
# ast.hpp:170:             if (result.maybe_node.is_none) {
	lbu	a5,-232(s0)	# _6, result.maybe_node.is_none
# ast.hpp:170:             if (result.maybe_node.is_none) {
	beq	a5,zero,.L375	#, _6,,
# ast.hpp:172:                     "Expected expression after sum expression");
	lui	a5,%hi(.LC136)	# tmp158,
	addi	a1,a5,%lo(.LC136)	#, tmp158,
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1EPKc		#
# ast.hpp:172:                     "Expected expression after sum expression");
	li	s1,0		# finally_tmp.6_12,
# ast.hpp:172:                     "Expected expression after sum expression");
	j	.L374		#
.L375:
# ast.hpp:174:             auto result_node = ast_node_t(BINARY_OP, parsed_token);
	li	a5,1		# tmp159,
	sw	a5,-140(s0)	# tmp159, D.109503
# ast.hpp:174:             auto result_node = ast_node_t(BINARY_OP, parsed_token);
	addi	a3,s0,-496	#, tmp160,
	addi	a4,s0,-140	#, tmp161,
	addi	a5,s0,-432	#, tmp162,
	mv	a2,a3	#, tmp160
	mv	a1,a4	#, tmp161
	mv	a0,a5	#, tmp162
	call	_ZN10ast_node_tC1ERK11node_type_tRK14parsed_token_t		#
# ast.hpp:175:             result_node.children[0] = result.maybe_node.node;
	ld	a4,-424(s0)		# _7, result_node.children
# ast.hpp:175:             result_node.children[0] = result.maybe_node.node;
	addi	a5,s0,-248	#, tmp163,
	addi	a5,a5,24	#, tmp164, tmp163
	mv	a1,a5	#, tmp164
	mv	a0,a4	#, _7
	call	_ZN10ast_node_taSERKS_		#
# ast.hpp:176:             result_node.children[1] = rhs.maybe_node.node;
	ld	a5,-424(s0)		# _8, result_node.children
# ast.hpp:176:             result_node.children[1] = rhs.maybe_node.node;
	addi	a4,a5,80	#, _9, _8
	addi	a5,s0,-352	#, tmp165,
	addi	a5,a5,24	#, tmp166, tmp165
	mv	a1,a5	#, tmp166
	mv	a0,a4	#, _9
	call	_ZN10ast_node_taSERKS_		#
# ast.hpp:178:             result = maybe_error_t(result_node);
	addi	a4,s0,-432	#, tmp167,
	addi	a5,s0,-136	#, tmp168,
	mv	a1,a4	#, tmp167
	mv	a0,a5	#, tmp168
	call	_ZN13maybe_error_tC1ERK10ast_node_t		#
# ast.hpp:178:             result = maybe_error_t(result_node);
	addi	a4,s0,-136	#, tmp169,
	addi	a5,s0,-248	#, tmp170,
	mv	a1,a4	#, tmp169
	mv	a0,a5	#, tmp170
	call	_ZN13maybe_error_taSERKS_		#
# ast.hpp:178:             result = maybe_error_t(result_node);
	addi	a5,s0,-136	#, tmp171,
	mv	a0,a5	#, tmp171
	call	_ZN13maybe_error_tD1Ev		#
# ast.hpp:179:         }
	addi	a5,s0,-432	#, tmp172,
	mv	a0,a5	#, tmp172
	call	_ZN10ast_node_tD1Ev		#
# ast.hpp:179:         }
	li	s1,1		# finally_tmp.6_12,
.L374:
	addi	a5,s0,-352	#, tmp173,
	mv	a0,a5	#, tmp173
	call	_ZN13maybe_error_tD1Ev		#
	mv	a4,s1	# tmp174, finally_tmp.6_12
	li	a5,1		# tmp175,
	bne	a4,a5,.L376	#, tmp174, tmp175,
# ast.hpp:179:         }
	li	s1,1		# finally_tmp.7_13,
	j	.L377		#
.L376:
	li	s1,0		# finally_tmp.7_13,
.L377:
# ast.hpp:179:         }
	addi	a5,s0,-496	#, tmp176,
	mv	a0,a5	#, tmp176
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:179:         }
	mv	a4,s1	# tmp177, finally_tmp.7_13
	li	a5,1		# tmp178,
	bne	a4,a5,.L370	#, tmp177, tmp178,
.L372:
# ast.hpp:163:         for (; current_token.token == PLUS || current_token.token == MINUS;) {
	ld	a5,-512(s0)		# tmp179, this
	ld	a4,88(a5)		# _10, this_18(D)->current_token.token
# ast.hpp:163:         for (; current_token.token == PLUS || current_token.token == MINUS;) {
	li	a5,32		# tmp180,
	beq	a4,a5,.L379	#, _10, tmp180,
# ast.hpp:163:         for (; current_token.token == PLUS || current_token.token == MINUS;) {
	ld	a5,-512(s0)		# tmp181, this
	ld	a4,88(a5)		# _11, this_18(D)->current_token.token
# ast.hpp:163:         for (; current_token.token == PLUS || current_token.token == MINUS;) {
	li	a5,33		# tmp182,
	beq	a4,a5,.L379	#, _11, tmp182,
# ast.hpp:181:         return result;
	addi	a5,s0,-248	#, tmp183,
	mv	a1,a5	#, tmp183
	ld	a0,-504(s0)		#, <retval>
	call	_ZN13maybe_error_tC1ERKS_		#
.L370:
# ast.hpp:182:     }
	addi	a5,s0,-248	#, tmp184,
	mv	a0,a5	#, tmp184
	call	_ZN13maybe_error_tD1Ev		#
	ld	a0,-504(s0)		#, <retval>
	ld	ra,504(sp)		#,
	.cfi_restore 1
	ld	s0,496(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 512
	ld	s1,488(sp)		#,
	.cfi_restore 9
	addi	sp,sp,512	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4930:
	.size	_ZN8parser_t9parse_sumEv, .-_ZN8parser_t9parse_sumEv
	.section	.text._ZN8parser_t16parse_expressionEv,"axG",@progbits,_ZN8parser_t16parse_expressionEv,comdat
	.align	1
	.weak	_ZN8parser_t16parse_expressionEv
	.type	_ZN8parser_t16parse_expressionEv, @function
_ZN8parser_t16parse_expressionEv:
.LFB4931:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# .result_ptr, .result_ptr
	sd	a1,-32(s0)	# this, this
# ast.hpp:186:         return parse_sum();
	ld	a5,-24(s0)		# tmp134, <retval>
	ld	a1,-32(s0)		#, this
	mv	a0,a5	#, tmp134
	call	_ZN8parser_t9parse_sumEv		#
# ast.hpp:188:     }
	ld	a0,-24(s0)		#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4931:
	.size	_ZN8parser_t16parse_expressionEv, .-_ZN8parser_t16parse_expressionEv
	.text
	.align	1
	.globl	_Znwm
	.type	_Znwm, @function
_Znwm:
.LFB4978:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# size, size
# main.cpp:14: void* operator new(std::size_t size) { return memory::alloc(size); }
	ld	a0,-24(s0)		#, size
	call	_ZN6memory5allocEm		#
	mv	a5,a0	# _4,
# main.cpp:14: void* operator new(std::size_t size) { return memory::alloc(size); }
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4978:
	.size	_Znwm, .-_Znwm
	.align	1
	.globl	_ZdlPv
	.type	_ZdlPv, @function
_ZdlPv:
.LFB4979:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# p, p
# main.cpp:17:     memory::free(reinterpret_cast<memory::word_t*>(p));
	ld	a0,-24(s0)		#, p
	call	_ZN6memory4freeEPl		#
# main.cpp:18: }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4979:
	.size	_ZdlPv, .-_ZdlPv
	.align	1
	.globl	_Znam
	.type	_Znam, @function
_Znam:
.LFB4980:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# size, size
# main.cpp:22:     return memory::alloc(size);
	ld	a0,-24(s0)		#, size
	call	_ZN6memory5allocEm		#
	mv	a5,a0	# _4,
# main.cpp:23: }
	mv	a0,a5	#, <retval>
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4980:
	.size	_Znam, .-_Znam
	.align	1
	.globl	_ZdaPv
	.type	_ZdaPv, @function
_ZdaPv:
.LFB4981:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# p, p
# main.cpp:26:     memory::free(reinterpret_cast<memory::word_t*>(p));
	ld	a0,-24(s0)		#, p
	call	_ZN6memory4freeEPl		#
# main.cpp:27: }
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4981:
	.size	_ZdaPv, .-_ZdaPv
	.section	.text._ZN8parser_tD2Ev,"axG",@progbits,_ZN8parser_tD5Ev,comdat
	.align	1
	.weak	_ZN8parser_tD2Ev
	.type	_ZN8parser_tD2Ev, @function
_ZN8parser_tD2Ev:
.LFB4984:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,32	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-24(s0)	# this, this
# ast.hpp:73: struct parser_t {
	ld	a5,-24(s0)		# tmp136, this
	addi	a5,a5,88	#, _1, tmp136
	mv	a0,a5	#, _1
	call	_ZN14parsed_token_tD1Ev		#
# ast.hpp:73: struct parser_t {
	ld	a5,-24(s0)		# _2, this
	mv	a0,a5	#, _2
	call	_ZN7lexer_tD1Ev		#
# ast.hpp:73: struct parser_t {
	nop	
	ld	ra,24(sp)		#,
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 32
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4984:
	.size	_ZN8parser_tD2Ev, .-_ZN8parser_tD2Ev
	.weak	_ZN8parser_tD1Ev
	.set	_ZN8parser_tD1Ev,_ZN8parser_tD2Ev
	.section	.rodata
	.align	3
.LC137:
	.string	"/home/ivanpesnya/my-rars-python-interpreter/test.py"
	.align	3
.LC138:
	.string	"Error opening file: "
	.align	3
.LC139:
	.string	"Error parsing expression: "
	.align	3
.LC140:
	.string	"Parsed expression\n"
	.align	3
.LC141:
	.string	"Error: lhs and rhs are the same\n"
	.text
	.align	1
	.globl	main
	.type	main, @function
main:
.LFB4982:
	.cfi_startproc
	addi	sp,sp,-640	#,,
	.cfi_def_cfa_offset 640
	sd	ra,632(sp)	#,
	sd	s0,624(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,640	#,,
	.cfi_def_cfa 8, 0
# main.cpp:32:     const char* file_name =
	lui	a5,%hi(.LC137)	# tmp145,
	addi	a5,a5,%lo(.LC137)	# tmp144, tmp145,
	sd	a5,-24(s0)	# tmp144, file_name
# main.cpp:35:         rsyscall::open_file(file_name, (int)rstd::open_flag::read);
	li	a1,0		#,
	ld	a0,-24(s0)		#, file_name
	call	_ZN8rsyscall9open_fileEPKcl		#
	sd	a0,-32(s0)	#, tokenizer_descriptor
# main.cpp:37:     if (tokenizer_descriptor < 0) {
	ld	a5,-32(s0)		# tmp146, tokenizer_descriptor
	bge	a5,zero,.L391	#, tmp146,,
# main.cpp:38:         rsyscall::print_string("Error opening file: ");
	lui	a5,%hi(.LC138)	# tmp147,
	addi	a0,a5,%lo(.LC138)	#, tmp147,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:39:         rsyscall::print_string(file_name);
	ld	a0,-24(s0)		#, file_name
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:40:         rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp148,
	addi	a0,a5,%lo(.LC85)	#, tmp148,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:41:         rsyscall::exit(1);
	li	a0,1		#,
	call	_ZN8rsyscall4exitEl		#
.L391:
# main.cpp:43:     lexer_t lexer(tokenizer_descriptor);
	addi	a5,s0,-144	#, tmp149,
	ld	a1,-32(s0)		#, tokenizer_descriptor
	mv	a0,a5	#, tmp149
	call	_ZN7lexer_tC1El		#
# main.cpp:51:     parser_t parser(lexer);
	addi	a4,s0,-144	#, tmp150,
	addi	a5,s0,-296	#, tmp151,
	mv	a1,a4	#, tmp150
	mv	a0,a5	#, tmp151
	call	_ZN8parser_tC1ERK7lexer_t		#
# main.cpp:52:     auto ast_result = parser.parse_expression();
	addi	a5,s0,-400	#, tmp152,
	addi	a4,s0,-296	#, tmp153,
	mv	a1,a4	#, tmp153
	mv	a0,a5	#, tmp152
	call	_ZN8parser_t16parse_expressionEv		#
# main.cpp:53:     if (ast_result.is_error) {
	lbu	a5,-400(s0)	# _1, ast_result.is_error
# main.cpp:53:     if (ast_result.is_error) {
	beq	a5,zero,.L392	#, _1,,
# main.cpp:54:         rsyscall::print_string("Error parsing expression: ");
	lui	a5,%hi(.LC139)	# tmp154,
	addi	a0,a5,%lo(.LC139)	#, tmp154,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:55:         rsyscall::print_string(ast_result.error);
	ld	a5,-392(s0)		# _2, ast_result.error
	mv	a0,a5	#, _2
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:56:         rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp155,
	addi	a0,a5,%lo(.LC85)	#, tmp155,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:57:         rsyscall::exit(1);
	li	a0,1		#,
	call	_ZN8rsyscall4exitEl		#
.L392:
# main.cpp:59:     if (ast_result.maybe_node.node.token.token == eof) {
	ld	a4,-360(s0)		# _3, ast_result.maybe_node.node.token.token
# main.cpp:59:     if (ast_result.maybe_node.node.token.token == eof) {
	li	a5,1		# tmp156,
	bne	a4,a5,.L393	#, _3, tmp156,
# main.cpp:61:             ast_result.maybe_node.node.token.to_string().c_str());
	addi	a4,s0,-56	#, tmp157,
	addi	a5,s0,-400	#, tmp158,
	addi	a5,a5,40	#, tmp159, tmp158
	mv	a1,a5	#, tmp159
	mv	a0,a4	#, tmp157
	call	_ZNK14parsed_token_t9to_stringEv		#
# main.cpp:61:             ast_result.maybe_node.node.token.to_string().c_str());
	addi	a5,s0,-56	#, tmp160,
	mv	a0,a5	#, tmp160
	call	_ZN4rstd6string5c_strEv		#
	mv	a5,a0	# _4,
# main.cpp:60:         rsyscall::print_string(
	mv	a0,a5	#, _4
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:61:             ast_result.maybe_node.node.token.to_string().c_str());
	addi	a5,s0,-56	#, tmp161,
	mv	a0,a5	#, tmp161
	call	_ZN4rstd6stringD1Ev		#
.L393:
# main.cpp:63:     rsyscall::print_string("Parsed expression\n");
	lui	a5,%hi(.LC140)	# tmp162,
	addi	a0,a5,%lo(.LC140)	#, tmp162,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:66:     auto node = ast_result.maybe_node.node;
	addi	a5,s0,-400	#, tmp163,
	addi	a4,a5,24	#, tmp164, tmp163
	addi	a5,s0,-480	#, tmp165,
	mv	a1,a4	#, tmp164
	mv	a0,a5	#, tmp165
	call	_ZN10ast_node_tC1ERKS_		#
# main.cpp:67:     auto lhs = node.children[0];
	ld	a4,-472(s0)		# _5, node.children
# main.cpp:67:     auto lhs = node.children[0];
	addi	a5,s0,-560	#, tmp166,
	mv	a1,a4	#, _5
	mv	a0,a5	#, tmp166
	call	_ZN10ast_node_tC1ERKS_		#
# main.cpp:68:     auto rhs = node.children[1];
	ld	a5,-472(s0)		# _6, node.children
# main.cpp:68:     auto rhs = node.children[1];
	addi	a4,a5,80	#, _7, _6
	addi	a5,s0,-640	#, tmp167,
	mv	a1,a4	#, _7
	mv	a0,a5	#, tmp167
	call	_ZN10ast_node_tC1ERKS_		#
# main.cpp:69:     if (lhs.token.data == rhs.token.data) {
	addi	a5,s0,-640	#, tmp168,
	addi	a4,a5,56	#, tmp169, tmp168
	addi	a5,s0,-560	#, tmp170,
	addi	a5,a5,56	#, tmp171, tmp170
	mv	a1,a4	#, tmp169
	mv	a0,a5	#, tmp171
	call	_ZeqRKN4rstd6stringES2_		#
	mv	a5,a0	# tmp172,
# main.cpp:69:     if (lhs.token.data == rhs.token.data) {
	beq	a5,zero,.L394	#, retval.4_37,,
# main.cpp:70:         rsyscall::print_string("Error: lhs and rhs are the same\n");
	lui	a5,%hi(.LC141)	# tmp173,
	addi	a0,a5,%lo(.LC141)	#, tmp173,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:71:         rsyscall::exit(1);
	li	a0,1		#,
	call	_ZN8rsyscall4exitEl		#
.L394:
# main.cpp:73:     rsyscall::print_string("\n");
	lui	a5,%hi(.LC85)	# tmp174,
	addi	a0,a5,%lo(.LC85)	#, tmp174,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:74:     rsyscall::close_file(tokenizer_descriptor);
	ld	a0,-32(s0)		#, tokenizer_descriptor
	call	_ZN8rsyscall10close_fileEl		#
# main.cpp:75:     rsyscall::exit(0);
	li	a0,0		#,
	call	_ZN8rsyscall4exitEl		#
# main.cpp:76: }
	addi	a5,s0,-640	#, tmp175,
	mv	a0,a5	#, tmp175
	call	_ZN10ast_node_tD1Ev		#
# main.cpp:76: }
	addi	a5,s0,-560	#, tmp176,
	mv	a0,a5	#, tmp176
	call	_ZN10ast_node_tD1Ev		#
# main.cpp:76: }
	addi	a5,s0,-480	#, tmp177,
	mv	a0,a5	#, tmp177
	call	_ZN10ast_node_tD1Ev		#
# main.cpp:76: }
	addi	a5,s0,-400	#, tmp178,
	mv	a0,a5	#, tmp178
	call	_ZN13maybe_error_tD1Ev		#
# main.cpp:76: }
	addi	a5,s0,-296	#, tmp179,
	mv	a0,a5	#, tmp179
	call	_ZN8parser_tD1Ev		#
# main.cpp:76: }
	addi	a5,s0,-144	#, tmp180,
	mv	a0,a5	#, tmp180
	call	_ZN7lexer_tD1Ev		#
# main.cpp:76: }
	li	a5,0		# _55,
	mv	a0,a5	#, <retval>
	ld	ra,632(sp)		#,
	.cfi_restore 1
	ld	s0,624(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 640
	addi	sp,sp,640	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE4982:
	.size	main, .-main
	.section	.text._ZN6memory7memmoveIcEEvPT_S2_m,"axG",@progbits,_ZN6memory7memmoveIcEEvPT_S2_m,comdat
	.align	1
	.weak	_ZN6memory7memmoveIcEEvPT_S2_m
	.type	_ZN6memory7memmoveIcEEvPT_S2_m, @function
_ZN6memory7memmoveIcEEvPT_S2_m:
.LFB5304:
	.cfi_startproc
	addi	sp,sp,-64	#,,
	.cfi_def_cfa_offset 64
	sd	s0,56(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,64	#,,
	.cfi_def_cfa 8, 0
	sd	a0,-40(s0)	# dest, dest
	sd	a1,-48(s0)	# data, data
	sd	a2,-56(s0)	# size, size
# memory/allocator.hpp:110:     for (size_t i = 0; i < size; ++i) {
	sd	zero,-24(s0)	#, i
# memory/allocator.hpp:110:     for (size_t i = 0; i < size; ++i) {
	j	.L397		#
.L398:
# memory/allocator.hpp:111:         dest[i] = data[i];
	ld	a4,-48(s0)		# tmp137, data
	ld	a5,-24(s0)		# tmp138, i
	add	a4,a4,a5	# tmp138, _1, tmp137
# memory/allocator.hpp:111:         dest[i] = data[i];
	ld	a3,-40(s0)		# tmp139, dest
	ld	a5,-24(s0)		# tmp140, i
	add	a5,a3,a5	# tmp140, _2, tmp139
# memory/allocator.hpp:111:         dest[i] = data[i];
	lbu	a4,0(a4)	# _3, *_1
# memory/allocator.hpp:111:         dest[i] = data[i];
	sb	a4,0(a5)	# _3, *_2
# memory/allocator.hpp:110:     for (size_t i = 0; i < size; ++i) {
	ld	a5,-24(s0)		# tmp142, i
	addi	a5,a5,1	#, tmp141, tmp142
	sd	a5,-24(s0)	# tmp141, i
.L397:
# memory/allocator.hpp:110:     for (size_t i = 0; i < size; ++i) {
	ld	a4,-24(s0)		# tmp143, i
	ld	a5,-56(s0)		# tmp144, size
	bltu	a4,a5,.L398	#, tmp143, tmp144,
# memory/allocator.hpp:113: }
	nop	
	nop	
	ld	s0,56(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 64
	addi	sp,sp,64	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE5304:
	.size	_ZN6memory7memmoveIcEEvPT_S2_m, .-_ZN6memory7memmoveIcEEvPT_S2_m
	.text
	.align	1
	.type	_Z41__static_initialization_and_destruction_0v, @function
_Z41__static_initialization_and_destruction_0v:
.LFB5789:
	.cfi_startproc
	addi	sp,sp,-16	#,,
	.cfi_def_cfa_offset 16
	sd	s0,8(sp)	#,
	.cfi_offset 8, -8
	addi	s0,sp,16	#,,
	.cfi_def_cfa 8, 0
# memory/allocator.hpp:23: static auto top = heapStart;
	lui	a5,%hi(_ZN6memoryL9heapStartE)	# tmp135,
	ld	a4,%lo(_ZN6memoryL9heapStartE)(a5)		# heapStart.28_1, heapStart
	lui	a5,%hi(_ZN6memoryL3topE)	# tmp136,
	sd	a4,%lo(_ZN6memoryL3topE)(a5)	# heapStart.28_1, top
# main.cpp:76: }
	nop	
	ld	s0,8(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 16
	addi	sp,sp,16	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE5789:
	.size	_Z41__static_initialization_and_destruction_0v, .-_Z41__static_initialization_and_destruction_0v
	.section	.srodata,"a"
	.type	_ZNSt8__detail14__destructibleISt13_Bit_iteratorEE, @object
	.size	_ZNSt8__detail14__destructibleISt13_Bit_iteratorEE, 1
_ZNSt8__detail14__destructibleISt13_Bit_iteratorEE:
	.byte	1
	.type	_ZNSt8__detail19__destructible_implISt13_Bit_iteratorEE, @object
	.size	_ZNSt8__detail19__destructible_implISt13_Bit_iteratorEE, 1
_ZNSt8__detail19__destructible_implISt13_Bit_iteratorEE:
	.byte	1
	.type	_ZNSt8__detail14__destructibleISt19_Bit_const_iteratorEE, @object
	.size	_ZNSt8__detail14__destructibleISt19_Bit_const_iteratorEE, 1
_ZNSt8__detail14__destructibleISt19_Bit_const_iteratorEE:
	.byte	1
	.type	_ZNSt8__detail19__destructible_implISt19_Bit_const_iteratorEE, @object
	.size	_ZNSt8__detail19__destructible_implISt19_Bit_const_iteratorEE, 1
_ZNSt8__detail19__destructible_implISt19_Bit_const_iteratorEE:
	.byte	1
	.type	_ZNSt8__detail30__integer_to_chars_is_unsignedIjEE, @object
	.size	_ZNSt8__detail30__integer_to_chars_is_unsignedIjEE, 1
_ZNSt8__detail30__integer_to_chars_is_unsignedIjEE:
	.byte	1
	.type	_ZNSt8__detail30__integer_to_chars_is_unsignedImEE, @object
	.size	_ZNSt8__detail30__integer_to_chars_is_unsignedImEE, 1
_ZNSt8__detail30__integer_to_chars_is_unsignedImEE:
	.byte	1
	.type	_ZNSt8__detail30__integer_to_chars_is_unsignedIyEE, @object
	.size	_ZNSt8__detail30__integer_to_chars_is_unsignedIyEE, 1
_ZNSt8__detail30__integer_to_chars_is_unsignedIyEE:
	.byte	1
	.text
	.align	1
	.type	_GLOBAL__sub_I_TOKEN_NAMES, @function
_GLOBAL__sub_I_TOKEN_NAMES:
.LFB5790:
	.cfi_startproc
	addi	sp,sp,-16	#,,
	.cfi_def_cfa_offset 16
	sd	ra,8(sp)	#,
	sd	s0,0(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
	addi	s0,sp,16	#,,
	.cfi_def_cfa 8, 0
# main.cpp:76: }
	call	_Z41__static_initialization_and_destruction_0v		#
	ld	ra,8(sp)		#,
	.cfi_restore 1
	ld	s0,0(sp)		#,
	.cfi_restore 8
	.cfi_def_cfa 2, 16
	addi	sp,sp,16	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
	.cfi_endproc
.LFE5790:
	.size	_GLOBAL__sub_I_TOKEN_NAMES, .-_GLOBAL__sub_I_TOKEN_NAMES
	.section	.init_array,"aw"
	.align	3
	.dword	_GLOBAL__sub_I_TOKEN_NAMES
	.ident	"GCC: (gc891d8dc23e-dirty) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
