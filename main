	.file	"main.cpp"
	.option nopic
	.attribute arch, "rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_zicsr2p0"
	.attribute unaligned_access, 0
	.attribute stack_align, 16
# GNU C++20 (gc891d8dc23e-dirty) version 13.2.0 (riscv64-unknown-linux-gnu)
#	compiled by GNU C version 11.4.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version none
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -mtune=rocket -mabi=lp64d -misa-spec=20191213 -march=rv64imafdc_zicsr -Os -std=c++20
	.text
	.section	.text._ZN8rsyscall12print_stringEPKc,"axG",@progbits,_ZN8rsyscall12print_stringEPKc,comdat
	.align	1
	.weak	_ZN8rsyscall12print_stringEPKc
	.type	_ZN8rsyscall12print_stringEPKc, @function
_ZN8rsyscall12print_stringEPKc:
.LFB3274:
	.cfi_startproc
# syscall.hpp:40: {
	mv	a5,a0	# tmp135, str
# syscall.hpp:41:     __asm__ volatile("li a7, 4\n\t"
#APP
# 41 "syscall.hpp" 1
	li a7, 4
	mv a0, a5	# tmp135
	ecall
	
# 0 "" 2
# syscall.hpp:45: }
#NO_APP
	ret	
	.cfi_endproc
.LFE3274:
	.size	_ZN8rsyscall12print_stringEPKc, .-_ZN8rsyscall12print_stringEPKc
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align	3
.LC0:
	.string	"/home/ivanpesnya/a.rs"
	.align	3
.LC1:
	.string	"couldn't load file\n"
	.align	3
.LC2:
	.string	"couldn't read from descriptor\n"
	.align	3
.LC3:
	.string	"===FILE CONTENTS===\n"
	.align	3
.LC4:
	.string	"===END OF FILE===\n"
	.section	.text.startup,"ax",@progbits
	.align	1
	.globl	main
	.type	main, @function
main:
.LFB3287:
	.cfi_startproc
	addi	sp,sp,-32	#,,
	.cfi_def_cfa_offset 32
	sd	s1,8(sp)	#,
	.cfi_offset 9, -24
# syscall.hpp:51:     __asm__ volatile("li a7, 1024\n\t"
	lui	s1,%hi(.LC0)	# tmp148,
# main.cpp:6: {
	sd	ra,24(sp)	#,
	sd	s0,16(sp)	#,
	.cfi_offset 1, -8
	.cfi_offset 8, -16
# syscall.hpp:51:     __asm__ volatile("li a7, 1024\n\t"
	addi	s1,s1,%lo(.LC0)	# tmp147, tmp148,
	li	a5,0		# tmp149,
#APP
# 51 "syscall.hpp" 1
	li a7, 1024
	mv a0, s1	# tmp147
	mv a1, a5	# tmp149
	ecall 
	mv s1, a0 	# descriptor
	
# 0 "" 2
# main.cpp:8:     if (descriptor < 0) {
#NO_APP
	bge	s1,zero,.L3	#, descriptor,,
# main.cpp:9:         rsyscall::print_string("couldn't load file\n");
	lui	a0,%hi(.LC1)	# tmp150,
	addi	a0,a0,%lo(.LC1)	#, tmp150,
	call	_ZN8rsyscall12print_stringEPKc		#
# syscall.hpp:23:     __asm__ volatile("addi a7, zero, 93\n\t"
	li	a5,1		# tmp151,
#APP
# 23 "syscall.hpp" 1
	addi a7, zero, 93
	add a0, zero, a5	# tmp151
	ecall
	
# 0 "" 2
#NO_APP
.L3:
# allocator.hpp:52:     auto block = heapStart;
	lui	a3,%hi(_ZN6memoryL9heapStartE)	# tmp152,
	ld	a2,%lo(_ZN6memoryL9heapStartE)(a3)		# block, heapStart
# allocator.hpp:55:         if (block->used || block->size < size) {
	li	a4,127		# tmp180,
# allocator.hpp:52:     auto block = heapStart;
	mv	a5,a2	# block, block
.L4:
# allocator.hpp:54:     while (block != nullptr) {
	bne	a5,zero,.L7	#, block,,
# syscall.hpp:10:     __asm__ volatile("addi a7, zero, 9\n\t"
#APP
# 10 "syscall.hpp" 1
	addi a7, zero, 9
	add a0, zero, a5	# block
	ecall
	mv a5, a0	# result
# 0 "" 2
#NO_APP
	li	a4,152		# tmp161,
#APP
# 10 "syscall.hpp" 1
	addi a7, zero, 9
	add a0, zero, a4	# tmp161
	ecall
	mv a4, a0	# result
# 0 "" 2
# allocator.hpp:42:     if (rsyscall::my_sbrk(allocSize(size)) == (void*)-1) {
#NO_APP
	li	a1,-1		# tmp162,
	beq	a4,a1,.L10	#, result, tmp162,
# allocator.hpp:82:     block->size = size;
	li	a4,128		# tmp163,
	sd	a4,0(a5)	# tmp163, MEM[(struct Block *)result_42].size
# allocator.hpp:83:     block->used = true;
	li	a4,1		# tmp164,
	sb	a4,8(a5)	# tmp164, MEM[(struct Block *)result_42].used
# allocator.hpp:85:     if (heapStart == nullptr) {
	bne	a2,zero,.L11	#, block,,
# allocator.hpp:86:         heapStart = block;
	sd	a5,%lo(_ZN6memoryL9heapStartE)(a3)	# result, heapStart
.L11:
# allocator.hpp:89:     if (top != nullptr) {
	lui	a4,%hi(_ZN6memoryL3topE)	# tmp166,
	ld	a3,%lo(_ZN6memoryL3topE)(a4)		# top.1_27, top
# allocator.hpp:89:     if (top != nullptr) {
	beq	a3,zero,.L12	#, top.1_27,,
# allocator.hpp:90:         top->next = block;
	sd	a5,16(a3)	# result, top.1_27->next
.L12:
# allocator.hpp:92:     top = block;
	sd	a5,%lo(_ZN6memoryL3topE)(a4)	# result, top
.L20:
# allocator.hpp:93:     return block->data;
	addi	s0,a5,24	#, _29, result
# syscall.hpp:75:     __asm__ volatile("li a7, 63\n\t"
	li	a5,128		# tmp169,
#APP
# 75 "syscall.hpp" 1
	li a7, 63
	mv a0, s1	# descriptor
	mv a1, s0	# _29
	mv a2, a5	# tmp169
	ecall
	mv a5, a0	# bytes_read
	
# 0 "" 2
# main.cpp:15:     if (bytes_read < 0) {
#NO_APP
	bge	a5,zero,.L13	#, bytes_read,,
# main.cpp:16:         rsyscall::print_string("couldn't read from descriptor\n");
	lui	a0,%hi(.LC2)	# tmp170,
	addi	a0,a0,%lo(.LC2)	#, tmp170,
	call	_ZN8rsyscall12print_stringEPKc		#
.L13:
# main.cpp:18:     rsyscall::print_string("===FILE CONTENTS===\n");
	lui	a0,%hi(.LC3)	# tmp171,
	addi	a0,a0,%lo(.LC3)	#, tmp171,
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:19:     rsyscall::print_string(buffer);
	mv	a0,s0	#, _29
	call	_ZN8rsyscall12print_stringEPKc		#
# main.cpp:20:     rsyscall::print_string("===END OF FILE===\n");
	lui	a0,%hi(.LC4)	# tmp172,
	addi	a0,a0,%lo(.LC4)	#, tmp172,
	call	_ZN8rsyscall12print_stringEPKc		#
# syscall.hpp:65:     __asm__ volatile("li a7, 57\n\t"
#APP
# 65 "syscall.hpp" 1
	li a7, 57
	mv a0, s1	# descriptor
	ecall
	
# 0 "" 2
# syscall.hpp:23:     __asm__ volatile("addi a7, zero, 93\n\t"
#NO_APP
	li	a5,0		# tmp173,
#APP
# 23 "syscall.hpp" 1
	addi a7, zero, 93
	add a0, zero, a5	# tmp173
	ecall
	
# 0 "" 2
# main.cpp:23: }
#NO_APP
	ld	ra,24(sp)		#,
	.cfi_remember_state
	.cfi_restore 1
	ld	s0,16(sp)		#,
	.cfi_restore 8
	ld	s1,8(sp)		#,
	.cfi_restore 9
	li	a0,0		#,
	addi	sp,sp,32	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
.L7:
	.cfi_restore_state
# allocator.hpp:55:         if (block->used || block->size < size) {
	lbu	a1,8(a5)	# block_31->used, block_31->used
	bne	a1,zero,.L5	#, block_31->used,,
# allocator.hpp:55:         if (block->used || block->size < size) {
	ld	a1,0(a5)		# block_31->size, block_31->size
	bgtu	a1,a4,.L20	#, block_31->size, tmp180,
.L5:
# allocator.hpp:56:             block = block->next;
	ld	a5,16(a5)		# block, block_31->next
# allocator.hpp:57:             continue;
	j	.L4		#
.L10:
# allocator.hpp:82:     block->size = size;
	sd	zero,0(zero)	#, MEM[(struct Block *)0B].size
	ebreak	
	.cfi_endproc
.LFE3287:
	.size	main, .-main
	.align	1
	.type	_GLOBAL__sub_I_main, @function
_GLOBAL__sub_I_main:
.LFB3981:
	.cfi_startproc
# allocator.hpp:23: static auto top = heapStart;
	lui	a5,%hi(_ZN6memoryL9heapStartE)	# tmp136,
	ld	a4,%lo(_ZN6memoryL9heapStartE)(a5)		# heapStart, heapStart
	lui	a5,%hi(_ZN6memoryL3topE)	# tmp135,
	sd	a4,%lo(_ZN6memoryL3topE)(a5)	# heapStart, top
# main.cpp:23: }
	ret	
	.cfi_endproc
.LFE3981:
	.size	_GLOBAL__sub_I_main, .-_GLOBAL__sub_I_main
	.section	.init_array,"aw"
	.align	3
	.dword	_GLOBAL__sub_I_main
	.section	.sbss,"aw",@nobits
	.align	3
	.type	_ZN6memoryL3topE, @object
	.size	_ZN6memoryL3topE, 8
_ZN6memoryL3topE:
	.zero	8
	.type	_ZN6memoryL9heapStartE, @object
	.size	_ZN6memoryL9heapStartE, 8
_ZN6memoryL9heapStartE:
	.zero	8
	.ident	"GCC: (gc891d8dc23e-dirty) 13.2.0"
	.section	.note.GNU-stack,"",@progbits
